==== q1 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST], output=[c_customer_id#82])
   +- *(9) Project [c_customer_id#82]
      +- *(9) BroadcastHashJoin [ctr_customer_sk#1], [c_customer_sk#81], Inner, BuildRight, false
         :- *(9) Project [ctr_customer_sk#1]
         :  +- *(9) BroadcastHashJoin [ctr_store_sk#2], [s_store_sk#52], Inner, BuildRight, false
         :     :- *(9) Project [ctr_customer_sk#1, ctr_store_sk#2]
         :     :  +- *(9) BroadcastHashJoin [ctr_store_sk#2], [ctr_store_sk#2#107], Inner, BuildLeft, (cast(ctr_total_return#3 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#103), false
         :     :     :- BroadcastQueryStage 7
         :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=793]
         :     :     :     +- *(7) Filter isnotnull(ctr_total_return#3)
         :     :     :        +- *(7) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[sum(UnscaledValue(sr_return_amt#15))], output=[ctr_customer_sk#1, ctr_store_sk#2, ctr_total_return#3])
         :     :     :           +- ShuffleQueryStage 5
         :     :     :              +- Exchange hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 20), ENSURE_REQUIREMENTS, [plan_id=541]
         :     :     :                 +- *(5) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[partial_sum(UnscaledValue(sr_return_amt#15))], output=[sr_customer_sk#7, sr_store_sk#11, sum#109L])
         :     :     :                    +- *(5) Project [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
         :     :     :                       +- *(5) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false
         :     :     :                          :- *(5) Filter ((isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11)) AND isnotnull(sr_customer_sk#7))
         :     :     :                          :  +- *(5) ColumnarToRow
         :     :     :                          :     +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_customer_sk#7,sr_store_sk#11,sr_return_amt#15] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#4), isnotnull(sr_store_sk#11), isnotnull(sr_customer_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>
         :     :     :                          +- BroadcastQueryStage 0
         :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]
         :     :     :                                +- *(1) Project [d_date_sk#24]
         :     :     :                                   +- *(1) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
         :     :     :                                      +- *(1) ColumnarToRow
         :     :     :                                         +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     +- *(9) Filter isnotnull((avg(ctr_total_return) * 1.2)#103)
         :     :        +- *(9) HashAggregate(keys=[ctr_store_sk#2], functions=[avg(ctr_total_return#3)], output=[(avg(ctr_total_return) * 1.2)#103, ctr_store_sk#2#107])
         :     :           +- ShuffleQueryStage 8
         :     :              +- Exchange hashpartitioning(ctr_store_sk#2, 20), ENSURE_REQUIREMENTS, [plan_id=907]
         :     :                 +- *(8) HashAggregate(keys=[ctr_store_sk#2], functions=[partial_avg(ctr_total_return#3)], output=[ctr_store_sk#2, sum#112, count#113L])
         :     :                    +- *(8) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[sum(UnscaledValue(sr_return_amt#15))], output=[ctr_store_sk#2, ctr_total_return#3])
         :     :                       +- ShuffleQueryStage 6
         :     :                          +- Exchange hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 20), ENSURE_REQUIREMENTS, [plan_id=589]
         :     :                             +- *(6) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[partial_sum(UnscaledValue(sr_return_amt#15))], output=[sr_customer_sk#7, sr_store_sk#11, sum#115L])
         :     :                                +- *(6) Project [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
         :     :                                   +- *(6) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false
         :     :                                      :- *(6) Filter (isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11))
         :     :                                      :  +- *(6) ColumnarToRow
         :     :                                      :     +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_customer_sk#7,sr_store_sk#11,sr_return_amt#15] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#4), isnotnull(sr_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>
         :     :                                      +- BroadcastQueryStage 2
         :     :                                         +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]
         :     +- BroadcastQueryStage 3
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=368]
         :           +- *(3) Project [s_store_sk#52]
         :              +- *(3) Filter ((isnotnull(s_state#76) AND (s_state#76 = TN)) AND isnotnull(s_store_sk#52))
         :                 +- *(3) ColumnarToRow
         :                    +- FileScan parquet default.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_state#76), (s_state#76 = TN), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
         +- BroadcastQueryStage 4
            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=391]
               +- *(4) Filter isnotnull(c_customer_sk#81)
                  +- *(4) ColumnarToRow
                     +- FileScan parquet default.customer[c_customer_sk#81,c_customer_id#82] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

==== q2 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(13) Sort [d_week_seq1#136 ASC NULLS FIRST], true, 0
   +- ShuffleQueryStage 10
      +- Exchange rangepartitioning(d_week_seq1#136 ASC NULLS FIRST, 20), ENSURE_REQUIREMENTS, [plan_id=2010]
         +- *(12) Project [d_week_seq1#136, round(CheckOverflow((promote_precision(sun_sales1#137) / promote_precision(sun_sales2#145)), DecimalType(37,20)), 2) AS round((sun_sales1 / sun_sales2), 2)#296, round(CheckOverflow((promote_precision(mon_sales1#138) / promote_precision(mon_sales2#146)), DecimalType(37,20)), 2) AS round((mon_sales1 / mon_sales2), 2)#297, round(CheckOverflow((promote_precision(tue_sales1#139) / promote_precision(tue_sales2#147)), DecimalType(37,20)), 2) AS round((tue_sales1 / tue_sales2), 2)#298, round(CheckOverflow((promote_precision(wed_sales1#140) / promote_precision(wed_sales2#148)), DecimalType(37,20)), 2) AS round((wed_sales1 / wed_sales2), 2)#299, round(CheckOverflow((promote_precision(thu_sales1#141) / promote_precision(thu_sales2#149)), DecimalType(37,20)), 2) AS round((thu_sales1 / thu_sales2), 2)#300, round(CheckOverflow((promote_precision(fri_sales1#142) / promote_precision(fri_sales2#150)), DecimalType(37,20)), 2) AS round((fri_sales1 / fri_sales2), 2)#301, round(CheckOverflow((promote_precision(sat_sales1#143) / promote_precision(sat_sales2#151)), DecimalType(37,20)), 2) AS round((sat_sales1 / sat_sales2), 2)#302]
            +- *(12) BroadcastHashJoin [d_week_seq1#136], [(d_week_seq2#144 - 53)], Inner, BuildRight, false
               :- *(12) Project [d_week_seq#28 AS d_week_seq1#136, sun_sales#156 AS sun_sales1#137, mon_sales#157 AS mon_sales1#138, tue_sales#158 AS tue_sales1#139, wed_sales#159 AS wed_sales1#140, thu_sales#160 AS thu_sales1#141, fri_sales#161 AS fri_sales1#142, sat_sales#162 AS sat_sales1#143]
               :  +- *(12) BroadcastHashJoin [d_week_seq#28], [d_week_seq#235], Inner, BuildRight, false
               :     :- *(12) HashAggregate(keys=[d_week_seq#28], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN sales_price#153 END))], output=[d_week_seq#28, sun_sales#156, mon_sales#157, tue_sales#158, wed_sales#159, thu_sales#160, fri_sales#161, sat_sales#162])
               :     :  +- ShuffleQueryStage 5
               :     :     +- Exchange hashpartitioning(d_week_seq#28, 20), ENSURE_REQUIREMENTS, [plan_id=1670]
               :     :        +- *(7) HashAggregate(keys=[d_week_seq#28], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN sales_price#153 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN sales_price#153 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN sales_price#153 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN sales_price#153 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN sales_price#153 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN sales_price#153 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN sales_price#153 END))], output=[d_week_seq#28, sum#320L, sum#321L, sum#322L, sum#323L, sum#324L, sum#325L, sum#326L])
               :     :           +- *(7) Project [sales_price#153, d_week_seq#28, d_day_name#38]
               :     :              +- *(7) BroadcastHashJoin [sold_date_sk#152], [d_date_sk#24], Inner, BuildRight, false
               :     :                 :- Union
               :     :                 :  :- *(5) Project [ws_sold_date_sk#163 AS sold_date_sk#152, ws_ext_sales_price#186 AS sales_price#153]
               :     :                 :  :  +- *(5) Filter isnotnull(ws_sold_date_sk#163)
               :     :                 :  :     +- *(5) ColumnarToRow
               :     :                 :  :        +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_ext_sales_price:decimal(7,2)>
               :     :                 :  +- *(6) Project [cs_sold_date_sk#197 AS sold_date_sk#154, cs_ext_sales_price#220 AS sales_price#155]
               :     :                 :     +- *(6) Filter isnotnull(cs_sold_date_sk#197)
               :     :                 :        +- *(6) ColumnarToRow
               :     :                 :           +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_ext_sales_price:decimal(7,2)>
               :     :                 +- BroadcastQueryStage 0
               :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1236]
               :     :                       +- *(1) Filter (isnotnull(d_date_sk#24) AND isnotnull(d_week_seq#28))
               :     :                          +- *(1) ColumnarToRow
               :     :                             +- FileScan parquet default.date_dim[d_date_sk#24,d_week_seq#28,d_day_name#38] Batched: true, DataFilters: [isnotnull(d_date_sk#24), isnotnull(d_week_seq#28)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
               :     +- BroadcastQueryStage 1
               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1258]
               :           +- *(2) Project [d_week_seq#235]
               :              +- *(2) Filter ((isnotnull(d_year#237) AND (d_year#237 = 2001)) AND isnotnull(d_week_seq#235))
               :                 +- *(2) ColumnarToRow
               :                    +- FileScan parquet default.date_dim[d_week_seq#235,d_year#237] Batched: true, DataFilters: [isnotnull(d_year#237), (d_year#237 = 2001), isnotnull(d_week_seq#235)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_week_seq)], ReadSchema: struct<d_week_seq:int,d_year:int>
               +- BroadcastQueryStage 9
                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast((input[0, int, true] - 53) as bigint)),false), [plan_id=1965]
                     +- AQEShuffleRead local
                        +- ShuffleQueryStage 8
                           +- Exchange hashpartitioning((d_week_seq2#144 - 53), 20), ENSURE_REQUIREMENTS, [plan_id=1873]
                              +- *(11) Project [d_week_seq#28 AS d_week_seq2#144, sun_sales#156 AS sun_sales2#145, mon_sales#157 AS mon_sales2#146, tue_sales#158 AS tue_sales2#147, wed_sales#159 AS wed_sales2#148, thu_sales#160 AS thu_sales2#149, fri_sales#161 AS fri_sales2#150, sat_sales#162 AS sat_sales2#151]
                                 +- *(11) BroadcastHashJoin [d_week_seq#28], [d_week_seq#263], Inner, BuildRight, false
                                    :- *(11) HashAggregate(keys=[d_week_seq#28], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN sales_price#153 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN sales_price#153 END))], output=[d_week_seq#28, sun_sales#156, mon_sales#157, tue_sales#158, wed_sales#159, thu_sales#160, fri_sales#161, sat_sales#162])
                                    :  +- ShuffleQueryStage 7
                                    :     +- ReusedExchange [d_week_seq#28, sum#334L, sum#335L, sum#336L, sum#337L, sum#338L, sum#339L, sum#340L], Exchange hashpartitioning(d_week_seq#28, 20), ENSURE_REQUIREMENTS, [plan_id=1670]
                                    +- BroadcastQueryStage 4
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1302]
                                          +- *(4) Project [d_week_seq#263]
                                             +- *(4) Filter ((isnotnull(d_year#265) AND (d_year#265 = 2002)) AND isnotnull(d_week_seq#263))
                                                +- *(4) ColumnarToRow
                                                   +- FileScan parquet default.date_dim[d_week_seq#263,d_year#265] Batched: true, DataFilters: [isnotnull(d_year#265), (d_year#265 = 2002), isnotnull(d_week_seq#263)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_week_seq)], ReadSchema: struct<d_week_seq:int,d_year:int>

==== q3 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[d_year#30 ASC NULLS FIRST,sum_agg#413 DESC NULLS LAST,brand_id#411 ASC NULLS FIRST], output=[d_year#30,brand_id#411,brand#412,sum_agg#413])
   +- *(4) HashAggregate(keys=[d_year#30, i_brand#445, i_brand_id#444], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[d_year#30, brand_id#411, brand#412, sum_agg#413])
      +- ShuffleQueryStage 2
         +- Exchange hashpartitioning(d_year#30, i_brand#445, i_brand_id#444, 20), ENSURE_REQUIREMENTS, [plan_id=2283]
            +- *(3) HashAggregate(keys=[d_year#30, i_brand#445, i_brand_id#444], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[d_year#30, i_brand#445, i_brand_id#444, sum#467L])
               +- *(3) Project [d_year#30, ss_ext_sales_price#429, i_brand_id#444, i_brand#445]
                  +- *(3) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :- *(3) Project [d_year#30, ss_item_sk#416, ss_ext_sales_price#429]
                     :  +- *(3) BroadcastHashJoin [d_date_sk#24], [ss_sold_date_sk#414], Inner, BuildLeft, false
                     :     :- BroadcastQueryStage 0
                     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2141]
                     :     :     +- *(1) Project [d_date_sk#24, d_year#30]
                     :     :        +- *(1) Filter ((isnotnull(d_moy#32) AND (d_moy#32 = 11)) AND isnotnull(d_date_sk#24))
                     :     :           +- *(1) ColumnarToRow
                     :     :              +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), (d_moy#32 = 11), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :     +- *(3) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416))
                     :        +- *(3) ColumnarToRow
                     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
                     +- BroadcastQueryStage 1
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2162]
                           +- *(2) Project [i_item_sk#437, i_brand_id#444, i_brand#445]
                              +- *(2) Filter ((isnotnull(i_manufact_id#450) AND (i_manufact_id#450 = 128)) AND isnotnull(i_item_sk#437))
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_brand#445,i_manufact_id#450] Batched: true, DataFilters: [isnotnull(i_manufact_id#450), (i_manufact_id#450 = 128), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,128), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int>

==== q4 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_id#600 ASC NULLS FIRST,customer_first_name#601 ASC NULLS FIRST,customer_last_name#602 ASC NULLS FIRST,customer_preferred_cust_flag#603 ASC NULLS FIRST,customer_birth_country#604 ASC NULLS FIRST,customer_login#605 ASC NULLS FIRST,customer_email_address#606 ASC NULLS FIRST], output=[customer_id#600,customer_first_name#601,customer_last_name#602,customer_preferred_cust_flag#603,customer_birth_country#604,customer_login#605,customer_email_address#606])
   +- *(42) Project [customer_id#600, customer_first_name#601, customer_last_name#602, customer_preferred_cust_flag#603, customer_birth_country#604, customer_login#605, customer_email_address#606]
      +- *(42) BroadcastHashJoin [customer_id#471], [customer_id#640], Inner, BuildRight, (CASE WHEN (year_total#489 > 0.000000) THEN CheckOverflow((promote_precision(year_total#628) / promote_precision(year_total#489)), DecimalType(38,14)) END > CASE WHEN (year_total#499 > 0.000000) THEN CheckOverflow((promote_precision(year_total#648) / promote_precision(year_total#499)), DecimalType(38,14)) END), false
         :- *(42) Project [customer_id#471, customer_id#600, customer_first_name#601, customer_last_name#602, customer_preferred_cust_flag#603, customer_birth_country#604, customer_login#605, customer_email_address#606, year_total#489, year_total#628, year_total#499]
         :  +- *(42) BroadcastHashJoin [customer_id#471], [customer_id#491], Inner, BuildRight, false
         :     :- *(42) Project [customer_id#471, customer_id#600, customer_first_name#601, customer_last_name#602, customer_preferred_cust_flag#603, customer_birth_country#604, customer_login#605, customer_email_address#606, year_total#489, year_total#628]
         :     :  +- *(42) BroadcastHashJoin [customer_id#471], [customer_id#620], Inner, BuildRight, (CASE WHEN (year_total#489 > 0.000000) THEN CheckOverflow((promote_precision(year_total#628) / promote_precision(year_total#489)), DecimalType(38,14)) END > CASE WHEN (year_total#479 > 0.000000) THEN CheckOverflow((promote_precision(year_total#608) / promote_precision(year_total#479)), DecimalType(38,14)) END), false
         :     :     :- *(42) Project [customer_id#471, year_total#479, customer_id#600, customer_first_name#601, customer_last_name#602, customer_preferred_cust_flag#603, customer_birth_country#604, customer_login#605, customer_email_address#606, year_total#608, year_total#489]
         :     :     :  +- *(42) BroadcastHashJoin [customer_id#471], [customer_id#481], Inner, BuildRight, false
         :     :     :     :- *(42) BroadcastHashJoin [customer_id#471], [customer_id#600], Inner, BuildLeft, false
         :     :     :     :  :- BroadcastQueryStage 36
         :     :     :     :  :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5676]
         :     :     :     :  :     +- *(37) Filter (isnotnull(year_total#479) AND (year_total#479 > 0.000000))
         :     :     :     :  :        +- *(37) HashAggregate(keys=[c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, d_year#30], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#431 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#430 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#428 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#429 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[customer_id#471, year_total#479])
         :     :     :     :  :           +- ShuffleQueryStage 30
         :     :     :     :  :              +- Exchange hashpartitioning(c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, d_year#30, 20), ENSURE_REQUIREMENTS, [plan_id=4936]
         :     :     :     :  :                 +- *(21) HashAggregate(keys=[c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, d_year#30], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#431 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#430 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#428 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#429 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, d_year#30, sum#3149, isEmpty#3150])
         :     :     :     :  :                    +- *(21) Project [c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, ss_ext_discount_amt#428, ss_ext_sales_price#429, ss_ext_wholesale_cost#430, ss_ext_list_price#431, d_year#30]
         :     :     :     :  :                       +- *(21) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :     :     :     :  :                          :- *(21) Project [c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, ss_sold_date_sk#414, ss_ext_discount_amt#428, ss_ext_sales_price#429, ss_ext_wholesale_cost#430, ss_ext_list_price#431]
         :     :     :     :  :                          :  +- *(21) SortMergeJoin [c_customer_sk#81], [ss_customer_sk#417], Inner
         :     :     :     :  :                          :     :- *(19) Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0
         :     :     :     :  :                          :     :  +- ShuffleQueryStage 0
         :     :     :     :  :                          :     :     +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=2863]
         :     :     :     :  :                          :     :        +- *(1) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_customer_id#82))
         :     :     :     :  :                          :     :           +- *(1) ColumnarToRow
         :     :     :     :  :                          :     :              +- FileScan parquet default.customer[c_customer_sk#81,c_customer_id#82,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_country#95,c_login#96,c_email_address#97] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_customer_id#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :     :  :                          :     +- *(20) Sort [ss_customer_sk#417 ASC NULLS FIRST], false, 0
         :     :     :     :  :                          :        +- ShuffleQueryStage 1
         :     :     :     :  :                          :           +- Exchange hashpartitioning(ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=2880]
         :     :     :     :  :                          :              +- *(2) Filter (isnotnull(ss_customer_sk#417) AND isnotnull(ss_sold_date_sk#414))
         :     :     :     :  :                          :                 +- *(2) ColumnarToRow
         :     :     :     :  :                          :                    +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417,ss_ext_discount_amt#428,ss_ext_sales_price#429,ss_ext_wholesale_cost#430,ss_ext_list_price#431] Batched: true, DataFilters: [isnotnull(ss_customer_sk#417), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price...
         :     :     :     :  :                          +- BroadcastQueryStage 2
         :     :     :     :  :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2899]
         :     :     :     :  :                                +- *(3) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
         :     :     :     :  :                                   +- *(3) ColumnarToRow
         :     :     :     :  :                                      +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     :  +- *(42) HashAggregate(keys=[c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868, d_year#1899], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1887 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1886 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1884 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1885 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[customer_id#600, customer_first_name#601, customer_last_name#602, customer_preferred_cust_flag#603, customer_birth_country#604, customer_login#605, customer_email_address#606, year_total#608])
         :     :     :     :     +- ShuffleQueryStage 31
         :     :     :     :        +- Exchange hashpartitioning(c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868, d_year#1899, 20), ENSURE_REQUIREMENTS, [plan_id=4981]
         :     :     :     :           +- *(24) HashAggregate(keys=[c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868, d_year#1899], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#1887 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#1886 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#1884 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#1885 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868, d_year#1899, sum#3153, isEmpty#3154])
         :     :     :     :              +- *(24) Project [c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868, ss_ext_discount_amt#1884, ss_ext_sales_price#1885, ss_ext_wholesale_cost#1886, ss_ext_list_price#1887, d_year#1899]
         :     :     :     :                 +- *(24) BroadcastHashJoin [ss_sold_date_sk#1870], [d_date_sk#1893], Inner, BuildRight, false
         :     :     :     :                    :- *(24) Project [c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868, ss_sold_date_sk#1870, ss_ext_discount_amt#1884, ss_ext_sales_price#1885, ss_ext_wholesale_cost#1886, ss_ext_list_price#1887]
         :     :     :     :                    :  +- *(24) SortMergeJoin [c_customer_sk#1852], [ss_customer_sk#1873], Inner
         :     :     :     :                    :     :- *(22) Sort [c_customer_sk#1852 ASC NULLS FIRST], false, 0
         :     :     :     :                    :     :  +- ShuffleQueryStage 4
         :     :     :     :                    :     :     +- ReusedExchange [c_customer_sk#1852, c_customer_id#1853, c_first_name#1860, c_last_name#1861, c_preferred_cust_flag#1862, c_birth_country#1866, c_login#1867, c_email_address#1868], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=2863]
         :     :     :     :                    :     +- *(23) Sort [ss_customer_sk#1873 ASC NULLS FIRST], false, 0
         :     :     :     :                    :        +- ShuffleQueryStage 6
         :     :     :     :                    :           +- ReusedExchange [ss_sold_date_sk#1870, ss_customer_sk#1873, ss_ext_discount_amt#1884, ss_ext_sales_price#1885, ss_ext_wholesale_cost#1886, ss_ext_list_price#1887], Exchange hashpartitioning(ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=2880]
         :     :     :     :                    +- BroadcastQueryStage 7
         :     :     :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2996]
         :     :     :     :                          +- *(6) Filter ((isnotnull(d_year#1899) AND (d_year#1899 = 2002)) AND isnotnull(d_date_sk#1893))
         :     :     :     :                             +- *(6) ColumnarToRow
         :     :     :     :                                +- FileScan parquet default.date_dim[d_date_sk#1893,d_year#1899] Batched: true, DataFilters: [isnotnull(d_year#1899), (d_year#1899 = 2002), isnotnull(d_date_sk#1893)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :     +- BroadcastQueryStage 37
         :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5874]
         :     :     :           +- *(38) Filter (isnotnull(year_total#489) AND (year_total#489 > 0.000000))
         :     :     :              +- *(38) HashAggregate(keys=[c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176, d_year#2218], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#2203 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#2202 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#2200 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#2201 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[customer_id#481, year_total#489])
         :     :     :                 +- ShuffleQueryStage 32
         :     :     :                    +- Exchange hashpartitioning(c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176, d_year#2218, 20), ENSURE_REQUIREMENTS, [plan_id=5255]
         :     :     :                       +- *(27) HashAggregate(keys=[c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176, d_year#2218], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#2203 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#2202 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#2200 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#2201 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176, d_year#2218, sum#3157, isEmpty#3158])
         :     :     :                          +- *(27) Project [c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176, cs_ext_discount_amt#2200, cs_ext_sales_price#2201, cs_ext_wholesale_cost#2202, cs_ext_list_price#2203, d_year#2218]
         :     :     :                             +- *(27) BroadcastHashJoin [cs_sold_date_sk#2178], [d_date_sk#2212], Inner, BuildRight, false
         :     :     :                                :- *(27) Project [c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176, cs_sold_date_sk#2178, cs_ext_discount_amt#2200, cs_ext_sales_price#2201, cs_ext_wholesale_cost#2202, cs_ext_list_price#2203]
         :     :     :                                :  +- *(27) SortMergeJoin [c_customer_sk#2160], [cs_bill_customer_sk#2181], Inner
         :     :     :                                :     :- *(25) Sort [c_customer_sk#2160 ASC NULLS FIRST], false, 0
         :     :     :                                :     :  +- ShuffleQueryStage 9
         :     :     :                                :     :     +- ReusedExchange [c_customer_sk#2160, c_customer_id#2161, c_first_name#2168, c_last_name#2169, c_preferred_cust_flag#2170, c_birth_country#2174, c_login#2175, c_email_address#2176], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=2863]
         :     :     :                                :     +- *(26) Sort [cs_bill_customer_sk#2181 ASC NULLS FIRST], false, 0
         :     :     :                                :        +- ShuffleQueryStage 10
         :     :     :                                :           +- Exchange hashpartitioning(cs_bill_customer_sk#2181, 20), ENSURE_REQUIREMENTS, [plan_id=3074]
         :     :     :                                :              +- *(8) Filter (isnotnull(cs_bill_customer_sk#2181) AND isnotnull(cs_sold_date_sk#2178))
         :     :     :                                :                 +- *(8) ColumnarToRow
         :     :     :                                :                    +- FileScan parquet default.catalog_sales[cs_sold_date_sk#2178,cs_bill_customer_sk#2181,cs_ext_discount_amt#2200,cs_ext_sales_price#2201,cs_ext_wholesale_cost#2202,cs_ext_list_price#2203] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#2181), isnotnull(cs_sold_date_sk#2178)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_...
         :     :     :                                +- BroadcastQueryStage 12
         :     :     :                                   +- ReusedExchange [d_date_sk#2212, d_year#2218], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2899]
         :     :     +- BroadcastQueryStage 38
         :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5979]
         :     :           +- *(39) HashAggregate(keys=[c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415, d_year#2457], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#2442 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#2441 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#2439 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#2440 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[customer_id#620, year_total#628])
         :     :              +- ShuffleQueryStage 33
         :     :                 +- Exchange hashpartitioning(c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415, d_year#2457, 20), ENSURE_REQUIREMENTS, [plan_id=5302]
         :     :                    +- *(30) HashAggregate(keys=[c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415, d_year#2457], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#2442 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#2441 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#2439 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#2440 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415, d_year#2457, sum#3161, isEmpty#3162])
         :     :                       +- *(30) Project [c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415, cs_ext_discount_amt#2439, cs_ext_sales_price#2440, cs_ext_wholesale_cost#2441, cs_ext_list_price#2442, d_year#2457]
         :     :                          +- *(30) BroadcastHashJoin [cs_sold_date_sk#2417], [d_date_sk#2451], Inner, BuildRight, false
         :     :                             :- *(30) Project [c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415, cs_sold_date_sk#2417, cs_ext_discount_amt#2439, cs_ext_sales_price#2440, cs_ext_wholesale_cost#2441, cs_ext_list_price#2442]
         :     :                             :  +- *(30) SortMergeJoin [c_customer_sk#2399], [cs_bill_customer_sk#2420], Inner
         :     :                             :     :- *(28) Sort [c_customer_sk#2399 ASC NULLS FIRST], false, 0
         :     :                             :     :  +- ShuffleQueryStage 14
         :     :                             :     :     +- ReusedExchange [c_customer_sk#2399, c_customer_id#2400, c_first_name#2407, c_last_name#2408, c_preferred_cust_flag#2409, c_birth_country#2413, c_login#2414, c_email_address#2415], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=2863]
         :     :                             :     +- *(29) Sort [cs_bill_customer_sk#2420 ASC NULLS FIRST], false, 0
         :     :                             :        +- ShuffleQueryStage 16
         :     :                             :           +- ReusedExchange [cs_sold_date_sk#2417, cs_bill_customer_sk#2420, cs_ext_discount_amt#2439, cs_ext_sales_price#2440, cs_ext_wholesale_cost#2441, cs_ext_list_price#2442], Exchange hashpartitioning(cs_bill_customer_sk#2181, 20), ENSURE_REQUIREMENTS, [plan_id=3074]
         :     :                             +- BroadcastQueryStage 18
         :     :                                +- ReusedExchange [d_date_sk#2451, d_year#2457], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2996]
         :     +- BroadcastQueryStage 39
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=6079]
         :           +- *(40) Filter (isnotnull(year_total#499) AND (year_total#499 > 0.000000))
         :              +- *(40) HashAggregate(keys=[c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734, d_year#2776], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2761 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2760 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2758 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2759 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[customer_id#491, year_total#499])
         :                 +- ShuffleQueryStage 34
         :                    +- Exchange hashpartitioning(c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734, d_year#2776, 20), ENSURE_REQUIREMENTS, [plan_id=5508]
         :                       +- *(33) HashAggregate(keys=[c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734, d_year#2776], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#2761 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2760 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2758 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2759 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734, d_year#2776, sum#3165, isEmpty#3166])
         :                          +- *(33) Project [c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734, ws_ext_discount_amt#2758, ws_ext_sales_price#2759, ws_ext_wholesale_cost#2760, ws_ext_list_price#2761, d_year#2776]
         :                             +- *(33) BroadcastHashJoin [ws_sold_date_sk#2736], [d_date_sk#2770], Inner, BuildRight, false
         :                                :- *(33) Project [c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734, ws_sold_date_sk#2736, ws_ext_discount_amt#2758, ws_ext_sales_price#2759, ws_ext_wholesale_cost#2760, ws_ext_list_price#2761]
         :                                :  +- *(33) SortMergeJoin [c_customer_sk#2718], [ws_bill_customer_sk#2740], Inner
         :                                :     :- *(31) Sort [c_customer_sk#2718 ASC NULLS FIRST], false, 0
         :                                :     :  +- ShuffleQueryStage 20
         :                                :     :     +- ReusedExchange [c_customer_sk#2718, c_customer_id#2719, c_first_name#2726, c_last_name#2727, c_preferred_cust_flag#2728, c_birth_country#2732, c_login#2733, c_email_address#2734], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=2863]
         :                                :     +- *(32) Sort [ws_bill_customer_sk#2740 ASC NULLS FIRST], false, 0
         :                                :        +- ShuffleQueryStage 21
         :                                :           +- Exchange hashpartitioning(ws_bill_customer_sk#2740, 20), ENSURE_REQUIREMENTS, [plan_id=3275]
         :                                :              +- *(14) Filter (isnotnull(ws_bill_customer_sk#2740) AND isnotnull(ws_sold_date_sk#2736))
         :                                :                 +- *(14) ColumnarToRow
         :                                :                    +- FileScan parquet default.web_sales[ws_sold_date_sk#2736,ws_bill_customer_sk#2740,ws_ext_discount_amt#2758,ws_ext_sales_price#2759,ws_ext_wholesale_cost#2760,ws_ext_list_price#2761] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2740), isnotnull(ws_sold_date_sk#2736)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_...
         :                                +- BroadcastQueryStage 23
         :                                   +- ReusedExchange [d_date_sk#2770, d_year#2776], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2899]
         +- BroadcastQueryStage 40
            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=6145]
               +- *(41) HashAggregate(keys=[c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973, d_year#3015], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#3000 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2999 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2997 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2998 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[customer_id#640, year_total#648])
                  +- ShuffleQueryStage 35
                     +- Exchange hashpartitioning(c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973, d_year#3015, 20), ENSURE_REQUIREMENTS, [plan_id=5555]
                        +- *(36) HashAggregate(keys=[c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973, d_year#3015], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#3000 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#2999 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#2997 as decimal(9,2)))), DecimalType(9,2)) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#2998 as decimal(10,2)))), DecimalType(10,2))) / 2.00), DecimalType(14,6)))], output=[c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973, d_year#3015, sum#3169, isEmpty#3170])
                           +- *(36) Project [c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973, ws_ext_discount_amt#2997, ws_ext_sales_price#2998, ws_ext_wholesale_cost#2999, ws_ext_list_price#3000, d_year#3015]
                              +- *(36) BroadcastHashJoin [ws_sold_date_sk#2975], [d_date_sk#3009], Inner, BuildRight, false
                                 :- *(36) Project [c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973, ws_sold_date_sk#2975, ws_ext_discount_amt#2997, ws_ext_sales_price#2998, ws_ext_wholesale_cost#2999, ws_ext_list_price#3000]
                                 :  +- *(36) SortMergeJoin [c_customer_sk#2957], [ws_bill_customer_sk#2979], Inner
                                 :     :- *(34) Sort [c_customer_sk#2957 ASC NULLS FIRST], false, 0
                                 :     :  +- ShuffleQueryStage 25
                                 :     :     +- ReusedExchange [c_customer_sk#2957, c_customer_id#2958, c_first_name#2965, c_last_name#2966, c_preferred_cust_flag#2967, c_birth_country#2971, c_login#2972, c_email_address#2973], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=2863]
                                 :     +- *(35) Sort [ws_bill_customer_sk#2979 ASC NULLS FIRST], false, 0
                                 :        +- ShuffleQueryStage 27
                                 :           +- ReusedExchange [ws_sold_date_sk#2975, ws_bill_customer_sk#2979, ws_ext_discount_amt#2997, ws_ext_sales_price#2998, ws_ext_wholesale_cost#2999, ws_ext_list_price#3000], Exchange hashpartitioning(ws_bill_customer_sk#2740, 20), ENSURE_REQUIREMENTS, [plan_id=3275]
                                 +- BroadcastQueryStage 29
                                    +- ReusedExchange [d_date_sk#3009, d_year#3015], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2996]

==== q5 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#3492 ASC NULLS FIRST,id#3493 ASC NULLS FIRST], output=[channel#3492,id#3493,sales#3240,returns#3241,profit#3242])
   +- *(24) HashAggregate(keys=[channel#3492, id#3493, spark_grouping_id#3491L], functions=[sum(sales#3255), sum(returns#3257), sum(profit#3233)], output=[channel#3492, id#3493, sales#3240, returns#3241, profit#3242])
      +- ShuffleQueryStage 13
         +- Exchange hashpartitioning(channel#3492, id#3493, spark_grouping_id#3491L, 20), ENSURE_REQUIREMENTS, [plan_id=8201]
            +- *(23) HashAggregate(keys=[channel#3492, id#3493, spark_grouping_id#3491L], functions=[partial_sum(sales#3255), partial_sum(returns#3257), partial_sum(profit#3233)], output=[channel#3492, id#3493, spark_grouping_id#3491L, sum#3509, isEmpty#3510, sum#3511, isEmpty#3512, sum#3513, isEmpty#3514])
               +- *(23) Expand [[sales#3255, returns#3257, profit#3233, channel#3489, id#3490, 0], [sales#3255, returns#3257, profit#3233, channel#3489, null, 1], [sales#3255, returns#3257, profit#3233, null, null, 3]], [sales#3255, returns#3257, profit#3233, channel#3492, id#3493, spark_grouping_id#3491L]
                  +- Union
                     :- *(20) HashAggregate(keys=[s_store_id#53], functions=[sum(UnscaledValue(sales_price#3245)), sum(UnscaledValue(return_amt#3247)), sum(UnscaledValue(profit#3246)), sum(UnscaledValue(net_loss#3248))], output=[sales#3255, returns#3257, profit#3233, channel#3489, id#3490])
                     :  +- ShuffleQueryStage 10
                     :     +- Exchange hashpartitioning(s_store_id#53, 20), ENSURE_REQUIREMENTS, [plan_id=7761]
                     :        +- *(11) HashAggregate(keys=[s_store_id#53], functions=[partial_sum(UnscaledValue(sales_price#3245)), partial_sum(UnscaledValue(return_amt#3247)), partial_sum(UnscaledValue(profit#3246)), partial_sum(UnscaledValue(net_loss#3248))], output=[s_store_id#53, sum#3519L, sum#3520L, sum#3521L, sum#3522L])
                     :           +- *(11) Project [sales_price#3245, profit#3246, return_amt#3247, net_loss#3248, s_store_id#53]
                     :              +- *(11) BroadcastHashJoin [store_sk#3243], [s_store_sk#52], Inner, BuildRight, false
                     :                 :- *(11) Project [store_sk#3243, sales_price#3245, profit#3246, return_amt#3247, net_loss#3248]
                     :                 :  +- *(11) BroadcastHashJoin [date_sk#3244], [d_date_sk#24], Inner, BuildRight, false
                     :                 :     :- Union
                     :                 :     :  :- *(9) Project [ss_store_sk#421 AS store_sk#3243, ss_sold_date_sk#414 AS date_sk#3244, ss_ext_sales_price#429 AS sales_price#3245, ss_net_profit#436 AS profit#3246, 0.00 AS return_amt#3247, 0.00 AS net_loss#3248]
                     :                 :     :  :  +- *(9) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
                     :                 :     :  :     +- *(9) ColumnarToRow
                     :                 :     :  :        +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_store_sk#421,ss_ext_sales_price#429,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(...
                     :                 :     :  +- *(10) Project [sr_store_sk#11 AS store_sk#3249, sr_returned_date_sk#4 AS date_sk#3250, 0.00 AS sales_price#3251, 0.00 AS profit#3252, sr_return_amt#15 AS return_amt#3253, sr_net_loss#23 AS net_loss#3254]
                     :                 :     :     +- *(10) Filter (isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11))
                     :                 :     :        +- *(10) ColumnarToRow
                     :                 :     :           +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_store_sk#11,sr_return_amt#15,sr_net_loss#23] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#4), isnotnull(sr_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>
                     :                 :     +- BroadcastQueryStage 0
                     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6789]
                     :                 :           +- *(1) Project [d_date_sk#24]
                     :                 :              +- *(1) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-08-23)) AND (d_date#26 <= 2000-09-06)) AND isnotnull(d_date_sk#24))
                     :                 :                 +- *(1) ColumnarToRow
                     :                 :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-08-23), (d_date#26 <= 2000-09-06), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-06), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                     :                 +- BroadcastQueryStage 1
                     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6808]
                     :                       +- *(2) Filter isnotnull(s_store_sk#52)
                     :                          +- *(2) ColumnarToRow
                     :                             +- FileScan parquet default.store[s_store_sk#52,s_store_id#53] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                     :- *(21) HashAggregate(keys=[cp_catalog_page_id#3319], functions=[sum(UnscaledValue(sales_price#3261)), sum(UnscaledValue(return_amt#3263)), sum(UnscaledValue(profit#3262)), sum(UnscaledValue(net_loss#3264))], output=[sales#3271, returns#3273, profit#3236, channel#3499, id#3500])
                     :  +- ShuffleQueryStage 11
                     :     +- Exchange hashpartitioning(cp_catalog_page_id#3319, 20), ENSURE_REQUIREMENTS, [plan_id=7828]
                     :        +- *(14) HashAggregate(keys=[cp_catalog_page_id#3319], functions=[partial_sum(UnscaledValue(sales_price#3261)), partial_sum(UnscaledValue(return_amt#3263)), partial_sum(UnscaledValue(profit#3262)), partial_sum(UnscaledValue(net_loss#3264))], output=[cp_catalog_page_id#3319, sum#3527L, sum#3528L, sum#3529L, sum#3530L])
                     :           +- *(14) Project [sales_price#3261, profit#3262, return_amt#3263, net_loss#3264, cp_catalog_page_id#3319]
                     :              +- *(14) BroadcastHashJoin [page_sk#3259], [cp_catalog_page_sk#3318], Inner, BuildRight, false
                     :                 :- *(14) Project [page_sk#3259, sales_price#3261, profit#3262, return_amt#3263, net_loss#3264]
                     :                 :  +- *(14) BroadcastHashJoin [date_sk#3260], [d_date_sk#3377], Inner, BuildRight, false
                     :                 :     :- Union
                     :                 :     :  :- *(12) Project [cs_catalog_page_sk#209 AS page_sk#3259, cs_sold_date_sk#197 AS date_sk#3260, cs_ext_sales_price#220 AS sales_price#3261, cs_net_profit#230 AS profit#3262, 0.00 AS return_amt#3263, 0.00 AS net_loss#3264]
                     :                 :     :  :  +- *(12) Filter (isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_catalog_page_sk#209))
                     :                 :     :  :     +- *(12) ColumnarToRow
                     :                 :     :  :        +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_catalog_page_sk#209,cs_ext_sales_price#220,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_catalog_page_sk#209)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:d...
                     :                 :     :  +- *(13) Project [cr_catalog_page_sk#3303 AS page_sk#3265, cr_returned_date_sk#3291 AS date_sk#3266, 0.00 AS sales_price#3267, 0.00 AS profit#3268, cr_return_amount#3309 AS return_amt#3269, cr_net_loss#3317 AS net_loss#3270]
                     :                 :     :     +- *(13) Filter (isnotnull(cr_returned_date_sk#3291) AND isnotnull(cr_catalog_page_sk#3303))
                     :                 :     :        +- *(13) ColumnarToRow
                     :                 :     :           +- FileScan parquet default.catalog_returns[cr_returned_date_sk#3291,cr_catalog_page_sk#3303,cr_return_amount#3309,cr_net_loss#3317] Batched: true, DataFilters: [isnotnull(cr_returned_date_sk#3291), isnotnull(cr_catalog_page_sk#3303)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_catalog_page_sk)], ReadSchema: struct<cr_returned_date_sk:int,cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:d...
                     :                 :     +- BroadcastQueryStage 3
                     :                 :        +- ReusedExchange [d_date_sk#3377], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6789]
                     :                 +- BroadcastQueryStage 4
                     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6851]
                     :                       +- *(4) Filter isnotnull(cp_catalog_page_sk#3318)
                     :                          +- *(4) ColumnarToRow
                     :                             +- FileScan parquet default.catalog_page[cp_catalog_page_sk#3318,cp_catalog_page_id#3319] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#3318)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_page], PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>
                     +- *(22) HashAggregate(keys=[web_site_id#3352], functions=[sum(UnscaledValue(sales_price#3277)), sum(UnscaledValue(return_amt#3279)), sum(UnscaledValue(profit#3278)), sum(UnscaledValue(net_loss#3280))], output=[sales#3287, returns#3289, profit#3239, channel#3501, id#3502])
                        +- ShuffleQueryStage 12
                           +- Exchange hashpartitioning(web_site_id#3352, 20), ENSURE_REQUIREMENTS, [plan_id=8067]
                              +- *(19) HashAggregate(keys=[web_site_id#3352], functions=[partial_sum(UnscaledValue(sales_price#3277)), partial_sum(UnscaledValue(return_amt#3279)), partial_sum(UnscaledValue(profit#3278)), partial_sum(UnscaledValue(net_loss#3280))], output=[web_site_id#3352, sum#3535L, sum#3536L, sum#3537L, sum#3538L])
                                 +- *(19) Project [sales_price#3277, profit#3278, return_amt#3279, net_loss#3280, web_site_id#3352]
                                    +- *(19) BroadcastHashJoin [wsr_web_site_sk#3275], [web_site_sk#3351], Inner, BuildRight, false
                                       :- *(19) Project [wsr_web_site_sk#3275, sales_price#3277, profit#3278, return_amt#3279, net_loss#3280]
                                       :  +- *(19) BroadcastHashJoin [date_sk#3276], [d_date_sk#3439], Inner, BuildRight, false
                                       :     :- Union
                                       :     :  :- *(15) Project [ws_web_site_sk#176 AS wsr_web_site_sk#3275, ws_sold_date_sk#163 AS date_sk#3276, ws_ext_sales_price#186 AS sales_price#3277, ws_net_profit#196 AS profit#3278, 0.00 AS return_amt#3279, 0.00 AS net_loss#3280]
                                       :     :  :  +- *(15) Filter (isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_web_site_sk#176))
                                       :     :  :     +- *(15) ColumnarToRow
                                       :     :  :        +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_web_site_sk#176,ws_ext_sales_price#186,ws_net_profit#196] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_web_site_sk#176)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decim...
                                       :     :  +- *(18) Project [ws_web_site_sk#3418 AS wsr_web_site_sk#3281, wr_returned_date_sk#3327 AS date_sk#3282, 0.00 AS sales_price#3283, 0.00 AS profit#3284, wr_return_amt#3342 AS return_amt#3285, wr_net_loss#3350 AS net_loss#3286]
                                       :     :     +- *(18) SortMergeJoin [wr_item_sk#3329, wr_order_number#3340], [ws_item_sk#3408, ws_order_number#3422], Inner
                                       :     :        :- *(16) Sort [wr_item_sk#3329 ASC NULLS FIRST, wr_order_number#3340 ASC NULLS FIRST], false, 0
                                       :     :        :  +- ShuffleQueryStage 5
                                       :     :        :     +- Exchange hashpartitioning(wr_item_sk#3329, wr_order_number#3340, 20), ENSURE_REQUIREMENTS, [plan_id=6871]
                                       :     :        :        +- *(5) Filter isnotnull(wr_returned_date_sk#3327)
                                       :     :        :           +- *(5) ColumnarToRow
                                       :     :        :              +- FileScan parquet default.web_returns[wr_returned_date_sk#3327,wr_item_sk#3329,wr_order_number#3340,wr_return_amt#3342,wr_net_loss#3350] Batched: true, DataFilters: [isnotnull(wr_returned_date_sk#3327)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_returned_date_sk)], ReadSchema: struct<wr_returned_date_sk:int,wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_n...
                                       :     :        +- *(17) Sort [ws_item_sk#3408 ASC NULLS FIRST, ws_order_number#3422 ASC NULLS FIRST], false, 0
                                       :     :           +- ShuffleQueryStage 6
                                       :     :              +- Exchange hashpartitioning(ws_item_sk#3408, ws_order_number#3422, 20), ENSURE_REQUIREMENTS, [plan_id=6888]
                                       :     :                 +- *(6) Filter ((isnotnull(ws_item_sk#3408) AND isnotnull(ws_order_number#3422)) AND isnotnull(ws_web_site_sk#3418))
                                       :     :                    +- *(6) ColumnarToRow
                                       :     :                       +- FileScan parquet default.web_sales[ws_item_sk#3408,ws_web_site_sk#3418,ws_order_number#3422] Batched: true, DataFilters: [isnotnull(ws_item_sk#3408), isnotnull(ws_order_number#3422), isnotnull(ws_web_site_sk#3418)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>
                                       :     +- BroadcastQueryStage 8
                                       :        +- ReusedExchange [d_date_sk#3439], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6789]
                                       +- BroadcastQueryStage 9
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6931]
                                             +- *(8) Filter isnotnull(web_site_sk#3351)
                                                +- *(8) ColumnarToRow
                                                   +- FileScan parquet default.web_site[web_site_sk#3351,web_site_id#3352] Batched: true, DataFilters: [isnotnull(web_site_sk#3351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>

==== q7 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#438 ASC NULLS FIRST], output=[i_item_id#438,agg1#3629,agg2#3630,agg3#3631,agg4#3632])
   +- *(6) HashAggregate(keys=[i_item_id#438], functions=[avg(ss_quantity#424), avg(UnscaledValue(ss_list_price#426)), avg(UnscaledValue(ss_coupon_amt#433)), avg(UnscaledValue(ss_sales_price#427))], output=[i_item_id#438, agg1#3629, agg2#3630, agg3#3631, agg4#3632])
      +- ShuffleQueryStage 4
         +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=8752]
            +- *(5) HashAggregate(keys=[i_item_id#438], functions=[partial_avg(ss_quantity#424), partial_avg(UnscaledValue(ss_list_price#426)), partial_avg(UnscaledValue(ss_coupon_amt#433)), partial_avg(UnscaledValue(ss_sales_price#427))], output=[i_item_id#438, sum#3680, count#3681L, sum#3682, count#3683L, sum#3684, count#3685L, sum#3686, count#3687L])
               +- *(5) Project [ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, i_item_id#438]
                  +- *(5) BroadcastHashJoin [ss_promo_sk#422], [p_promo_sk#3642], Inner, BuildRight, false
                     :- *(5) Project [ss_promo_sk#422, ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, i_item_id#438]
                     :  +- *(5) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :     :- *(5) Project [ss_item_sk#416, ss_promo_sk#422, ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433]
                     :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                     :     :     :- *(5) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_promo_sk#422, ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433]
                     :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#418], [cd_demo_sk#3633], Inner, BuildRight, false
                     :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#418) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_promo_sk#422))
                     :     :     :     :  +- *(5) ColumnarToRow
                     :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_cdemo_sk#418,ss_promo_sk#422,ss_quantity#424,ss_list_price#426,ss_sales_price#427,ss_coupon_amt#433] Batched: true, DataFilters: [isnotnull(ss_cdemo_sk#418), isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_promo_sk:int,ss_quantity:int,ss_list...
                     :     :     :     +- BroadcastQueryStage 0
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8400]
                     :     :     :           +- *(1) Project [cd_demo_sk#3633]
                     :     :     :              +- *(1) Filter ((((((isnotnull(cd_gender#3634) AND isnotnull(cd_marital_status#3635)) AND isnotnull(cd_education_status#3636)) AND (cd_gender#3634 = M)) AND (cd_marital_status#3635 = S)) AND (cd_education_status#3636 = College             )) AND isnotnull(cd_demo_sk#3633))
                     :     :     :                 +- *(1) ColumnarToRow
                     :     :     :                    +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_gender#3634,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [isnotnull(cd_gender#3634), isnotnull(cd_marital_status#3635), isnotnull(cd_education_status#3636..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                     :     :     +- BroadcastQueryStage 1
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8421]
                     :     :           +- *(2) Project [d_date_sk#24]
                     :     :              +- *(2) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
                     :     :                 +- *(2) ColumnarToRow
                     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :     +- BroadcastQueryStage 2
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8440]
                     :           +- *(3) Filter isnotnull(i_item_sk#437)
                     :              +- *(3) ColumnarToRow
                     :                 +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                     +- BroadcastQueryStage 3
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8459]
                           +- *(4) Project [p_promo_sk#3642]
                              +- *(4) Filter (((p_channel_email#3651 = N) OR (p_channel_event#3656 = N)) AND isnotnull(p_promo_sk#3642))
                                 +- *(4) ColumnarToRow
                                    +- FileScan parquet default.promotion[p_promo_sk#3642,p_channel_email#3651,p_channel_event#3656] Batched: true, DataFilters: [((p_channel_email#3651 = N) OR (p_channel_event#3656 = N)), isnotnull(p_promo_sk#3642)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/promotion], PartitionFilters: [], PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>

==== q8 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#57 ASC NULLS FIRST], output=[s_store_name#57,sum(ss_net_profit)#3746])
   +- *(13) HashAggregate(keys=[s_store_name#57], functions=[sum(UnscaledValue(ss_net_profit#436))], output=[s_store_name#57, sum(ss_net_profit)#3746])
      +- ShuffleQueryStage 9
         +- Exchange hashpartitioning(s_store_name#57, 20), ENSURE_REQUIREMENTS, [plan_id=10223]
            +- *(12) HashAggregate(keys=[s_store_name#57], functions=[partial_sum(UnscaledValue(ss_net_profit#436))], output=[s_store_name#57, sum#3750L])
               +- *(12) Project [ss_net_profit#436, s_store_name#57]
                  +- *(12) BroadcastHashJoin [substr(s_zip#77, 1, 2)], [substr(ca_zip#3712, 1, 2)], Inner, BuildRight, false
                     :- *(12) Project [ss_net_profit#436, s_store_name#57, s_zip#77]
                     :  +- *(12) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                     :     :- *(12) Project [ss_store_sk#421, ss_net_profit#436]
                     :     :  +- *(12) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                     :     :     :- *(12) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
                     :     :     :  +- *(12) ColumnarToRow
                     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_store_sk#421,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                     :     :     +- BroadcastQueryStage 0
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9060]
                     :     :           +- *(1) Project [d_date_sk#24]
                     :     :              +- *(1) Filter ((((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND (d_qoy#34 = 2)) AND (d_year#30 = 1998)) AND isnotnull(d_date_sk#24))
                     :     :                 +- *(1) ColumnarToRow
                     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_qoy#34), isnotnull(d_year#30), (d_qoy#34 = 2), (d_year#30 = 1998), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                     :     +- BroadcastQueryStage 1
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9079]
                     :           +- *(2) Filter (isnotnull(s_store_sk#52) AND isnotnull(s_zip#77))
                     :              +- *(2) ColumnarToRow
                     :                 +- FileScan parquet default.store[s_store_sk#52,s_store_name#57,s_zip#77] Batched: true, DataFilters: [isnotnull(s_store_sk#52), isnotnull(s_zip#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>
                     +- BroadcastQueryStage 8
                        +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [plan_id=10131]
                           +- *(11) HashAggregate(keys=[ca_zip#3712], functions=[], output=[ca_zip#3712])
                              +- ShuffleQueryStage 7
                                 +- Exchange hashpartitioning(ca_zip#3712, 20), ENSURE_REQUIREMENTS, [plan_id=10043]
                                    +- *(10) HashAggregate(keys=[ca_zip#3712], functions=[], output=[ca_zip#3712])
                                       +- *(10) Project [substr(ca_zip#3726, 1, 5) AS ca_zip#3712]
                                          +- *(10) BroadcastHashJoin [coalesce(substr(ca_zip#3726, 1, 5), ), isnull(substr(ca_zip#3726, 1, 5))], [coalesce(ca_zip#3713, ), isnull(ca_zip#3713)], LeftSemi, BuildRight, false
                                             :- AQEShuffleRead local
                                             :  +- ShuffleQueryStage 2
                                             :     +- Exchange hashpartitioning(coalesce(substr(ca_zip#3726, 1, 5), ), isnull(substr(ca_zip#3726, 1, 5)), 20), ENSURE_REQUIREMENTS, [plan_id=9096]
                                             :        +- *(3) Filter (substr(ca_zip#3726, 1, 5) INSET 10144, 10336, 10390, 10445, 10516, 10567, 11101, 11356, 11376, 11489, 11634, 11928, 12305, 13354, 13375, 13376, 13394, 13595, 13695, 13955, 14060, 14089, 14171, 14328, 14663, 14867, 14922, 15126, 15146, 15371, 15455, 15559, 15723, 15734, 15765, 15798, 15882, 16021, 16725, 16807, 17043, 17183, 17871, 17879, 17920, 18119, 18270, 18376, 18383, 18426, 18652, 18767, 18799, 18840, 18842, 18845, 18906, 19430, 19505, 19512, 19515, 19736, 19769, 19849, 20004, 20260, 20548, 21076, 21195, 21286, 21309, 21337, 21756, 22152, 22245, 22246, 22351, 22437, 22461, 22685, 22744, 22752, 22927, 23006, 23470, 23932, 23968, 24128, 24206, 24317, 24610, 24671, 24676, 24996, 25003, 25103, 25280, 25486, 25631, 25733, 25782, 25858, 25989, 26065, 26105, 26231, 26233, 26653, 26689, 26859, 27068, 27156, 27385, 27700, 28286, 28488, 28545, 28577, 28587, 28709, 28810, 28898, 28915, 29178, 29741, 29839, 30010, 30122, 30431, 30450, 30469, 30625, 30903, 31016, 31029, 31387, 31671, 31880, 32213, 32754, 33123, 33282, 33515, 33786, 34102, 34322, 34425, 35258, 35458, 35474, 35576, 35850, 35942, 36233, 36420, 36446, 36495, 36634, 37125, 37126, 37930, 38122, 38193, 38415, 38607, 38935, 39127, 39192, 39371, 39516, 39736, 39861, 39972, 40081, 40162, 40558, 40604, 41248, 41367, 41368, 41766, 41918, 42029, 42666, 42961, 43285, 43848, 43933, 44165, 44438, 45200, 45266, 45375, 45549, 45692, 45721, 45748, 46081, 46136, 46820, 47305, 47537, 47770, 48033, 48425, 48583, 49130, 49156, 49448, 50016, 50298, 50308, 50412, 51061, 51103, 51200, 51211, 51622, 51649, 51650, 51798, 51949, 52867, 53179, 53268, 53535, 53672, 54364, 54601, 54917, 55253, 55307, 55565, 56240, 56458, 56529, 56571, 56575, 56616, 56691, 56910, 57047, 57647, 57665, 57834, 57855, 58048, 58058, 58078, 58263, 58470, 58943, 59166, 59402, 60099, 60279, 60576, 61265, 61547, 61810, 61860, 62377, 62496, 62878, 62971, 63089, 63193, 63435, 63792, 63837, 63981, 64034, 64147, 64457, 64528, 64544, 65084, 65164, 66162, 66708, 66864, 67030, 67301, 67467, 67473, 67853, 67875, 67897, 68014, 68100, 68101, 68309, 68341, 68621, 68786, 68806, 68880, 68893, 68908, 69035, 69399, 69913, 69952, 70372, 70466, 70738, 71256, 71286, 71791, 71954, 72013, 72151, 72175, 72305, 72325, 72425, 72550, 72823, 73134, 73171, 73241, 73273, 73520, 73650, 74351, 75691, 76107, 76231, 76232, 76614, 76638, 76698, 77191, 77556, 77610, 77721, 78451, 78567, 78668, 78890, 79077, 79777, 79994, 81019, 81096, 81312, 81426, 82136, 82276, 82636, 83041, 83144, 83444, 83849, 83921, 83926, 83933, 84093, 84935, 85816, 86057, 86198, 86284, 86379, 87343, 87501, 87816, 88086, 88190, 88424, 88885, 89091, 89360, 90225, 90257, 90578, 91068, 91110, 91137, 91393, 92712, 94167, 94627, 94898, 94945, 94983, 96451, 96576, 96765, 96888, 96976, 97189, 97789, 98025, 98235, 98294, 98359, 98569, 99076, 99543 AND isnotnull(substr(ca_zip#3726, 1, 5)))
                                             :           +- *(3) ColumnarToRow
                                             :              +- FileScan parquet default.customer_address[ca_zip#3726] Batched: true, DataFilters: [substr(ca_zip#3726, 1, 5) INSET 10144, 10336, 10390, 10445, 10516, 10567, 11101, 11356, 11376, 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>
                                             +- BroadcastQueryStage 6
                                                +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true])),false), [plan_id=9922]
                                                   +- *(9) Project [ca_zip#3713]
                                                      +- *(9) Filter (cnt#3714L > 10)
                                                         +- *(9) HashAggregate(keys=[ca_zip#3739], functions=[count(1)], output=[ca_zip#3713, cnt#3714L])
                                                            +- ShuffleQueryStage 5
                                                               +- Exchange hashpartitioning(ca_zip#3739, 20), ENSURE_REQUIREMENTS, [plan_id=9763]
                                                                  +- *(8) HashAggregate(keys=[ca_zip#3739], functions=[partial_count(1)], output=[ca_zip#3739, count#3752L])
                                                                     +- *(8) Project [ca_zip#3739]
                                                                        +- *(8) SortMergeJoin [ca_address_sk#3730], [c_current_addr_sk#85], Inner
                                                                           :- *(6) Sort [ca_address_sk#3730 ASC NULLS FIRST], false, 0
                                                                           :  +- ShuffleQueryStage 3
                                                                           :     +- Exchange hashpartitioning(ca_address_sk#3730, 20), ENSURE_REQUIREMENTS, [plan_id=9113]
                                                                           :        +- *(4) Filter isnotnull(ca_address_sk#3730)
                                                                           :           +- *(4) ColumnarToRow
                                                                           :              +- FileScan parquet default.customer_address[ca_address_sk#3730,ca_zip#3739] Batched: true, DataFilters: [isnotnull(ca_address_sk#3730)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                                                                           +- *(7) Sort [c_current_addr_sk#85 ASC NULLS FIRST], false, 0
                                                                              +- ShuffleQueryStage 4
                                                                                 +- Exchange hashpartitioning(c_current_addr_sk#85, 20), ENSURE_REQUIREMENTS, [plan_id=9132]
                                                                                    +- *(5) Project [c_current_addr_sk#85]
                                                                                       +- *(5) Filter ((isnotnull(c_preferred_cust_flag#91) AND (c_preferred_cust_flag#91 = Y)) AND isnotnull(c_current_addr_sk#85))
                                                                                          +- *(5) ColumnarToRow
                                                                                             +- FileScan parquet default.customer[c_current_addr_sk#85,c_preferred_cust_flag#91] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#91), (c_preferred_cust_flag#91 = Y), isnotnull(c_current_addr_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>

==== q9 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(1) Project [CASE WHEN (Subquery subquery#3760, [id=#10284].count(1) > 62316685) THEN ReusedSubquery Subquery subquery#3760, [id=#10284].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery subquery#3760, [id=#10284].avg(ss_net_paid) END AS bucket1#3763, CASE WHEN (Subquery subquery#3764, [id=#10335].count(1) > 19045798) THEN ReusedSubquery Subquery subquery#3764, [id=#10335].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery subquery#3764, [id=#10335].avg(ss_net_paid) END AS bucket2#3767, CASE WHEN (Subquery subquery#3768, [id=#10386].count(1) > 365541424) THEN ReusedSubquery Subquery subquery#3768, [id=#10386].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery subquery#3768, [id=#10386].avg(ss_net_paid) END AS bucket3#3771, CASE WHEN (Subquery subquery#3772, [id=#10437].count(1) > 216357808) THEN ReusedSubquery Subquery subquery#3772, [id=#10437].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery subquery#3772, [id=#10437].avg(ss_net_paid) END AS bucket4#3775, CASE WHEN (Subquery subquery#3776, [id=#10488].count(1) > 184483884) THEN ReusedSubquery Subquery subquery#3776, [id=#10488].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery subquery#3776, [id=#10488].avg(ss_net_paid) END AS bucket5#3779]
   :  :- Subquery subquery#3760, [id=#10284]
   :  :  +- AdaptiveSparkPlan isFinalPlan=true
         +- == Final Plan ==
            *(2) Project [named_struct(count(1), count(1)#3784L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3786, avg(ss_net_paid), avg(ss_net_paid)#3788) AS mergedValue#4184]
            +- *(2) HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#428)), avg(UnscaledValue(ss_net_paid#434))], output=[count(1)#3784L, avg(ss_ext_discount_amt)#3786, avg(ss_net_paid)#3788])
               +- ShuffleQueryStage 0
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10783]
                     +- *(1) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#428)), partial_avg(UnscaledValue(ss_net_paid#434))], output=[count#4189L, sum#4190, count#4191L, sum#4192, count#4193L])
                        +- *(1) Project [ss_ext_discount_amt#428, ss_net_paid#434]
                           +- *(1) Filter ((isnotnull(ss_quantity#424) AND (ss_quantity#424 >= 1)) AND (ss_quantity#424 <= 20))
                              +- *(1) ColumnarToRow
                                 +- FileScan parquet default.store_sales[ss_quantity#424,ss_ext_discount_amt#428,ss_net_paid#434] Batched: true, DataFilters: [isnotnull(ss_quantity#424), (ss_quantity#424 >= 1), (ss_quantity#424 <= 20)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,1), LessThanOrEqual(ss_quantity,20)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
         +- == Initial Plan ==
            Project [named_struct(count(1), count(1)#3784L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3786, avg(ss_net_paid), avg(ss_net_paid)#3788) AS mergedValue#4184]
            +- HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#428)), avg(UnscaledValue(ss_net_paid#434))], output=[count(1)#3784L, avg(ss_ext_discount_amt)#3786, avg(ss_net_paid)#3788])
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10281]
                  +- HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#428)), partial_avg(UnscaledValue(ss_net_paid#434))], output=[count#4189L, sum#4190, count#4191L, sum#4192, count#4193L])
                     +- Project [ss_ext_discount_amt#428, ss_net_paid#434]
                        +- Filter ((isnotnull(ss_quantity#424) AND (ss_quantity#424 >= 1)) AND (ss_quantity#424 <= 20))
                           +- FileScan parquet default.store_sales[ss_quantity#424,ss_ext_discount_amt#428,ss_net_paid#434] Batched: true, DataFilters: [isnotnull(ss_quantity#424), (ss_quantity#424 >= 1), (ss_quantity#424 <= 20)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,1), LessThanOrEqual(ss_quantity,20)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
   :  :- ReusedSubquery Subquery subquery#3760, [id=#10284]
   :  :- ReusedSubquery Subquery subquery#3760, [id=#10284]
   :  :- Subquery subquery#3764, [id=#10335]
   :  :  +- AdaptiveSparkPlan isFinalPlan=true
         +- == Final Plan ==
            *(2) Project [named_struct(count(1), count(1)#3790L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3792, avg(ss_net_paid), avg(ss_net_paid)#3794) AS mergedValue#4185]
            +- *(2) HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#3874)), avg(UnscaledValue(ss_net_paid#3880))], output=[count(1)#3790L, avg(ss_ext_discount_amt)#3792, avg(ss_net_paid)#3794])
               +- ShuffleQueryStage 0
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10787]
                     +- *(1) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#3874)), partial_avg(UnscaledValue(ss_net_paid#3880))], output=[count#4194L, sum#4195, count#4196L, sum#4197, count#4198L])
                        +- *(1) Project [ss_ext_discount_amt#3874, ss_net_paid#3880]
                           +- *(1) Filter ((isnotnull(ss_quantity#3870) AND (ss_quantity#3870 >= 21)) AND (ss_quantity#3870 <= 40))
                              +- *(1) ColumnarToRow
                                 +- FileScan parquet default.store_sales[ss_quantity#3870,ss_ext_discount_amt#3874,ss_net_paid#3880] Batched: true, DataFilters: [isnotnull(ss_quantity#3870), (ss_quantity#3870 >= 21), (ss_quantity#3870 <= 40)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,40)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
         +- == Initial Plan ==
            Project [named_struct(count(1), count(1)#3790L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3792, avg(ss_net_paid), avg(ss_net_paid)#3794) AS mergedValue#4185]
            +- HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#3874)), avg(UnscaledValue(ss_net_paid#3880))], output=[count(1)#3790L, avg(ss_ext_discount_amt)#3792, avg(ss_net_paid)#3794])
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10332]
                  +- HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#3874)), partial_avg(UnscaledValue(ss_net_paid#3880))], output=[count#4194L, sum#4195, count#4196L, sum#4197, count#4198L])
                     +- Project [ss_ext_discount_amt#3874, ss_net_paid#3880]
                        +- Filter ((isnotnull(ss_quantity#3870) AND (ss_quantity#3870 >= 21)) AND (ss_quantity#3870 <= 40))
                           +- FileScan parquet default.store_sales[ss_quantity#3870,ss_ext_discount_amt#3874,ss_net_paid#3880] Batched: true, DataFilters: [isnotnull(ss_quantity#3870), (ss_quantity#3870 >= 21), (ss_quantity#3870 <= 40)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,40)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
   :  :- ReusedSubquery Subquery subquery#3764, [id=#10335]
   :  :- ReusedSubquery Subquery subquery#3764, [id=#10335]
   :  :- Subquery subquery#3768, [id=#10386]
   :  :  +- AdaptiveSparkPlan isFinalPlan=true
         +- == Final Plan ==
            *(2) Project [named_struct(count(1), count(1)#3796L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3798, avg(ss_net_paid), avg(ss_net_paid)#3800) AS mergedValue#4186]
            +- *(2) HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#3943)), avg(UnscaledValue(ss_net_paid#3949))], output=[count(1)#3796L, avg(ss_ext_discount_amt)#3798, avg(ss_net_paid)#3800])
               +- ShuffleQueryStage 0
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10788]
                     +- *(1) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#3943)), partial_avg(UnscaledValue(ss_net_paid#3949))], output=[count#4199L, sum#4200, count#4201L, sum#4202, count#4203L])
                        +- *(1) Project [ss_ext_discount_amt#3943, ss_net_paid#3949]
                           +- *(1) Filter ((isnotnull(ss_quantity#3939) AND (ss_quantity#3939 >= 41)) AND (ss_quantity#3939 <= 60))
                              +- *(1) ColumnarToRow
                                 +- FileScan parquet default.store_sales[ss_quantity#3939,ss_ext_discount_amt#3943,ss_net_paid#3949] Batched: true, DataFilters: [isnotnull(ss_quantity#3939), (ss_quantity#3939 >= 41), (ss_quantity#3939 <= 60)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,41), LessThanOrEqual(ss_quantity,60)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
         +- == Initial Plan ==
            Project [named_struct(count(1), count(1)#3796L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3798, avg(ss_net_paid), avg(ss_net_paid)#3800) AS mergedValue#4186]
            +- HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#3943)), avg(UnscaledValue(ss_net_paid#3949))], output=[count(1)#3796L, avg(ss_ext_discount_amt)#3798, avg(ss_net_paid)#3800])
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10383]
                  +- HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#3943)), partial_avg(UnscaledValue(ss_net_paid#3949))], output=[count#4199L, sum#4200, count#4201L, sum#4202, count#4203L])
                     +- Project [ss_ext_discount_amt#3943, ss_net_paid#3949]
                        +- Filter ((isnotnull(ss_quantity#3939) AND (ss_quantity#3939 >= 41)) AND (ss_quantity#3939 <= 60))
                           +- FileScan parquet default.store_sales[ss_quantity#3939,ss_ext_discount_amt#3943,ss_net_paid#3949] Batched: true, DataFilters: [isnotnull(ss_quantity#3939), (ss_quantity#3939 >= 41), (ss_quantity#3939 <= 60)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,41), LessThanOrEqual(ss_quantity,60)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
   :  :- ReusedSubquery Subquery subquery#3768, [id=#10386]
   :  :- ReusedSubquery Subquery subquery#3768, [id=#10386]
   :  :- Subquery subquery#3772, [id=#10437]
   :  :  +- AdaptiveSparkPlan isFinalPlan=true
         +- == Final Plan ==
            *(2) Project [named_struct(count(1), count(1)#3802L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3804, avg(ss_net_paid), avg(ss_net_paid)#3806) AS mergedValue#4187]
            +- *(2) HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#4012)), avg(UnscaledValue(ss_net_paid#4018))], output=[count(1)#3802L, avg(ss_ext_discount_amt)#3804, avg(ss_net_paid)#3806])
               +- ShuffleQueryStage 0
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10784]
                     +- *(1) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#4012)), partial_avg(UnscaledValue(ss_net_paid#4018))], output=[count#4204L, sum#4205, count#4206L, sum#4207, count#4208L])
                        +- *(1) Project [ss_ext_discount_amt#4012, ss_net_paid#4018]
                           +- *(1) Filter ((isnotnull(ss_quantity#4008) AND (ss_quantity#4008 >= 61)) AND (ss_quantity#4008 <= 80))
                              +- *(1) ColumnarToRow
                                 +- FileScan parquet default.store_sales[ss_quantity#4008,ss_ext_discount_amt#4012,ss_net_paid#4018] Batched: true, DataFilters: [isnotnull(ss_quantity#4008), (ss_quantity#4008 >= 61), (ss_quantity#4008 <= 80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,61), LessThanOrEqual(ss_quantity,80)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
         +- == Initial Plan ==
            Project [named_struct(count(1), count(1)#3802L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3804, avg(ss_net_paid), avg(ss_net_paid)#3806) AS mergedValue#4187]
            +- HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#4012)), avg(UnscaledValue(ss_net_paid#4018))], output=[count(1)#3802L, avg(ss_ext_discount_amt)#3804, avg(ss_net_paid)#3806])
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10434]
                  +- HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#4012)), partial_avg(UnscaledValue(ss_net_paid#4018))], output=[count#4204L, sum#4205, count#4206L, sum#4207, count#4208L])
                     +- Project [ss_ext_discount_amt#4012, ss_net_paid#4018]
                        +- Filter ((isnotnull(ss_quantity#4008) AND (ss_quantity#4008 >= 61)) AND (ss_quantity#4008 <= 80))
                           +- FileScan parquet default.store_sales[ss_quantity#4008,ss_ext_discount_amt#4012,ss_net_paid#4018] Batched: true, DataFilters: [isnotnull(ss_quantity#4008), (ss_quantity#4008 >= 61), (ss_quantity#4008 <= 80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,61), LessThanOrEqual(ss_quantity,80)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
   :  :- ReusedSubquery Subquery subquery#3772, [id=#10437]
   :  :- ReusedSubquery Subquery subquery#3772, [id=#10437]
   :  :- Subquery subquery#3776, [id=#10488]
   :  :  +- AdaptiveSparkPlan isFinalPlan=true
         +- == Final Plan ==
            *(2) Project [named_struct(count(1), count(1)#3808L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3810, avg(ss_net_paid), avg(ss_net_paid)#3812) AS mergedValue#4188]
            +- *(2) HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#4081)), avg(UnscaledValue(ss_net_paid#4087))], output=[count(1)#3808L, avg(ss_ext_discount_amt)#3810, avg(ss_net_paid)#3812])
               +- ShuffleQueryStage 0
                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10781]
                     +- *(1) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#4081)), partial_avg(UnscaledValue(ss_net_paid#4087))], output=[count#4211L, sum#4212, count#4213L, sum#4214, count#4215L])
                        +- *(1) Project [ss_ext_discount_amt#4081, ss_net_paid#4087]
                           +- *(1) Filter ((isnotnull(ss_quantity#4077) AND (ss_quantity#4077 >= 81)) AND (ss_quantity#4077 <= 100))
                              +- *(1) ColumnarToRow
                                 +- FileScan parquet default.store_sales[ss_quantity#4077,ss_ext_discount_amt#4081,ss_net_paid#4087] Batched: true, DataFilters: [isnotnull(ss_quantity#4077), (ss_quantity#4077 >= 81), (ss_quantity#4077 <= 100)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,81), LessThanOrEqual(ss_quantity,100)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
         +- == Initial Plan ==
            Project [named_struct(count(1), count(1)#3808L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#3810, avg(ss_net_paid), avg(ss_net_paid)#3812) AS mergedValue#4188]
            +- HashAggregate(keys=[], functions=[count(1), avg(UnscaledValue(ss_ext_discount_amt#4081)), avg(UnscaledValue(ss_net_paid#4087))], output=[count(1)#3808L, avg(ss_ext_discount_amt)#3810, avg(ss_net_paid)#3812])
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10485]
                  +- HashAggregate(keys=[], functions=[partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#4081)), partial_avg(UnscaledValue(ss_net_paid#4087))], output=[count#4211L, sum#4212, count#4213L, sum#4214, count#4215L])
                     +- Project [ss_ext_discount_amt#4081, ss_net_paid#4087]
                        +- Filter ((isnotnull(ss_quantity#4077) AND (ss_quantity#4077 >= 81)) AND (ss_quantity#4077 <= 100))
                           +- FileScan parquet default.store_sales[ss_quantity#4077,ss_ext_discount_amt#4081,ss_net_paid#4087] Batched: true, DataFilters: [isnotnull(ss_quantity#4077), (ss_quantity#4077 >= 81), (ss_quantity#4077 <= 100)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,81), LessThanOrEqual(ss_quantity,100)], ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>
   :  :- ReusedSubquery Subquery subquery#3776, [id=#10488]
   :  +- ReusedSubquery Subquery subquery#3776, [id=#10488]
   +- *(1) Filter (isnotnull(r_reason_sk#3780) AND (r_reason_sk#3780 = 1))
      +- *(1) ColumnarToRow
         +- FileScan parquet default.reason[r_reason_sk#3780] Batched: true, DataFilters: [isnotnull(r_reason_sk#3780), (r_reason_sk#3780 = 1)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/reason], PartitionFilters: [], PushedFilters: [IsNotNull(r_reason_sk), EqualTo(r_reason_sk,1)], ReadSchema: struct<r_reason_sk:int>

==== q11 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[customer_preferred_cust_flag#4489 ASC NULLS FIRST], output=[customer_preferred_cust_flag#4489])
   +- *(28) Project [customer_preferred_cust_flag#4489]
      +- *(28) BroadcastHashJoin [customer_id#4416], [customer_id#4506], Inner, BuildRight, (CASE WHEN (year_total#4434 > 0.00) THEN CheckOverflow((promote_precision(year_total#4514) / promote_precision(year_total#4434)), DecimalType(38,20)) END > CASE WHEN (year_total#4424 > 0.00) THEN CheckOverflow((promote_precision(year_total#4494) / promote_precision(year_total#4424)), DecimalType(38,20)) END), false
         :- *(28) Project [customer_id#4416, year_total#4424, customer_preferred_cust_flag#4489, year_total#4494, year_total#4434]
         :  +- *(28) BroadcastHashJoin [customer_id#4416], [customer_id#4426], Inner, BuildRight, false
         :     :- *(28) Project [customer_id#4416, year_total#4424, customer_preferred_cust_flag#4489, year_total#4494]
         :     :  +- *(28) BroadcastHashJoin [customer_id#4416], [customer_id#4486], Inner, BuildLeft, false
         :     :     :- BroadcastQueryStage 23
         :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=13316]
         :     :     :     +- *(25) Filter (isnotnull(year_total#4424) AND (year_total#4424 > 0.00))
         :     :     :        +- *(25) HashAggregate(keys=[c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#431 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#428 as decimal(8,2)))), DecimalType(8,2))))], output=[customer_id#4416, year_total#4424])
         :     :     :           +- ShuffleQueryStage 19
         :     :     :              +- Exchange hashpartitioning(c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, 20), ENSURE_REQUIREMENTS, [plan_id=12831]
         :     :     :                 +- *(15) HashAggregate(keys=[c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#431 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#428 as decimal(8,2)))), DecimalType(8,2))))], output=[c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, sum#5502L])
         :     :     :                    +- *(15) Project [c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, ss_ext_discount_amt#428, ss_ext_list_price#431, d_year#30]
         :     :     :                       +- *(15) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :     :     :                          :- *(15) Project [c_customer_id#82, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_country#95, c_login#96, c_email_address#97, ss_sold_date_sk#414, ss_ext_discount_amt#428, ss_ext_list_price#431]
         :     :     :                          :  +- *(15) SortMergeJoin [c_customer_sk#81], [ss_customer_sk#417], Inner
         :     :     :                          :     :- *(13) Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0
         :     :     :                          :     :  +- ShuffleQueryStage 0
         :     :     :                          :     :     +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=11276]
         :     :     :                          :     :        +- *(1) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_customer_id#82))
         :     :     :                          :     :           +- *(1) ColumnarToRow
         :     :     :                          :     :              +- FileScan parquet default.customer[c_customer_sk#81,c_customer_id#82,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_country#95,c_login#96,c_email_address#97] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_customer_id#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...
         :     :     :                          :     +- *(14) Sort [ss_customer_sk#417 ASC NULLS FIRST], false, 0
         :     :     :                          :        +- ShuffleQueryStage 1
         :     :     :                          :           +- Exchange hashpartitioning(ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=11293]
         :     :     :                          :              +- *(2) Filter (isnotnull(ss_customer_sk#417) AND isnotnull(ss_sold_date_sk#414))
         :     :     :                          :                 +- *(2) ColumnarToRow
         :     :     :                          :                    +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417,ss_ext_discount_amt#428,ss_ext_list_price#431] Batched: true, DataFilters: [isnotnull(ss_customer_sk#417), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:...
         :     :     :                          +- BroadcastQueryStage 2
         :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11312]
         :     :     :                                +- *(3) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
         :     :     :                                   +- *(3) ColumnarToRow
         :     :     :                                      +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     +- *(28) HashAggregate(keys=[c_customer_id#4995, c_first_name#5002, c_last_name#5003, d_year#5041, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#5029 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#5026 as decimal(8,2)))), DecimalType(8,2))))], output=[customer_id#4486, customer_preferred_cust_flag#4489, year_total#4494])
         :     :        +- ShuffleQueryStage 20
         :     :           +- Exchange hashpartitioning(c_customer_id#4995, c_first_name#5002, c_last_name#5003, d_year#5041, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010, 20), ENSURE_REQUIREMENTS, [plan_id=12876]
         :     :              +- *(18) HashAggregate(keys=[c_customer_id#4995, c_first_name#5002, c_last_name#5003, d_year#5041, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#5029 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#5026 as decimal(8,2)))), DecimalType(8,2))))], output=[c_customer_id#4995, c_first_name#5002, c_last_name#5003, d_year#5041, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010, sum#5504L])
         :     :                 +- *(18) Project [c_customer_id#4995, c_first_name#5002, c_last_name#5003, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010, ss_ext_discount_amt#5026, ss_ext_list_price#5029, d_year#5041]
         :     :                    +- *(18) BroadcastHashJoin [ss_sold_date_sk#5012], [d_date_sk#5035], Inner, BuildRight, false
         :     :                       :- *(18) Project [c_customer_id#4995, c_first_name#5002, c_last_name#5003, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010, ss_sold_date_sk#5012, ss_ext_discount_amt#5026, ss_ext_list_price#5029]
         :     :                       :  +- *(18) SortMergeJoin [c_customer_sk#4994], [ss_customer_sk#5015], Inner
         :     :                       :     :- *(16) Sort [c_customer_sk#4994 ASC NULLS FIRST], false, 0
         :     :                       :     :  +- ShuffleQueryStage 4
         :     :                       :     :     +- ReusedExchange [c_customer_sk#4994, c_customer_id#4995, c_first_name#5002, c_last_name#5003, c_preferred_cust_flag#5004, c_birth_country#5008, c_login#5009, c_email_address#5010], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=11276]
         :     :                       :     +- *(17) Sort [ss_customer_sk#5015 ASC NULLS FIRST], false, 0
         :     :                       :        +- ShuffleQueryStage 6
         :     :                       :           +- ReusedExchange [ss_sold_date_sk#5012, ss_customer_sk#5015, ss_ext_discount_amt#5026, ss_ext_list_price#5029], Exchange hashpartitioning(ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=11293]
         :     :                       +- BroadcastQueryStage 7
         :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11409]
         :     :                             +- *(6) Filter ((isnotnull(d_year#5041) AND (d_year#5041 = 2002)) AND isnotnull(d_date_sk#5035))
         :     :                                +- *(6) ColumnarToRow
         :     :                                   +- FileScan parquet default.date_dim[d_date_sk#5035,d_year#5041] Batched: true, DataFilters: [isnotnull(d_year#5041), (d_year#5041 = 2002), isnotnull(d_date_sk#5035)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     +- BroadcastQueryStage 24
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=13453]
         :           +- *(26) Filter (isnotnull(year_total#4434) AND (year_total#4434 > 0.00))
         :              +- *(26) HashAggregate(keys=[c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238, d_year#5280], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#5265 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#5262 as decimal(8,2)))), DecimalType(8,2))))], output=[customer_id#4426, year_total#4434])
         :                 +- ShuffleQueryStage 21
         :                    +- Exchange hashpartitioning(c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238, d_year#5280, 20), ENSURE_REQUIREMENTS, [plan_id=13173]
         :                       +- *(21) HashAggregate(keys=[c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238, d_year#5280], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#5265 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#5262 as decimal(8,2)))), DecimalType(8,2))))], output=[c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238, d_year#5280, sum#5506L])
         :                          +- *(21) Project [c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238, ws_ext_discount_amt#5262, ws_ext_list_price#5265, d_year#5280]
         :                             +- *(21) BroadcastHashJoin [ws_sold_date_sk#5240], [d_date_sk#5274], Inner, BuildRight, false
         :                                :- *(21) Project [c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238, ws_sold_date_sk#5240, ws_ext_discount_amt#5262, ws_ext_list_price#5265]
         :                                :  +- *(21) SortMergeJoin [c_customer_sk#5222], [ws_bill_customer_sk#5244], Inner
         :                                :     :- *(19) Sort [c_customer_sk#5222 ASC NULLS FIRST], false, 0
         :                                :     :  +- ShuffleQueryStage 9
         :                                :     :     +- ReusedExchange [c_customer_sk#5222, c_customer_id#5223, c_first_name#5230, c_last_name#5231, c_preferred_cust_flag#5232, c_birth_country#5236, c_login#5237, c_email_address#5238], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=11276]
         :                                :     +- *(20) Sort [ws_bill_customer_sk#5244 ASC NULLS FIRST], false, 0
         :                                :        +- ShuffleQueryStage 10
         :                                :           +- Exchange hashpartitioning(ws_bill_customer_sk#5244, 20), ENSURE_REQUIREMENTS, [plan_id=11488]
         :                                :              +- *(8) Filter (isnotnull(ws_bill_customer_sk#5244) AND isnotnull(ws_sold_date_sk#5240))
         :                                :                 +- *(8) ColumnarToRow
         :                                :                    +- FileScan parquet default.web_sales[ws_sold_date_sk#5240,ws_bill_customer_sk#5244,ws_ext_discount_amt#5262,ws_ext_list_price#5265] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#5244), isnotnull(ws_sold_date_sk#5240)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_p...
         :                                +- BroadcastQueryStage 12
         :                                   +- ReusedExchange [d_date_sk#5274, d_year#5280], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11312]
         +- BroadcastQueryStage 25
            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=13547]
               +- *(27) HashAggregate(keys=[c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397, d_year#5439], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#5424 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#5421 as decimal(8,2)))), DecimalType(8,2))))], output=[customer_id#4506, year_total#4514])
                  +- ShuffleQueryStage 22
                     +- Exchange hashpartitioning(c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397, d_year#5439, 20), ENSURE_REQUIREMENTS, [plan_id=13220]
                        +- *(24) HashAggregate(keys=[c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397, d_year#5439], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#5424 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#5421 as decimal(8,2)))), DecimalType(8,2))))], output=[c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397, d_year#5439, sum#5508L])
                           +- *(24) Project [c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397, ws_ext_discount_amt#5421, ws_ext_list_price#5424, d_year#5439]
                              +- *(24) BroadcastHashJoin [ws_sold_date_sk#5399], [d_date_sk#5433], Inner, BuildRight, false
                                 :- *(24) Project [c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397, ws_sold_date_sk#5399, ws_ext_discount_amt#5421, ws_ext_list_price#5424]
                                 :  +- *(24) SortMergeJoin [c_customer_sk#5381], [ws_bill_customer_sk#5403], Inner
                                 :     :- *(22) Sort [c_customer_sk#5381 ASC NULLS FIRST], false, 0
                                 :     :  +- ShuffleQueryStage 14
                                 :     :     +- ReusedExchange [c_customer_sk#5381, c_customer_id#5382, c_first_name#5389, c_last_name#5390, c_preferred_cust_flag#5391, c_birth_country#5395, c_login#5396, c_email_address#5397], Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=11276]
                                 :     +- *(23) Sort [ws_bill_customer_sk#5403 ASC NULLS FIRST], false, 0
                                 :        +- ShuffleQueryStage 16
                                 :           +- ReusedExchange [ws_sold_date_sk#5399, ws_bill_customer_sk#5403, ws_ext_discount_amt#5421, ws_ext_list_price#5424], Exchange hashpartitioning(ws_bill_customer_sk#5244, 20), ENSURE_REQUIREMENTS, [plan_id=11488]
                                 +- BroadcastQueryStage 18
                                    +- ReusedExchange [d_date_sk#5433, d_year#5439], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11409]


==== q12 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_category#449 ASC NULLS FIRST,i_class#447 ASC NULLS FIRST,i_item_id#438 ASC NULLS FIRST,i_item_desc#441 ASC NULLS FIRST,revenueratio#5530 ASC NULLS FIRST], output=[i_item_desc#441,i_category#449,i_class#447,i_current_price#442,itemrevenue#5529,revenueratio#5530])
   +- *(9) Project [i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#5529, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#5535) * 100.00), DecimalType(21,2)) as decimal(27,2))) / promote_precision(_we0#5537)), DecimalType(38,17)) AS revenueratio#5530, i_item_id#438]
      +- Window [sum(_w1#5536) windowspecdefinition(i_class#447, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#5537], [i_class#447]
         +- *(8) Sort [i_class#447 ASC NULLS FIRST], false, 0
            +- ShuffleQueryStage 4
               +- Exchange hashpartitioning(i_class#447, 20), ENSURE_REQUIREMENTS, [plan_id=14042]
                  +- *(7) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442], functions=[sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#5529, _w0#5535, _w1#5536, i_item_id#438])
                     +- ShuffleQueryStage 3
                        +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442, 20), ENSURE_REQUIREMENTS, [plan_id=13989]
                           +- *(6) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442, sum#5545L])
                              +- *(6) Project [ws_ext_sales_price#186, i_item_id#438, i_item_desc#441, i_current_price#442, i_class#447, i_category#449]
                                 +- *(6) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                                    :- *(6) Project [ws_sold_date_sk#163, ws_ext_sales_price#186, i_item_id#438, i_item_desc#441, i_current_price#442, i_class#447, i_category#449]
                                    :  +- *(6) SortMergeJoin [ws_item_sk#166], [i_item_sk#437], Inner
                                    :     :- *(4) Sort [ws_item_sk#166 ASC NULLS FIRST], false, 0
                                    :     :  +- ShuffleQueryStage 0
                                    :     :     +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=13755]
                                    :     :        +- *(1) Filter (isnotnull(ws_item_sk#166) AND isnotnull(ws_sold_date_sk#163))
                                    :     :           +- *(1) ColumnarToRow
                                    :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                                    :     +- *(5) Sort [i_item_sk#437 ASC NULLS FIRST], false, 0
                                    :        +- ShuffleQueryStage 1
                                    :           +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=13772]
                                    :              +- *(2) Filter (i_category#449 IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#437))
                                    :                 +- *(2) ColumnarToRow
                                    :                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441,i_current_price#442,i_class#447,i_category#449] Batched: true, DataFilters: [i_category#449 IN (Sports                                            ,Books                     ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books                                             ,Home                         ..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...
                                    +- BroadcastQueryStage 2
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13793]
                                          +- *(3) Project [d_date_sk#24]
                                             +- *(3) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 1999-02-22)) AND (d_date#26 <= 1999-03-24)) AND isnotnull(d_date_sk#24))
                                                +- *(3) ColumnarToRow
                                                   +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 1999-02-22), (d_date#26 <= 1999-03-24), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>

==== q13 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(7) HashAggregate(keys=[], functions=[avg(ss_quantity#424), avg(UnscaledValue(ss_ext_sales_price#429)), avg(UnscaledValue(ss_ext_wholesale_cost#430)), sum(UnscaledValue(ss_ext_wholesale_cost#430))], output=[avg(ss_quantity)#5561, avg(ss_ext_sales_price)#5562, avg(ss_ext_wholesale_cost)#5563, sum(ss_ext_wholesale_cost)#5564])
   +- ShuffleQueryStage 5
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14723]
         +- *(6) HashAggregate(keys=[], functions=[partial_avg(ss_quantity#424), partial_avg(UnscaledValue(ss_ext_sales_price#429)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#430)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#430))], output=[sum#5576, count#5577L, sum#5578, count#5579L, sum#5580, count#5581L, sum#5582L])
            +- *(6) Project [ss_quantity#424, ss_ext_sales_price#429, ss_ext_wholesale_cost#430]
               +- *(6) BroadcastHashJoin [ss_hdemo_sk#419], [hd_demo_sk#5551], Inner, BuildRight, (((((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Advanced Degree     )) AND (ss_sales_price#427 >= 100.00)) AND (ss_sales_price#427 <= 150.00)) AND (hd_dep_count#5554 = 3)) OR (((((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             )) AND (ss_sales_price#427 >= 50.00)) AND (ss_sales_price#427 <= 100.00)) AND (hd_dep_count#5554 = 1))) OR (((((cd_marital_status#3635 = W) AND (cd_education_status#3636 = 2 yr Degree         )) AND (ss_sales_price#427 >= 150.00)) AND (ss_sales_price#427 <= 200.00)) AND (hd_dep_count#5554 = 1))), false
                  :- *(6) Project [ss_hdemo_sk#419, ss_quantity#424, ss_sales_price#427, ss_ext_sales_price#429, ss_ext_wholesale_cost#430, cd_marital_status#3635, cd_education_status#3636]
                  :  +- *(6) BroadcastHashJoin [ss_cdemo_sk#418], [cd_demo_sk#3633], Inner, BuildRight, ((((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Advanced Degree     )) AND (ss_sales_price#427 >= 100.00)) AND (ss_sales_price#427 <= 150.00)) OR ((((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             )) AND (ss_sales_price#427 >= 50.00)) AND (ss_sales_price#427 <= 100.00))) OR ((((cd_marital_status#3635 = W) AND (cd_education_status#3636 = 2 yr Degree         )) AND (ss_sales_price#427 >= 150.00)) AND (ss_sales_price#427 <= 200.00))), false
                  :     :- *(6) Project [ss_cdemo_sk#418, ss_hdemo_sk#419, ss_quantity#424, ss_sales_price#427, ss_ext_sales_price#429, ss_ext_wholesale_cost#430]
                  :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :- *(6) Project [ss_sold_date_sk#414, ss_cdemo_sk#418, ss_hdemo_sk#419, ss_quantity#424, ss_sales_price#427, ss_ext_sales_price#429, ss_ext_wholesale_cost#430]
                  :     :     :  +- *(6) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, ((((ca_state#3725 IN (TX,OH) AND (ss_net_profit#436 >= 100.00)) AND (ss_net_profit#436 <= 200.00)) OR ((ca_state#3725 IN (OR,NM,KY) AND (ss_net_profit#436 >= 150.00)) AND (ss_net_profit#436 <= 300.00))) OR ((ca_state#3725 IN (VA,TX,MS) AND (ss_net_profit#436 >= 50.00)) AND (ss_net_profit#436 <= 250.00))), false
                  :     :     :     :- *(6) Project [ss_sold_date_sk#414, ss_cdemo_sk#418, ss_hdemo_sk#419, ss_addr_sk#420, ss_quantity#424, ss_sales_price#427, ss_ext_sales_price#429, ss_ext_wholesale_cost#430, ss_net_profit#436]
                  :     :     :     :  +- *(6) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                  :     :     :     :     :- *(6) Filter ((((((isnotnull(ss_store_sk#421) AND isnotnull(ss_addr_sk#420)) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_cdemo_sk#418)) AND isnotnull(ss_hdemo_sk#419)) AND ((((ss_net_profit#436 >= 100.00) AND (ss_net_profit#436 <= 200.00)) OR ((ss_net_profit#436 >= 150.00) AND (ss_net_profit#436 <= 300.00))) OR ((ss_net_profit#436 >= 50.00) AND (ss_net_profit#436 <= 250.00)))) AND ((((ss_sales_price#427 >= 100.00) AND (ss_sales_price#427 <= 150.00)) OR ((ss_sales_price#427 >= 50.00) AND (ss_sales_price#427 <= 100.00))) OR ((ss_sales_price#427 >= 150.00) AND (ss_sales_price#427 <= 200.00))))
                  :     :     :     :     :  +- *(6) ColumnarToRow
                  :     :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_cdemo_sk#418,ss_hdemo_sk#419,ss_addr_sk#420,ss_store_sk#421,ss_quantity#424,ss_sales_price#427,ss_ext_sales_price#429,ss_ext_wholesale_cost#430,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_store_sk#421), isnotnull(ss_addr_sk#420), isnotnull(ss_sold_date_sk#414), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_cdemo_sk..., ReadSchema: struct<ss_sold_date_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quan...
                  :     :     :     :     +- BroadcastQueryStage 0
                  :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14262]
                  :     :     :     :           +- *(1) Filter isnotnull(s_store_sk#52)
                  :     :     :     :              +- *(1) ColumnarToRow
                  :     :     :     :                 +- FileScan parquet default.store[s_store_sk#52] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>
                  :     :     :     +- BroadcastQueryStage 1
                  :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14281]
                  :     :     :           +- *(2) Project [ca_address_sk#3717, ca_state#3725]
                  :     :     :              +- *(2) Filter (((isnotnull(ca_country#3727) AND (ca_country#3727 = United States)) AND isnotnull(ca_address_sk#3717)) AND ((ca_state#3725 IN (TX,OH) OR ca_state#3725 IN (OR,NM,KY)) OR ca_state#3725 IN (VA,TX,MS)))
                  :     :     :                 +- *(2) ColumnarToRow
                  :     :     :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725,ca_country#3727] Batched: true, DataFilters: [isnotnull(ca_country#3727), (ca_country#3727 = United States), isnotnull(ca_address_sk#3717), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>
                  :     :     +- BroadcastQueryStage 2
                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14302]
                  :     :           +- *(3) Project [d_date_sk#24]
                  :     :              +- *(3) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                  :     :                 +- *(3) ColumnarToRow
                  :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                  :     +- BroadcastQueryStage 3
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14321]
                  :           +- *(4) Filter (isnotnull(cd_demo_sk#3633) AND ((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Advanced Degree     )) OR ((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             ))) OR ((cd_marital_status#3635 = W) AND (cd_education_status#3636 = 2 yr Degree         ))))
                  :              +- *(4) ColumnarToRow
                  :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [isnotnull(cd_demo_sk#3633), ((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Adva..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanc..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>
                  +- BroadcastQueryStage 4
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14338]
                        +- *(5) Filter (isnotnull(hd_demo_sk#5551) AND ((hd_dep_count#5554 = 3) OR (hd_dep_count#5554 = 1)))
                           +- *(5) ColumnarToRow
                              +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_dep_count#5554] Batched: true, DataFilters: [isnotnull(hd_demo_sk#5551), ((hd_dep_count#5554 = 3) OR (hd_dep_count#5554 = 1))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_demo_sk), Or(EqualTo(hd_dep_count,3),EqualTo(hd_dep_count,1))], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

==== q14a ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#6219 ASC NULLS FIRST,i_brand_id#6220 ASC NULLS FIRST,i_class_id#6221 ASC NULLS FIRST,i_category_id#6222 ASC NULLS FIRST], output=[channel#6219,i_brand_id#6220,i_class_id#6221,i_category_id#6222,sum(sales)#6209,sum(number_sales)#6210L])
   +- *(146) HashAggregate(keys=[channel#6219, i_brand_id#6220, i_class_id#6221, i_category_id#6222, spark_grouping_id#6218L], functions=[sum(sales#5605), sum(number_sales#5606L)], output=[channel#6219, i_brand_id#6220, i_class_id#6221, i_category_id#6222, sum(sales)#6209, sum(number_sales)#6210L])
      +- ShuffleQueryStage 201
         +- Exchange hashpartitioning(channel#6219, i_brand_id#6220, i_class_id#6221, i_category_id#6222, spark_grouping_id#6218L, 20), ENSURE_REQUIREMENTS, [plan_id=41399]
            +- *(145) HashAggregate(keys=[channel#6219, i_brand_id#6220, i_class_id#6221, i_category_id#6222, spark_grouping_id#6218L], functions=[partial_sum(sales#5605), partial_sum(number_sales#5606L)], output=[channel#6219, i_brand_id#6220, i_class_id#6221, i_category_id#6222, spark_grouping_id#6218L, sum#6243, isEmpty#6244, sum#6245L])
               +- *(145) Expand [[sales#5605, number_sales#5606L, channel#6214, i_brand_id#6215, i_class_id#6216, i_category_id#6217, 0], [sales#5605, number_sales#5606L, channel#6214, i_brand_id#6215, i_class_id#6216, null, 1], [sales#5605, number_sales#5606L, channel#6214, i_brand_id#6215, null, null, 3], [sales#5605, number_sales#5606L, channel#6214, null, null, null, 7], [sales#5605, number_sales#5606L, null, null, null, null, 15]], [sales#5605, number_sales#5606L, channel#6219, i_brand_id#6220, i_class_id#6221, i_category_id#6222, spark_grouping_id#6218L]
                  +- Union
                     :- *(142) Project [sales#5605, number_sales#5606L, store AS channel#6214, i_brand_id#5960 AS i_brand_id#6215, i_class_id#5962 AS i_class_id#6216, i_category_id#5964 AS i_category_id#6217]
                     :  +- *(142) Filter (isnotnull(sales#5605) AND (cast(sales#5605 as decimal(32,6)) > cast(Subquery subquery#5608, [id=#15954] as decimal(32,6))))
                     :     :  +- Subquery subquery#5608, [id=#15954]
                     :     :     +- AdaptiveSparkPlan isFinalPlan=true
                                 +- == Final Plan ==
                                    *(8) HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(quantity#5623 as decimal(12,2))) * promote_precision(cast(list_price#5624 as decimal(12,2)))), DecimalType(18,2)))], output=[average_sales#5629])
                                    +- ShuffleQueryStage 6
                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=41567]
                                          +- *(7) HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(quantity#5623 as decimal(12,2))) * promote_precision(cast(list_price#5624 as decimal(12,2)))), DecimalType(18,2)))], output=[sum#6266, count#6267L])
                                             +- Union
                                                :- *(4) Project [ss_quantity#5765 AS quantity#5623, ss_list_price#5767 AS list_price#5624]
                                                :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#5755], [d_date_sk#5778], Inner, BuildRight, false
                                                :     :- *(4) Filter isnotnull(ss_sold_date_sk#5755)
                                                :     :  +- *(4) ColumnarToRow
                                                :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#5755,ss_quantity#5765,ss_list_price#5767] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#5755)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
                                                :     +- BroadcastQueryStage 1
                                                :        +- ReusedExchange [d_date_sk#5778], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17735]
                                                :- *(5) Project [cs_quantity#5824 AS quantity#5625, cs_list_price#5826 AS list_price#5626]
                                                :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#5806], [d_date_sk#5840], Inner, BuildRight, false
                                                :     :- *(5) Filter isnotnull(cs_sold_date_sk#5806)
                                                :     :  +- *(5) ColumnarToRow
                                                :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#5806,cs_quantity#5824,cs_list_price#5826] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#5806)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>
                                                :     +- BroadcastQueryStage 3
                                                :        +- ReusedExchange [d_date_sk#5840], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17735]
                                                +- *(6) Project [ws_quantity#5886 AS quantity#5627, ws_list_price#5888 AS list_price#5628]
                                                   +- *(6) BroadcastHashJoin [ws_sold_date_sk#5868], [d_date_sk#5902], Inner, BuildRight, false
                                                      :- *(6) Filter isnotnull(ws_sold_date_sk#5868)
                                                      :  +- *(6) ColumnarToRow
                                                      :     +- FileScan parquet default.web_sales[ws_sold_date_sk#5868,ws_quantity#5886,ws_list_price#5888] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#5868)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>
                                                      +- BroadcastQueryStage 5
                                                         +- ReusedExchange [d_date_sk#5902], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17735]
                                 +- == Initial Plan ==
                                    HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(quantity#5623 as decimal(12,2))) * promote_precision(cast(list_price#5624 as decimal(12,2)))), DecimalType(18,2)))], output=[average_sales#5629])
                                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15952]
                                       +- HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(quantity#5623 as decimal(12,2))) * promote_precision(cast(list_price#5624 as decimal(12,2)))), DecimalType(18,2)))], output=[sum#6266, count#6267L])
                                          +- Union
                                             :- Project [ss_quantity#5765 AS quantity#5623, ss_list_price#5767 AS list_price#5624]
                                             :  +- BroadcastHashJoin [ss_sold_date_sk#5755], [d_date_sk#5778], Inner, BuildRight, false
                                             :     :- Filter isnotnull(ss_sold_date_sk#5755)
                                             :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#5755,ss_quantity#5765,ss_list_price#5767] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#5755)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
                                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15940]
                                             :        +- Project [d_date_sk#5778]
                                             :           +- Filter (((isnotnull(d_year#5784) AND (d_year#5784 >= 1999)) AND (d_year#5784 <= 2001)) AND isnotnull(d_date_sk#5778))
                                             :              +- FileScan parquet default.date_dim[d_date_sk#5778,d_year#5784] Batched: true, DataFilters: [isnotnull(d_year#5784), (d_year#5784 >= 1999), (d_year#5784 <= 2001), isnotnull(d_date_sk#5778)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
                                             :- Project [cs_quantity#5824 AS quantity#5625, cs_list_price#5826 AS list_price#5626]
                                             :  +- BroadcastHashJoin [cs_sold_date_sk#5806], [d_date_sk#5840], Inner, BuildRight, false
                                             :     :- Filter isnotnull(cs_sold_date_sk#5806)
                                             :     :  +- FileScan parquet default.catalog_sales[cs_sold_date_sk#5806,cs_quantity#5824,cs_list_price#5826] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#5806)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>
                                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15943]
                                             :        +- Project [d_date_sk#5840]
                                             :           +- Filter (((isnotnull(d_year#5846) AND (d_year#5846 >= 1999)) AND (d_year#5846 <= 2001)) AND isnotnull(d_date_sk#5840))
                                             :              +- FileScan parquet default.date_dim[d_date_sk#5840,d_year#5846] Batched: true, DataFilters: [isnotnull(d_year#5846), (d_year#5846 >= 1999), (d_year#5846 <= 2001), isnotnull(d_date_sk#5840)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
                                             +- Project [ws_quantity#5886 AS quantity#5627, ws_list_price#5888 AS list_price#5628]
                                                +- BroadcastHashJoin [ws_sold_date_sk#5868], [d_date_sk#5902], Inner, BuildRight, false
                                                   :- Filter isnotnull(ws_sold_date_sk#5868)
                                                   :  +- FileScan parquet default.web_sales[ws_sold_date_sk#5868,ws_quantity#5886,ws_list_price#5888] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#5868)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>
                                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15946]
                                                      +- Project [d_date_sk#5902]
                                                         +- Filter (((isnotnull(d_year#5908) AND (d_year#5908 >= 1999)) AND (d_year#5908 <= 2001)) AND isnotnull(d_date_sk#5902))
                                                            +- FileScan parquet default.date_dim[d_date_sk#5902,d_year#5908] Batched: true, DataFilters: [isnotnull(d_year#5908), (d_year#5908 >= 1999), (d_year#5908 <= 2001), isnotnull(d_date_sk#5902)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
                     :     +- *(142) HashAggregate(keys=[i_brand_id#5960, i_class_id#5962, i_category_id#5964], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#5940 as decimal(12,2))) * promote_precision(cast(ss_list_price#5942 as decimal(12,2)))), DecimalType(18,2))), count(1)], output=[i_brand_id#5960, i_class_id#5962, i_category_id#5964, sales#5605, number_sales#5606L])
                     :        +- ShuffleQueryStage 198
                     :           +- Exchange hashpartitioning(i_brand_id#5960, i_class_id#5962, i_category_id#5964, 20), ENSURE_REQUIREMENTS, [plan_id=41075]
                     :              +- *(139) HashAggregate(keys=[i_brand_id#5960, i_class_id#5962, i_category_id#5964], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#5940 as decimal(12,2))) * promote_precision(cast(ss_list_price#5942 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)], output=[i_brand_id#5960, i_class_id#5962, i_category_id#5964, sum#6249, isEmpty#6250, count#6251L])
                     :                 +- *(139) Project [ss_quantity#5940, ss_list_price#5942, i_brand_id#5960, i_class_id#5962, i_category_id#5964]
                     :                    +- *(139) BroadcastHashJoin [ss_sold_date_sk#5930], [d_date_sk#5975], Inner, BuildRight, false
                     :                       :- *(139) Project [ss_sold_date_sk#5930, ss_quantity#5940, ss_list_price#5942, i_brand_id#5960, i_class_id#5962, i_category_id#5964]
                     :                       :  +- *(139) BroadcastHashJoin [ss_item_sk#5932], [i_item_sk#5953], Inner, BuildRight, false
                     :                       :     :- *(139) BroadcastHashJoin [ss_item_sk#5932], [ss_item_sk#5622], LeftSemi, BuildRight, false
                     :                       :     :  :- AQEShuffleRead local
                     :                       :     :  :  +- ShuffleQueryStage 0
                     :                       :     :  :     +- Exchange hashpartitioning(ss_item_sk#5932, 20), ENSURE_REQUIREMENTS, [plan_id=17648]
                     :                       :     :  :        +- *(1) Filter (isnotnull(ss_item_sk#5932) AND isnotnull(ss_sold_date_sk#5930))
                     :                       :     :  :           +- *(1) ColumnarToRow
                     :                       :     :  :              +- FileScan parquet default.store_sales[ss_sold_date_sk#5930,ss_item_sk#5932,ss_quantity#5940,ss_list_price#5942] Batched: true, DataFilters: [isnotnull(ss_item_sk#5932), isnotnull(ss_sold_date_sk#5930)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
                     :                       :     :  +- BroadcastQueryStage 182
                     :                       :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=40134]
                     :                       :     :        +- *(130) Project [i_item_sk#437 AS ss_item_sk#5622]
                     :                       :     :           +- *(130) BroadcastHashJoin [i_brand_id#444, i_class_id#446, i_category_id#448], [brand_id#5619, class_id#5620, category_id#5621], Inner, BuildLeft, false
                     :                       :     :              :- BroadcastQueryStage 1
                     :                       :     :              :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, false], input[2, int, false], input[3, int, false]),false), [plan_id=17665]
                     :                       :     :              :     +- *(2) Filter ((isnotnull(i_brand_id#444) AND isnotnull(i_class_id#446)) AND isnotnull(i_category_id#448))
                     :                       :     :              :        +- *(2) ColumnarToRow
                     :                       :     :              :           +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_class_id#446,i_category_id#448] Batched: true, DataFilters: [isnotnull(i_brand_id#444), isnotnull(i_class_id#446), isnotnull(i_category_id#448)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
                     :                       :     :              +- *(130) BroadcastHashJoin [coalesce(brand_id#5619, 0), isnull(brand_id#5619), coalesce(class_id#5620, 0), isnull(class_id#5620), coalesce(category_id#5621, 0), isnull(category_id#5621)], [coalesce(i_brand_id#5712, 0), isnull(i_brand_id#5712), coalesce(i_class_id#5714, 0), isnull(i_class_id#5714), coalesce(i_category_id#5716, 0), isnull(i_category_id#5716)], LeftSemi, BuildRight, false
                     :                       :     :                 :- AQEShuffleRead local
                     :                       :     :                 :  +- ShuffleQueryStage 160
                     :                       :     :                 :     +- Exchange hashpartitioning(coalesce(brand_id#5619, 0), isnull(brand_id#5619), coalesce(class_id#5620, 0), isnull(class_id#5620), coalesce(category_id#5621, 0), isnull(category_id#5621), 20), ENSURE_REQUIREMENTS, [plan_id=38293]
                     :                       :     :                 :        +- *(124) HashAggregate(keys=[brand_id#5619, class_id#5620, category_id#5621], functions=[], output=[brand_id#5619, class_id#5620, category_id#5621])
                     :                       :     :                 :           +- ShuffleQueryStage 149
                     :                       :     :                 :              +- Exchange hashpartitioning(brand_id#5619, class_id#5620, category_id#5621, 20), ENSURE_REQUIREMENTS, [plan_id=37119]
                     :                       :     :                 :                 +- *(118) HashAggregate(keys=[brand_id#5619, class_id#5620, category_id#5621], functions=[], output=[brand_id#5619, class_id#5620, category_id#5621])
                     :                       :     :                 :                    +- *(118) Project [i_brand_id#5640 AS brand_id#5619, i_class_id#5642 AS class_id#5620, i_category_id#5644 AS category_id#5621]
                     :                       :     :                 :                       +- *(118) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                     :                       :     :                 :                          :- *(118) Project [ss_sold_date_sk#414, i_brand_id#5640, i_class_id#5642, i_category_id#5644]
                     :                       :     :                 :                          :  +- *(118) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#5633], Inner, BuildRight, false
                     :                       :     :                 :                          :     :- *(118) Filter (isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414))
                     :                       :     :                 :                          :     :  +- *(118) ColumnarToRow
                     :                       :     :                 :                          :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
                     :                       :     :                 :                          :     +- BroadcastQueryStage 138
                     :                       :     :                 :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=34173]
                     :                       :     :                 :                          :           +- *(102) SortMergeJoin [coalesce(i_brand_id#5640, 0), isnull(i_brand_id#5640), coalesce(i_class_id#5642, 0), isnull(i_class_id#5642), coalesce(i_category_id#5644, 0), isnull(i_category_id#5644)], [coalesce(i_brand_id#5662, 0), isnull(i_brand_id#5662), coalesce(i_class_id#5664, 0), isnull(i_class_id#5664), coalesce(i_category_id#5666, 0), isnull(i_category_id#5666)], LeftSemi
                     :                       :     :                 :                          :              :- *(100) Sort [coalesce(i_brand_id#5640, 0) ASC NULLS FIRST, isnull(i_brand_id#5640) ASC NULLS FIRST, coalesce(i_class_id#5642, 0) ASC NULLS FIRST, isnull(i_class_id#5642) ASC NULLS FIRST, coalesce(i_category_id#5644, 0) ASC NULLS FIRST, isnull(i_category_id#5644) ASC NULLS FIRST], false, 0
                     :                       :     :                 :                          :              :  +- ShuffleQueryStage 2
                     :                       :     :                 :                          :              :     +- Exchange hashpartitioning(coalesce(i_brand_id#5640, 0), isnull(i_brand_id#5640), coalesce(i_class_id#5642, 0), isnull(i_class_id#5642), coalesce(i_category_id#5644, 0), isnull(i_category_id#5644), 20), ENSURE_REQUIREMENTS, [plan_id=17680]
                     :                       :     :                 :                          :              :        +- *(3) Filter (((isnotnull(i_item_sk#5633) AND isnotnull(i_brand_id#5640)) AND isnotnull(i_class_id#5642)) AND isnotnull(i_category_id#5644))
                     :                       :     :                 :                          :              :           +- *(3) ColumnarToRow
                     :                       :     :                 :                          :              :              +- FileScan parquet default.item[i_item_sk#5633,i_brand_id#5640,i_class_id#5642,i_category_id#5644] Batched: true, DataFilters: [isnotnull(i_item_sk#5633), isnotnull(i_brand_id#5640), isnotnull(i_class_id#5642), isnotnull(i_c..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
                     :                       :     :                 :                          :              +- *(101) Sort [coalesce(i_brand_id#5662, 0) ASC NULLS FIRST, isnull(i_brand_id#5662) ASC NULLS FIRST, coalesce(i_class_id#5664, 0) ASC NULLS FIRST, isnull(i_class_id#5664) ASC NULLS FIRST, coalesce(i_category_id#5666, 0) ASC NULLS FIRST, isnull(i_category_id#5666) ASC NULLS FIRST], false, 0
                     :                       :     :                 :                          :                 +- ShuffleQueryStage 116
                     :                       :     :                 :                          :                    +- Exchange hashpartitioning(coalesce(i_brand_id#5662, 0), isnull(i_brand_id#5662), coalesce(i_class_id#5664, 0), isnull(i_class_id#5664), coalesce(i_category_id#5666, 0), isnull(i_category_id#5666), 20), ENSURE_REQUIREMENTS, [plan_id=28484]
                     :                       :     :                 :                          :                       +- *(66) Project [i_brand_id#5662, i_class_id#5664, i_category_id#5666]
                     :                       :     :                 :                          :                          +- *(66) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#5677], Inner, BuildRight, false
                     :                       :     :                 :                          :                             :- *(66) Project [cs_sold_date_sk#197, i_brand_id#5662, i_class_id#5664, i_category_id#5666]
                     :                       :     :                 :                          :                             :  +- *(66) SortMergeJoin [cs_item_sk#212], [i_item_sk#5655], Inner
                     :                       :     :                 :                          :                             :     :- *(64) Sort [cs_item_sk#212 ASC NULLS FIRST], false, 0
                     :                       :     :                 :                          :                             :     :  +- ShuffleQueryStage 3
                     :                       :     :                 :                          :                             :     :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=17697]
                     :                       :     :                 :                          :                             :     :        +- *(4) Filter (isnotnull(cs_item_sk#212) AND isnotnull(cs_sold_date_sk#197))
                     :                       :     :                 :                          :                             :     :           +- *(4) ColumnarToRow
                     :                       :     :                 :                          :                             :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_item_sk#212] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>
                     :                       :     :                 :                          :                             :     +- *(65) Sort [i_item_sk#5655 ASC NULLS FIRST], false, 0
                     :                       :     :                 :                          :                             :        +- ShuffleQueryStage 4
                     :                       :     :                 :                          :                             :           +- Exchange hashpartitioning(i_item_sk#5655, 20), ENSURE_REQUIREMENTS, [plan_id=17714]
                     :                       :     :                 :                          :                             :              +- *(5) Filter isnotnull(i_item_sk#5655)
                     :                       :     :                 :                          :                             :                 +- *(5) ColumnarToRow
                     :                       :     :                 :                          :                             :                    +- FileScan parquet default.item[i_item_sk#5655,i_brand_id#5662,i_class_id#5664,i_category_id#5666] Batched: true, DataFilters: [isnotnull(i_item_sk#5655)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
                     :                       :     :                 :                          :                             +- BroadcastQueryStage 5
                     :                       :     :                 :                          :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17735]
                     :                       :     :                 :                          :                                   +- *(6) Project [d_date_sk#5677]
                     :                       :     :                 :                          :                                      +- *(6) Filter (((isnotnull(d_year#5683) AND (d_year#5683 >= 1999)) AND (d_year#5683 <= 2001)) AND isnotnull(d_date_sk#5677))
                     :                       :     :                 :                          :                                         +- *(6) ColumnarToRow
                     :                       :     :                 :                          :                                            +- FileScan parquet default.date_dim[d_date_sk#5677,d_year#5683] Batched: true, DataFilters: [isnotnull(d_year#5683), (d_year#5683 >= 1999), (d_year#5683 <= 2001), isnotnull(d_date_sk#5677)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
                     :                       :     :                 :                          +- BroadcastQueryStage 7
                     :                       :     :                 :                             +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17735]
                     :                       :     :                 +- BroadcastQueryStage 171
                     :                       :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=39353]
                     :                       :     :                       +- AQEShuffleRead local
                     :                       :     :                          +- ShuffleQueryStage 127
                     :                       :     :                             +- Exchange hashpartitioning(coalesce(i_brand_id#5712, 0), isnull(i_brand_id#5712), coalesce(i_class_id#5714, 0), isnull(i_class_id#5714), coalesce(i_category_id#5716, 0), isnull(i_category_id#5716), 20), ENSURE_REQUIREMENTS, [plan_id=30854]
                     :                       :     :                                +- *(84) Project [i_brand_id#5712, i_class_id#5714, i_category_id#5716]
                     :                       :     :                                   +- *(84) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#5727], Inner, BuildRight, false
                     :                       :     :                                      :- *(84) Project [ws_sold_date_sk#163, i_brand_id#5712, i_class_id#5714, i_category_id#5716]
                     :                       :     :                                      :  +- *(84) SortMergeJoin [ws_item_sk#166], [i_item_sk#5705], Inner
                     :                       :     :                                      :     :- *(82) Sort [ws_item_sk#166 ASC NULLS FIRST], false, 0
                     :                       :     :                                      :     :  +- ShuffleQueryStage 8
                     :                       :     :                                      :     :     +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=17788]
                     :                       :     :                                      :     :        +- *(8) Filter (isnotnull(ws_item_sk#166) AND isnotnull(ws_sold_date_sk#163))
                     :                       :     :                                      :     :           +- *(8) ColumnarToRow
                     :                       :     :                                      :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>
                     :                       :     :                                      :     +- *(83) Sort [i_item_sk#5705 ASC NULLS FIRST], false, 0
                     :                       :     :                                      :        +- ShuffleQueryStage 10
                     :                       :     :                                      :           +- ReusedExchange [i_item_sk#5705, i_brand_id#5712, i_class_id#5714, i_category_id#5716], Exchange hashpartitioning(i_item_sk#5655, 20), ENSURE_REQUIREMENTS, [plan_id=17714]
                     :                       :     :                                      +- BroadcastQueryStage 12
                     :                       :     :                                         +- ReusedExchange [d_date_sk#5727], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17735]
                     :                       :     +- BroadcastQueryStage 193
                     :                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=40773]
                     :                       :           +- *(136) BroadcastHashJoin [i_item_sk#5953], [ss_item_sk#5622], LeftSemi, BuildRight, false
                     :                       :              :- AQEShuffleRead local
                     :                       :              :  +- ShuffleQueryStage 14
                     :                       :              :     +- ReusedExchange [i_item_sk#5953, i_brand_id#5960, i_class_id#5962, i_category_id#5964], Exchange hashpartitioning(i_item_sk#5655, 20), ENSURE_REQUIREMENTS, [plan_id=17714]
                     :                       :              +- BroadcastQueryStage 184
                     :                       :                 +- ReusedExchange [ss_item_sk#5622], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=40134]
                     :                       +- BroadcastQueryStage 33
                     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=18085]
                     :                             +- *(21) Project [d_date_sk#5975]
                     :                                +- *(21) Filter ((((isnotnull(d_year#5981) AND isnotnull(d_moy#5983)) AND (d_year#5981 = 2001)) AND (d_moy#5983 = 11)) AND isnotnull(d_date_sk#5975))
                     :                                   +- *(21) ColumnarToRow
                     :                                      +- FileScan parquet default.date_dim[d_date_sk#5975,d_year#5981,d_moy#5983] Batched: true, DataFilters: [isnotnull(d_year#5981), isnotnull(d_moy#5983), (d_year#5981 = 2001), (d_moy#5983 = 11), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :- *(143) Project [sales#5610, number_sales#5611L, catalog AS channel#6232, i_brand_id#6044, i_class_id#6046, i_category_id#6048]
                     :  +- *(143) Filter (isnotnull(sales#5610) AND (cast(sales#5610 as decimal(32,6)) > cast(ReusedSubquery Subquery subquery#5608, [id=#15954] as decimal(32,6))))
                     :     :  +- ReusedSubquery Subquery subquery#5608, [id=#15954]
                     :     +- *(143) HashAggregate(keys=[i_brand_id#6044, i_class_id#6046, i_category_id#6048], functions=[sum(CheckOverflow((promote_precision(cast(cs_quantity#6021 as decimal(12,2))) * promote_precision(cast(cs_list_price#6023 as decimal(12,2)))), DecimalType(18,2))), count(1)], output=[i_brand_id#6044, i_class_id#6046, i_category_id#6048, sales#5610, number_sales#5611L])
                     :        +- ShuffleQueryStage 199
                     :           +- Exchange hashpartitioning(i_brand_id#6044, i_class_id#6046, i_category_id#6048, 20), ENSURE_REQUIREMENTS, [plan_id=41119]
                     :              +- *(140) HashAggregate(keys=[i_brand_id#6044, i_class_id#6046, i_category_id#6048], functions=[partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#6021 as decimal(12,2))) * promote_precision(cast(cs_list_price#6023 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)], output=[i_brand_id#6044, i_class_id#6046, i_category_id#6048, sum#6255, isEmpty#6256, count#6257L])
                     :                 +- *(140) Project [cs_quantity#6021, cs_list_price#6023, i_brand_id#6044, i_class_id#6046, i_category_id#6048]
                     :                    +- *(140) BroadcastHashJoin [cs_sold_date_sk#6003], [d_date_sk#6059], Inner, BuildRight, false
                     :                       :- *(140) Project [cs_sold_date_sk#6003, cs_quantity#6021, cs_list_price#6023, i_brand_id#6044, i_class_id#6046, i_category_id#6048]
                     :                       :  +- *(140) BroadcastHashJoin [cs_item_sk#6018], [i_item_sk#6037], Inner, BuildRight, false
                     :                       :     :- *(140) BroadcastHashJoin [cs_item_sk#6018], [ss_item_sk#5622], LeftSemi, BuildRight, false
                     :                       :     :  :- AQEShuffleRead local
                     :                       :     :  :  +- ShuffleQueryStage 34
                     :                       :     :  :     +- Exchange hashpartitioning(cs_item_sk#6018, 20), ENSURE_REQUIREMENTS, [plan_id=18109]
                     :                       :     :  :        +- *(22) Filter (isnotnull(cs_item_sk#6018) AND isnotnull(cs_sold_date_sk#6003))
                     :                       :     :  :           +- *(22) ColumnarToRow
                     :                       :     :  :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#6003,cs_item_sk#6018,cs_quantity#6021,cs_list_price#6023] Batched: true, DataFilters: [isnotnull(cs_item_sk#6018), isnotnull(cs_sold_date_sk#6003)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>
                     :                       :     :  +- BroadcastQueryStage 186
                     :                       :     :     +- ReusedExchange [ss_item_sk#5622], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=40134]
                     :                       :     +- BroadcastQueryStage 195
                     :                       :        +- ReusedExchange [i_item_sk#6037, i_brand_id#6044, i_class_id#6046, i_category_id#6048], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=40773]
                     :                       +- BroadcastQueryStage 74
                     :                          +- ReusedExchange [d_date_sk#6059], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=18085]
                     +- *(144) Project [sales#5615, number_sales#5616L, web AS channel#6236, i_brand_id#6128, i_class_id#6130, i_category_id#6132]
                        +- *(144) Filter (isnotnull(sales#5615) AND (cast(sales#5615 as decimal(32,6)) > cast(ReusedSubquery Subquery subquery#5608, [id=#15954] as decimal(32,6))))
                           :  +- ReusedSubquery Subquery subquery#5608, [id=#15954]
                           +- *(144) HashAggregate(keys=[i_brand_id#6128, i_class_id#6130, i_category_id#6132], functions=[sum(CheckOverflow((promote_precision(cast(ws_quantity#6105 as decimal(12,2))) * promote_precision(cast(ws_list_price#6107 as decimal(12,2)))), DecimalType(18,2))), count(1)], output=[i_brand_id#6128, i_class_id#6130, i_category_id#6132, sales#5615, number_sales#5616L])
                              +- ShuffleQueryStage 200
                                 +- Exchange hashpartitioning(i_brand_id#6128, i_class_id#6130, i_category_id#6132, 20), ENSURE_REQUIREMENTS, [plan_id=41163]
                                    +- *(141) HashAggregate(keys=[i_brand_id#6128, i_class_id#6130, i_category_id#6132], functions=[partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#6105 as decimal(12,2))) * promote_precision(cast(ws_list_price#6107 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)], output=[i_brand_id#6128, i_class_id#6130, i_category_id#6132, sum#6261, isEmpty#6262, count#6263L])
                                       +- *(141) Project [ws_quantity#6105, ws_list_price#6107, i_brand_id#6128, i_class_id#6130, i_category_id#6132]
                                          +- *(141) BroadcastHashJoin [ws_sold_date_sk#6087], [d_date_sk#6143], Inner, BuildRight, false
                                             :- *(141) Project [ws_sold_date_sk#6087, ws_quantity#6105, ws_list_price#6107, i_brand_id#6128, i_class_id#6130, i_category_id#6132]
                                             :  +- *(141) BroadcastHashJoin [ws_item_sk#6090], [i_item_sk#6121], Inner, BuildRight, false
                                             :     :- *(141) BroadcastHashJoin [ws_item_sk#6090], [ss_item_sk#5622], LeftSemi, BuildRight, false
                                             :     :  :- AQEShuffleRead local
                                             :     :  :  +- ShuffleQueryStage 75
                                             :     :  :     +- Exchange hashpartitioning(ws_item_sk#6090, 20), ENSURE_REQUIREMENTS, [plan_id=18584]
                                             :     :  :        +- *(43) Filter (isnotnull(ws_item_sk#6090) AND isnotnull(ws_sold_date_sk#6087))
                                             :     :  :           +- *(43) ColumnarToRow
                                             :     :  :              +- FileScan parquet default.web_sales[ws_sold_date_sk#6087,ws_item_sk#6090,ws_quantity#6105,ws_list_price#6107] Batched: true, DataFilters: [isnotnull(ws_item_sk#6090), isnotnull(ws_sold_date_sk#6087)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>
                                             :     :  +- BroadcastQueryStage 190
                                             :     :     +- ReusedExchange [ss_item_sk#5622], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=40134]
                                             :     +- BroadcastQueryStage 197
                                             :        +- ReusedExchange [i_item_sk#6121, i_brand_id#6128, i_class_id#6130, i_category_id#6132], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=40773]
                                             +- BroadcastQueryStage 115
                                                +- ReusedExchange [d_date_sk#6143], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=18085]

==== q14b ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_brand_id#6791 ASC NULLS FIRST,i_class_id#6793 ASC NULLS FIRST,i_category_id#6795 ASC NULLS FIRST], output=[channel#6439,i_brand_id#6791,i_class_id#6793,i_category_id#6795,sales#6440,number_sales#6441L,channel#6445,i_brand_id#6864,i_class_id#6866,i_category_id#6868,sales#6446,number_sales#6447L])
   +- *(96) BroadcastHashJoin [i_brand_id#6791, i_class_id#6793, i_category_id#6795], [i_brand_id#6864, i_class_id#6866, i_category_id#6868], Inner, BuildLeft, false
      :- BroadcastQueryStage 128
      :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=57126]
      :     +- *(95) Filter (isnotnull(sales#6440) AND (cast(sales#6440 as decimal(32,6)) > cast(Subquery subquery#6444, [id=#42440] as decimal(32,6))))
      :        :  +- Subquery subquery#6444, [id=#42440]
      :        :     +- AdaptiveSparkPlan isFinalPlan=true
                     +- == Final Plan ==
                        *(8) HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(quantity#6455 as decimal(12,2))) * promote_precision(cast(list_price#6456 as decimal(12,2)))), DecimalType(18,2)))], output=[average_sales#6461])
                        +- ShuffleQueryStage 6
                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=57268]
                              +- *(7) HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(quantity#6455 as decimal(12,2))) * promote_precision(cast(list_price#6456 as decimal(12,2)))), DecimalType(18,2)))], output=[sum#7021, count#7022L])
                                 +- Union
                                    :- *(4) Project [ss_quantity#6596 AS quantity#6455, ss_list_price#6598 AS list_price#6456]
                                    :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#6586], [d_date_sk#6609], Inner, BuildRight, false
                                    :     :- *(4) Filter isnotnull(ss_sold_date_sk#6586)
                                    :     :  +- *(4) ColumnarToRow
                                    :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#6586,ss_quantity#6596,ss_list_price#6598] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#6586)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
                                    :     +- BroadcastQueryStage 1
                                    :        +- ReusedExchange [d_date_sk#6609], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43279]
                                    :- *(5) Project [cs_quantity#6655 AS quantity#6457, cs_list_price#6657 AS list_price#6458]
                                    :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#6637], [d_date_sk#6671], Inner, BuildRight, false
                                    :     :- *(5) Filter isnotnull(cs_sold_date_sk#6637)
                                    :     :  +- *(5) ColumnarToRow
                                    :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#6637,cs_quantity#6655,cs_list_price#6657] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#6637)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>
                                    :     +- BroadcastQueryStage 3
                                    :        +- ReusedExchange [d_date_sk#6671], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43279]
                                    +- *(6) Project [ws_quantity#6717 AS quantity#6459, ws_list_price#6719 AS list_price#6460]
                                       +- *(6) BroadcastHashJoin [ws_sold_date_sk#6699], [d_date_sk#6733], Inner, BuildRight, false
                                          :- *(6) Filter isnotnull(ws_sold_date_sk#6699)
                                          :  +- *(6) ColumnarToRow
                                          :     +- FileScan parquet default.web_sales[ws_sold_date_sk#6699,ws_quantity#6717,ws_list_price#6719] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#6699)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>
                                          +- BroadcastQueryStage 5
                                             +- ReusedExchange [d_date_sk#6733], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43279]
                     +- == Initial Plan ==
                        HashAggregate(keys=[], functions=[avg(CheckOverflow((promote_precision(cast(quantity#6455 as decimal(12,2))) * promote_precision(cast(list_price#6456 as decimal(12,2)))), DecimalType(18,2)))], output=[average_sales#6461])
                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=42438]
                           +- HashAggregate(keys=[], functions=[partial_avg(CheckOverflow((promote_precision(cast(quantity#6455 as decimal(12,2))) * promote_precision(cast(list_price#6456 as decimal(12,2)))), DecimalType(18,2)))], output=[sum#7021, count#7022L])
                              +- Union
                                 :- Project [ss_quantity#6596 AS quantity#6455, ss_list_price#6598 AS list_price#6456]
                                 :  +- BroadcastHashJoin [ss_sold_date_sk#6586], [d_date_sk#6609], Inner, BuildRight, false
                                 :     :- Filter isnotnull(ss_sold_date_sk#6586)
                                 :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#6586,ss_quantity#6596,ss_list_price#6598] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#6586)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
                                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=42426]
                                 :        +- Project [d_date_sk#6609]
                                 :           +- Filter (((isnotnull(d_year#6615) AND (d_year#6615 >= 1999)) AND (d_year#6615 <= 2001)) AND isnotnull(d_date_sk#6609))
                                 :              +- FileScan parquet default.date_dim[d_date_sk#6609,d_year#6615] Batched: true, DataFilters: [isnotnull(d_year#6615), (d_year#6615 >= 1999), (d_year#6615 <= 2001), isnotnull(d_date_sk#6609)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
                                 :- Project [cs_quantity#6655 AS quantity#6457, cs_list_price#6657 AS list_price#6458]
                                 :  +- BroadcastHashJoin [cs_sold_date_sk#6637], [d_date_sk#6671], Inner, BuildRight, false
                                 :     :- Filter isnotnull(cs_sold_date_sk#6637)
                                 :     :  +- FileScan parquet default.catalog_sales[cs_sold_date_sk#6637,cs_quantity#6655,cs_list_price#6657] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#6637)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>
                                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=42429]
                                 :        +- Project [d_date_sk#6671]
                                 :           +- Filter (((isnotnull(d_year#6677) AND (d_year#6677 >= 1999)) AND (d_year#6677 <= 2001)) AND isnotnull(d_date_sk#6671))
                                 :              +- FileScan parquet default.date_dim[d_date_sk#6671,d_year#6677] Batched: true, DataFilters: [isnotnull(d_year#6677), (d_year#6677 >= 1999), (d_year#6677 <= 2001), isnotnull(d_date_sk#6671)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
                                 +- Project [ws_quantity#6717 AS quantity#6459, ws_list_price#6719 AS list_price#6460]
                                    +- BroadcastHashJoin [ws_sold_date_sk#6699], [d_date_sk#6733], Inner, BuildRight, false
                                       :- Filter isnotnull(ws_sold_date_sk#6699)
                                       :  +- FileScan parquet default.web_sales[ws_sold_date_sk#6699,ws_quantity#6717,ws_list_price#6719] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#6699)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=42432]
                                          +- Project [d_date_sk#6733]
                                             +- Filter (((isnotnull(d_year#6739) AND (d_year#6739 >= 1999)) AND (d_year#6739 <= 2001)) AND isnotnull(d_date_sk#6733))
                                                +- FileScan parquet default.date_dim[d_date_sk#6733,d_year#6739] Batched: true, DataFilters: [isnotnull(d_year#6739), (d_year#6739 >= 1999), (d_year#6739 <= 2001), isnotnull(d_date_sk#6733)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
      :        +- *(95) HashAggregate(keys=[i_brand_id#6791, i_class_id#6793, i_category_id#6795], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#6771 as decimal(12,2))) * promote_precision(cast(ss_list_price#6773 as decimal(12,2)))), DecimalType(18,2))), count(1)], output=[channel#6439, i_brand_id#6791, i_class_id#6793, i_category_id#6795, sales#6440, number_sales#6441L])
      :           +- ShuffleQueryStage 126
      :              +- Exchange hashpartitioning(i_brand_id#6791, i_class_id#6793, i_category_id#6795, 20), ENSURE_REQUIREMENTS, [plan_id=56965]
      :                 +- *(93) HashAggregate(keys=[i_brand_id#6791, i_class_id#6793, i_category_id#6795], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#6771 as decimal(12,2))) * promote_precision(cast(ss_list_price#6773 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)], output=[i_brand_id#6791, i_class_id#6793, i_category_id#6795, sum#7010, isEmpty#7011, count#7012L])
      :                    +- *(93) Project [ss_quantity#6771, ss_list_price#6773, i_brand_id#6791, i_class_id#6793, i_category_id#6795]
      :                       +- *(93) BroadcastHashJoin [ss_sold_date_sk#6761], [d_date_sk#6806], Inner, BuildRight, false
      :                          :- *(93) Project [ss_sold_date_sk#6761, ss_quantity#6771, ss_list_price#6773, i_brand_id#6791, i_class_id#6793, i_category_id#6795]
      :                          :  +- *(93) BroadcastHashJoin [ss_item_sk#6763], [i_item_sk#6784], Inner, BuildRight, false
      :                          :     :- *(93) BroadcastHashJoin [ss_item_sk#6763], [ss_item_sk#6454], LeftSemi, BuildRight, false
      :                          :     :  :- AQEShuffleRead local
      :                          :     :  :  +- ShuffleQueryStage 0
      :                          :     :  :     +- Exchange hashpartitioning(ss_item_sk#6763, 20), ENSURE_REQUIREMENTS, [plan_id=43192]
      :                          :     :  :        +- *(1) Filter (isnotnull(ss_item_sk#6763) AND isnotnull(ss_sold_date_sk#6761))
      :                          :     :  :           +- *(1) ColumnarToRow
      :                          :     :  :              +- FileScan parquet default.store_sales[ss_sold_date_sk#6761,ss_item_sk#6763,ss_quantity#6771,ss_list_price#6773] Batched: true, DataFilters: [isnotnull(ss_item_sk#6763), isnotnull(ss_sold_date_sk#6761)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>
      :                          :     :  +- BroadcastQueryStage 116
      :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=56534]
      :                          :     :        +- *(87) Project [i_item_sk#437 AS ss_item_sk#6454]
      :                          :     :           +- *(87) BroadcastHashJoin [i_brand_id#444, i_class_id#446, i_category_id#448], [brand_id#6451, class_id#6452, category_id#6453], Inner, BuildLeft, false
      :                          :     :              :- BroadcastQueryStage 1
      :                          :     :              :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, false], input[2, int, false], input[3, int, false]),false), [plan_id=43209]
      :                          :     :              :     +- *(2) Filter ((isnotnull(i_brand_id#444) AND isnotnull(i_class_id#446)) AND isnotnull(i_category_id#448))
      :                          :     :              :        +- *(2) ColumnarToRow
      :                          :     :              :           +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_class_id#446,i_category_id#448] Batched: true, DataFilters: [isnotnull(i_brand_id#444), isnotnull(i_class_id#446), isnotnull(i_category_id#448)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
      :                          :     :              +- *(87) BroadcastHashJoin [coalesce(brand_id#6451, 0), isnull(brand_id#6451), coalesce(class_id#6452, 0), isnull(class_id#6452), coalesce(category_id#6453, 0), isnull(category_id#6453)], [coalesce(i_brand_id#6543, 0), isnull(i_brand_id#6543), coalesce(i_class_id#6545, 0), isnull(i_class_id#6545), coalesce(i_category_id#6547, 0), isnull(i_category_id#6547)], LeftSemi, BuildRight, false
      :                          :     :                 :- AQEShuffleRead local
      :                          :     :                 :  +- ShuffleQueryStage 102
      :                          :     :                 :     +- Exchange hashpartitioning(coalesce(brand_id#6451, 0), isnull(brand_id#6451), coalesce(class_id#6452, 0), isnull(class_id#6452), coalesce(category_id#6453, 0), isnull(category_id#6453), 20), ENSURE_REQUIREMENTS, [plan_id=55415]
      :                          :     :                 :        +- *(83) HashAggregate(keys=[brand_id#6451, class_id#6452, category_id#6453], functions=[], output=[brand_id#6451, class_id#6452, category_id#6453])
      :                          :     :                 :           +- ShuffleQueryStage 95
      :                          :     :                 :              +- Exchange hashpartitioning(brand_id#6451, class_id#6452, category_id#6453, 20), ENSURE_REQUIREMENTS, [plan_id=54473]
      :                          :     :                 :                 +- *(79) HashAggregate(keys=[brand_id#6451, class_id#6452, category_id#6453], functions=[], output=[brand_id#6451, class_id#6452, category_id#6453])
      :                          :     :                 :                    +- *(79) Project [i_brand_id#6471 AS brand_id#6451, i_class_id#6473 AS class_id#6452, i_category_id#6475 AS category_id#6453]
      :                          :     :                 :                       +- *(79) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
      :                          :     :                 :                          :- *(79) Project [ss_sold_date_sk#414, i_brand_id#6471, i_class_id#6473, i_category_id#6475]
      :                          :     :                 :                          :  +- *(79) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#6464], Inner, BuildRight, false
      :                          :     :                 :                          :     :- *(79) Filter (isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414))
      :                          :     :                 :                          :     :  +- *(79) ColumnarToRow
      :                          :     :                 :                          :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
      :                          :     :                 :                          :     +- BroadcastQueryStage 88
      :                          :     :                 :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=52622]
      :                          :     :                 :                          :           +- *(69) SortMergeJoin [coalesce(i_brand_id#6471, 0), isnull(i_brand_id#6471), coalesce(i_class_id#6473, 0), isnull(i_class_id#6473), coalesce(i_category_id#6475, 0), isnull(i_category_id#6475)], [coalesce(i_brand_id#6493, 0), isnull(i_brand_id#6493), coalesce(i_class_id#6495, 0), isnull(i_class_id#6495), coalesce(i_category_id#6497, 0), isnull(i_category_id#6497)], LeftSemi
      :                          :     :                 :                          :              :- *(67) Sort [coalesce(i_brand_id#6471, 0) ASC NULLS FIRST, isnull(i_brand_id#6471) ASC NULLS FIRST, coalesce(i_class_id#6473, 0) ASC NULLS FIRST, isnull(i_class_id#6473) ASC NULLS FIRST, coalesce(i_category_id#6475, 0) ASC NULLS FIRST, isnull(i_category_id#6475) ASC NULLS FIRST], false, 0
      :                          :     :                 :                          :              :  +- ShuffleQueryStage 2
      :                          :     :                 :                          :              :     +- Exchange hashpartitioning(coalesce(i_brand_id#6471, 0), isnull(i_brand_id#6471), coalesce(i_class_id#6473, 0), isnull(i_class_id#6473), coalesce(i_category_id#6475, 0), isnull(i_category_id#6475), 20), ENSURE_REQUIREMENTS, [plan_id=43224]
      :                          :     :                 :                          :              :        +- *(3) Filter (((isnotnull(i_item_sk#6464) AND isnotnull(i_brand_id#6471)) AND isnotnull(i_class_id#6473)) AND isnotnull(i_category_id#6475))
      :                          :     :                 :                          :              :           +- *(3) ColumnarToRow
      :                          :     :                 :                          :              :              +- FileScan parquet default.item[i_item_sk#6464,i_brand_id#6471,i_class_id#6473,i_category_id#6475] Batched: true, DataFilters: [isnotnull(i_item_sk#6464), isnotnull(i_brand_id#6471), isnotnull(i_class_id#6473), isnotnull(i_c..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
      :                          :     :                 :                          :              +- *(68) Sort [coalesce(i_brand_id#6493, 0) ASC NULLS FIRST, isnull(i_brand_id#6493) ASC NULLS FIRST, coalesce(i_class_id#6495, 0) ASC NULLS FIRST, isnull(i_class_id#6495) ASC NULLS FIRST, coalesce(i_category_id#6497, 0) ASC NULLS FIRST, isnull(i_category_id#6497) ASC NULLS FIRST], false, 0
      :                          :     :                 :                          :                 +- ShuffleQueryStage 74
      :                          :     :                 :                          :                    +- Exchange hashpartitioning(coalesce(i_brand_id#6493, 0), isnull(i_brand_id#6493), coalesce(i_class_id#6495, 0), isnull(i_class_id#6495), coalesce(i_category_id#6497, 0), isnull(i_category_id#6497), 20), ENSURE_REQUIREMENTS, [plan_id=49886]
      :                          :     :                 :                          :                       +- *(45) Project [i_brand_id#6493, i_class_id#6495, i_category_id#6497]
      :                          :     :                 :                          :                          +- *(45) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#6508], Inner, BuildRight, false
      :                          :     :                 :                          :                             :- *(45) Project [cs_sold_date_sk#197, i_brand_id#6493, i_class_id#6495, i_category_id#6497]
      :                          :     :                 :                          :                             :  +- *(45) SortMergeJoin [cs_item_sk#212], [i_item_sk#6486], Inner
      :                          :     :                 :                          :                             :     :- *(43) Sort [cs_item_sk#212 ASC NULLS FIRST], false, 0
      :                          :     :                 :                          :                             :     :  +- ShuffleQueryStage 3
      :                          :     :                 :                          :                             :     :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=43241]
      :                          :     :                 :                          :                             :     :        +- *(4) Filter (isnotnull(cs_item_sk#212) AND isnotnull(cs_sold_date_sk#197))
      :                          :     :                 :                          :                             :     :           +- *(4) ColumnarToRow
      :                          :     :                 :                          :                             :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_item_sk#212] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>
      :                          :     :                 :                          :                             :     +- *(44) Sort [i_item_sk#6486 ASC NULLS FIRST], false, 0
      :                          :     :                 :                          :                             :        +- ShuffleQueryStage 4
      :                          :     :                 :                          :                             :           +- Exchange hashpartitioning(i_item_sk#6486, 20), ENSURE_REQUIREMENTS, [plan_id=43258]
      :                          :     :                 :                          :                             :              +- *(5) Filter isnotnull(i_item_sk#6486)
      :                          :     :                 :                          :                             :                 +- *(5) ColumnarToRow
      :                          :     :                 :                          :                             :                    +- FileScan parquet default.item[i_item_sk#6486,i_brand_id#6493,i_class_id#6495,i_category_id#6497] Batched: true, DataFilters: [isnotnull(i_item_sk#6486)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
      :                          :     :                 :                          :                             +- BroadcastQueryStage 5
      :                          :     :                 :                          :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43279]
      :                          :     :                 :                          :                                   +- *(6) Project [d_date_sk#6508]
      :                          :     :                 :                          :                                      +- *(6) Filter (((isnotnull(d_year#6514) AND (d_year#6514 >= 1999)) AND (d_year#6514 <= 2001)) AND isnotnull(d_date_sk#6508))
      :                          :     :                 :                          :                                         +- *(6) ColumnarToRow
      :                          :     :                 :                          :                                            +- FileScan parquet default.date_dim[d_date_sk#6508,d_year#6514] Batched: true, DataFilters: [isnotnull(d_year#6514), (d_year#6514 >= 1999), (d_year#6514 <= 2001), isnotnull(d_date_sk#6508)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_da..., ReadSchema: struct<d_date_sk:int,d_year:int>
      :                          :     :                 :                          +- BroadcastQueryStage 7
      :                          :     :                 :                             +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43279]
      :                          :     :                 +- BroadcastQueryStage 109
      :                          :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=56024]
      :                          :     :                       +- AQEShuffleRead local
      :                          :     :                          +- ShuffleQueryStage 81
      :                          :     :                             +- Exchange hashpartitioning(coalesce(i_brand_id#6543, 0), isnull(i_brand_id#6543), coalesce(i_class_id#6545, 0), isnull(i_class_id#6545), coalesce(i_category_id#6547, 0), isnull(i_category_id#6547), 20), ENSURE_REQUIREMENTS, [plan_id=51416]
      :                          :     :                                +- *(57) Project [i_brand_id#6543, i_class_id#6545, i_category_id#6547]
      :                          :     :                                   +- *(57) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#6558], Inner, BuildRight, false
      :                          :     :                                      :- *(57) Project [ws_sold_date_sk#163, i_brand_id#6543, i_class_id#6545, i_category_id#6547]
      :                          :     :                                      :  +- *(57) SortMergeJoin [ws_item_sk#166], [i_item_sk#6536], Inner
      :                          :     :                                      :     :- *(55) Sort [ws_item_sk#166 ASC NULLS FIRST], false, 0
      :                          :     :                                      :     :  +- ShuffleQueryStage 8
      :                          :     :                                      :     :     +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=43332]
      :                          :     :                                      :     :        +- *(8) Filter (isnotnull(ws_item_sk#166) AND isnotnull(ws_sold_date_sk#163))
      :                          :     :                                      :     :           +- *(8) ColumnarToRow
      :                          :     :                                      :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>
      :                          :     :                                      :     +- *(56) Sort [i_item_sk#6536 ASC NULLS FIRST], false, 0
      :                          :     :                                      :        +- ShuffleQueryStage 10
      :                          :     :                                      :           +- ReusedExchange [i_item_sk#6536, i_brand_id#6543, i_class_id#6545, i_category_id#6547], Exchange hashpartitioning(i_item_sk#6486, 20), ENSURE_REQUIREMENTS, [plan_id=43258]
      :                          :     :                                      +- BroadcastQueryStage 12
      :                          :     :                                         +- ReusedExchange [d_date_sk#6558], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43279]
      :                          :     +- BroadcastQueryStage 123
      :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=56788]
      :                          :           +- *(91) BroadcastHashJoin [i_item_sk#6784], [ss_item_sk#6454], LeftSemi, BuildRight, false
      :                          :              :- AQEShuffleRead local
      :                          :              :  +- ShuffleQueryStage 13
      :                          :              :     +- Exchange hashpartitioning(i_item_sk#6784, 20), ENSURE_REQUIREMENTS, [plan_id=43401]
      :                          :              :        +- *(11) Filter (((isnotnull(i_item_sk#6784) AND isnotnull(i_brand_id#6791)) AND isnotnull(i_class_id#6793)) AND isnotnull(i_category_id#6795))
      :                          :              :           +- *(11) ColumnarToRow
      :                          :              :              +- FileScan parquet default.item[i_item_sk#6784,i_brand_id#6791,i_class_id#6793,i_category_id#6795] Batched: true, DataFilters: [isnotnull(i_item_sk#6784), isnotnull(i_brand_id#6791), isnotnull(i_class_id#6793), isnotnull(i_c..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>
      :                          :              +- BroadcastQueryStage 118
      :                          :                 +- ReusedExchange [ss_item_sk#6454], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=56534]
      :                          +- BroadcastQueryStage 32
      :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=43627]
      :                                +- *(21) Project [d_date_sk#6806]
      :                                   +- *(21) Filter ((isnotnull(d_week_seq#6810) AND (d_week_seq#6810 = Subquery subquery#6443, [id=#42446])) AND isnotnull(d_date_sk#6806))
      :                                      :  +- Subquery subquery#6443, [id=#42446]
      :                                      :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(1) Project [d_week_seq#6922]
                                                      +- *(1) Filter (((((isnotnull(d_year#6924) AND isnotnull(d_moy#6926)) AND isnotnull(d_dom#6927)) AND (d_year#6924 = 2000)) AND (d_moy#6926 = 12)) AND (d_dom#6927 = 11))
                                                         +- *(1) ColumnarToRow
                                                            +- FileScan parquet default.date_dim[d_week_seq#6922,d_year#6924,d_moy#6926,d_dom#6927] Batched: true, DataFilters: [isnotnull(d_year#6924), isnotnull(d_moy#6926), isnotnull(d_dom#6927), (d_year#6924 = 2000), (d_m..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), ..., ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>
                                                   +- == Initial Plan ==
                                                      Project [d_week_seq#6922]
                                                      +- Filter (((((isnotnull(d_year#6924) AND isnotnull(d_moy#6926)) AND isnotnull(d_dom#6927)) AND (d_year#6924 = 2000)) AND (d_moy#6926 = 12)) AND (d_dom#6927 = 11))
                                                         +- FileScan parquet default.date_dim[d_week_seq#6922,d_year#6924,d_moy#6926,d_dom#6927] Batched: true, DataFilters: [isnotnull(d_year#6924), isnotnull(d_moy#6926), isnotnull(d_dom#6927), (d_year#6924 = 2000), (d_m..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), ..., ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>
      :                                      +- *(21) ColumnarToRow
      :                                         +- FileScan parquet default.date_dim[d_date_sk#6806,d_week_seq#6810] Batched: true, DataFilters: [isnotnull(d_week_seq#6810), isnotnull(d_date_sk#6806)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>
      +- *(96) Filter (isnotnull(sales#6446) AND (cast(sales#6446 as decimal(32,6)) > cast(ReusedSubquery Subquery subquery#6444, [id=#42440] as decimal(32,6))))
         :  +- ReusedSubquery Subquery subquery#6444, [id=#42440]
         +- *(96) HashAggregate(keys=[i_brand_id#6864, i_class_id#6866, i_category_id#6868], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#6844 as decimal(12,2))) * promote_precision(cast(ss_list_price#6846 as decimal(12,2)))), DecimalType(18,2))), count(1)], output=[channel#6445, i_brand_id#6864, i_class_id#6866, i_category_id#6868, sales#6446, number_sales#6447L])
            +- ShuffleQueryStage 127
               +- Exchange hashpartitioning(i_brand_id#6864, i_class_id#6866, i_category_id#6868, 20), ENSURE_REQUIREMENTS, [plan_id=57021]
                  +- *(94) HashAggregate(keys=[i_brand_id#6864, i_class_id#6866, i_category_id#6868], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#6844 as decimal(12,2))) * promote_precision(cast(ss_list_price#6846 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)], output=[i_brand_id#6864, i_class_id#6866, i_category_id#6868, sum#7016, isEmpty#7017, count#7018L])
                     +- *(94) Project [ss_quantity#6844, ss_list_price#6846, i_brand_id#6864, i_class_id#6866, i_category_id#6868]
                        +- *(94) BroadcastHashJoin [ss_sold_date_sk#6834], [d_date_sk#6879], Inner, BuildRight, false
                           :- *(94) Project [ss_sold_date_sk#6834, ss_quantity#6844, ss_list_price#6846, i_brand_id#6864, i_class_id#6866, i_category_id#6868]
                           :  +- *(94) BroadcastHashJoin [ss_item_sk#6836], [i_item_sk#6857], Inner, BuildRight, false
                           :     :- *(94) BroadcastHashJoin [ss_item_sk#6836], [ss_item_sk#6454], LeftSemi, BuildRight, false
                           :     :  :- AQEShuffleRead local
                           :     :  :  +- ShuffleQueryStage 34
                           :     :  :     +- ReusedExchange [ss_sold_date_sk#6834, ss_item_sk#6836, ss_quantity#6844, ss_list_price#6846], Exchange hashpartitioning(ss_item_sk#6763, 20), ENSURE_REQUIREMENTS, [plan_id=43192]
                           :     :  +- BroadcastQueryStage 120
                           :     :     +- ReusedExchange [ss_item_sk#6454], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=56534]
                           :     +- BroadcastQueryStage 125
                           :        +- ReusedExchange [i_item_sk#6857, i_brand_id#6864, i_class_id#6866, i_category_id#6868], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=56788]
                           +- BroadcastQueryStage 73
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=44375]
                                 +- *(42) Project [d_date_sk#6879]
                                    +- *(42) Filter ((isnotnull(d_week_seq#6883) AND (d_week_seq#6883 = Subquery subquery#6449, [id=#42532])) AND isnotnull(d_date_sk#6879))
                                       :  +- Subquery subquery#6449, [id=#42532]
                                       :     +- AdaptiveSparkPlan isFinalPlan=true
                                             +- == Final Plan ==
                                                *(1) Project [d_week_seq#6950]
                                                +- *(1) Filter (((((isnotnull(d_year#6952) AND isnotnull(d_moy#6954)) AND isnotnull(d_dom#6955)) AND (d_year#6952 = 1999)) AND (d_moy#6954 = 12)) AND (d_dom#6955 = 11))
                                                   +- *(1) ColumnarToRow
                                                      +- FileScan parquet default.date_dim[d_week_seq#6950,d_year#6952,d_moy#6954,d_dom#6955] Batched: true, DataFilters: [isnotnull(d_year#6952), isnotnull(d_moy#6954), isnotnull(d_dom#6955), (d_year#6952 = 1999), (d_m..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), ..., ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>
                                             +- == Initial Plan ==
                                                Project [d_week_seq#6950]
                                                +- Filter (((((isnotnull(d_year#6952) AND isnotnull(d_moy#6954)) AND isnotnull(d_dom#6955)) AND (d_year#6952 = 1999)) AND (d_moy#6954 = 12)) AND (d_dom#6955 = 11))
                                                   +- FileScan parquet default.date_dim[d_week_seq#6950,d_year#6952,d_moy#6954,d_dom#6955] Batched: true, DataFilters: [isnotnull(d_year#6952), isnotnull(d_moy#6954), isnotnull(d_dom#6955), (d_year#6952 = 1999), (d_m..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), ..., ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>
                                       +- *(42) ColumnarToRow
                                          +- FileScan parquet default.date_dim[d_date_sk#6879,d_week_seq#6883] Batched: true, DataFilters: [isnotnull(d_week_seq#6883), isnotnull(d_date_sk#6879)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>

==== q15 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ca_zip#3726 ASC NULLS FIRST], output=[ca_zip#3726,sum(cs_sales_price)#7094])
   +- *(8) HashAggregate(keys=[ca_zip#3726], functions=[sum(UnscaledValue(cs_sales_price#218))], output=[ca_zip#3726, sum(cs_sales_price)#7094])
      +- ShuffleQueryStage 4
         +- Exchange hashpartitioning(ca_zip#3726, 20), ENSURE_REQUIREMENTS, [plan_id=57860]
            +- *(7) HashAggregate(keys=[ca_zip#3726], functions=[partial_sum(UnscaledValue(cs_sales_price#218))], output=[ca_zip#3726, sum#7098L])
               +- *(7) Project [cs_sales_price#218, ca_zip#3726]
                  +- *(7) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                     :- *(7) Project [cs_sold_date_sk#197, cs_sales_price#218, ca_zip#3726]
                     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, ((substr(ca_zip#3726, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#3725 IN (CA,WA,GA)) OR (cs_sales_price#218 > 500.00)), false
                     :     :- *(7) Project [cs_sold_date_sk#197, cs_sales_price#218, c_current_addr_sk#85]
                     :     :  +- *(7) SortMergeJoin [cs_bill_customer_sk#200], [c_customer_sk#81], Inner
                     :     :     :- *(5) Sort [cs_bill_customer_sk#200 ASC NULLS FIRST], false, 0
                     :     :     :  +- ShuffleQueryStage 0
                     :     :     :     +- Exchange hashpartitioning(cs_bill_customer_sk#200, 20), ENSURE_REQUIREMENTS, [plan_id=57556]
                     :     :     :        +- *(1) Filter (isnotnull(cs_bill_customer_sk#200) AND isnotnull(cs_sold_date_sk#197))
                     :     :     :           +- *(1) ColumnarToRow
                     :     :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_sales_price#218] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#200), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>
                     :     :     +- *(6) Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0
                     :     :        +- ShuffleQueryStage 1
                     :     :           +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=57573]
                     :     :              +- *(2) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
                     :     :                 +- *(2) ColumnarToRow
                     :     :                    +- FileScan parquet default.customer[c_customer_sk#81,c_current_addr_sk#85] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
                     :     +- BroadcastQueryStage 2
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=57592]
                     :           +- *(3) Filter isnotnull(ca_address_sk#3717)
                     :              +- *(3) ColumnarToRow
                     :                 +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725,ca_zip#3726] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>
                     +- BroadcastQueryStage 3
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=57611]
                           +- *(4) Project [d_date_sk#24]
                              +- *(4) Filter ((((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND (d_qoy#34 = 2)) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                                 +- *(4) ColumnarToRow
                                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_qoy#34), isnotnull(d_year#30), (d_qoy#34 = 2), (d_year#30 = 2001), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

==== q16 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(12) HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_ship_cost#225)), sum(UnscaledValue(cs_net_profit#230)), count(distinct cs_order_number#214)], output=[order count #7103L, total shipping cost #7104, total net profit #7105])
   +- ShuffleQueryStage 6
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=58824]
         +- *(11) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#225)), merge_sum(UnscaledValue(cs_net_profit#230)), partial_count(distinct cs_order_number#214)], output=[sum#7182L, sum#7184L, count#7187L])
            +- *(11) HashAggregate(keys=[cs_order_number#214], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#225)), merge_sum(UnscaledValue(cs_net_profit#230))], output=[cs_order_number#214, sum#7182L, sum#7184L])
               +- *(11) HashAggregate(keys=[cs_order_number#214], functions=[partial_sum(UnscaledValue(cs_ext_ship_cost#225)), partial_sum(UnscaledValue(cs_net_profit#230))], output=[cs_order_number#214, sum#7182L, sum#7184L])
                  +- *(11) Project [cs_order_number#214, cs_ext_ship_cost#225, cs_net_profit#230]
                     +- *(11) BroadcastHashJoin [cs_call_center_sk#208], [cc_call_center_sk#7108], Inner, BuildRight, false
                        :- *(11) Project [cs_call_center_sk#208, cs_order_number#214, cs_ext_ship_cost#225, cs_net_profit#230]
                        :  +- *(11) BroadcastHashJoin [cs_ship_addr_sk#207], [ca_address_sk#3717], Inner, BuildRight, false
                        :     :- *(11) Project [cs_ship_addr_sk#207, cs_call_center_sk#208, cs_order_number#214, cs_ext_ship_cost#225, cs_net_profit#230]
                        :     :  +- *(11) BroadcastHashJoin [cs_ship_date_sk#199], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :- *(11) SortMergeJoin [cs_order_number#214], [cr_order_number#3307], LeftAnti
                        :     :     :  :- *(9) Project [cs_ship_date_sk#199, cs_ship_addr_sk#207, cs_call_center_sk#208, cs_order_number#214, cs_ext_ship_cost#225, cs_net_profit#230]
                        :     :     :  :  +- *(9) SortMergeJoin [cs_order_number#214], [cs_order_number#7156], LeftSemi, NOT (cs_warehouse_sk#211 = cs_warehouse_sk#7153)
                        :     :     :  :     :- *(7) Sort [cs_order_number#214 ASC NULLS FIRST], false, 0
                        :     :     :  :     :  +- ShuffleQueryStage 0
                        :     :     :  :     :     +- Exchange hashpartitioning(cs_order_number#214, 20), ENSURE_REQUIREMENTS, [plan_id=58099]
                        :     :     :  :     :        +- *(1) Filter ((isnotnull(cs_ship_date_sk#199) AND isnotnull(cs_ship_addr_sk#207)) AND isnotnull(cs_call_center_sk#208))
                        :     :     :  :     :           +- *(1) ColumnarToRow
                        :     :     :  :     :              +- FileScan parquet default.catalog_sales[cs_ship_date_sk#199,cs_ship_addr_sk#207,cs_call_center_sk#208,cs_warehouse_sk#211,cs_order_number#214,cs_ext_ship_cost#225,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_ship_date_sk#199), isnotnull(cs_ship_addr_sk#207), isnotnull(cs_call_center_sk#208)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order...
                        :     :     :  :     +- *(8) Sort [cs_order_number#7156 ASC NULLS FIRST], false, 0
                        :     :     :  :        +- ShuffleQueryStage 1
                        :     :     :  :           +- Exchange hashpartitioning(cs_order_number#7156, 20), ENSURE_REQUIREMENTS, [plan_id=58114]
                        :     :     :  :              +- *(2) ColumnarToRow
                        :     :     :  :                 +- FileScan parquet default.catalog_sales[cs_warehouse_sk#7153,cs_order_number#7156] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:int>
                        :     :     :  +- *(10) Sort [cr_order_number#3307 ASC NULLS FIRST], false, 0
                        :     :     :     +- ShuffleQueryStage 2
                        :     :     :        +- Exchange hashpartitioning(cr_order_number#3307, 20), ENSURE_REQUIREMENTS, [plan_id=58129]
                        :     :     :           +- *(3) ColumnarToRow
                        :     :     :              +- FileScan parquet default.catalog_returns[cr_order_number#3307] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cr_order_number:int>
                        :     :     +- BroadcastQueryStage 3
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=58147]
                        :     :           +- *(4) Project [d_date_sk#24]
                        :     :              +- *(4) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2002-02-01)) AND (d_date#26 <= 2002-04-02)) AND isnotnull(d_date_sk#24))
                        :     :                 +- *(4) ColumnarToRow
                        :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2002-02-01), (d_date#26 <= 2002-04-02), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-02-01), LessThanOrEqual(d_date,2002-04-02), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                        :     +- BroadcastQueryStage 4
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=58168]
                        :           +- *(5) Project [ca_address_sk#3717]
                        :              +- *(5) Filter ((isnotnull(ca_state#3725) AND (ca_state#3725 = GA)) AND isnotnull(ca_address_sk#3717))
                        :                 +- *(5) ColumnarToRow
                        :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725] Batched: true, DataFilters: [isnotnull(ca_state#3725), (ca_state#3725 = GA), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
                        +- BroadcastQueryStage 5
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=58189]
                              +- *(6) Project [cc_call_center_sk#7108]
                                 +- *(6) Filter ((isnotnull(cc_county#7133) AND (cc_county#7133 = Williamson County)) AND isnotnull(cc_call_center_sk#7108))
                                    +- *(6) ColumnarToRow
                                       +- FileScan parquet default.call_center[cc_call_center_sk#7108,cc_county#7133] Batched: true, DataFilters: [isnotnull(cc_county#7133), (cc_county#7133 = Williamson County), isnotnull(cc_call_center_sk#7108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_county), EqualTo(cc_county,Williamson County), IsNotNull(cc_call_center_sk)], ReadSchema: struct<cc_call_center_sk:int,cc_county:string>

==== q17 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(15) HashAggregate(keys=[i_item_id#438, i_item_desc#441, s_state#76], functions=[count(ss_quantity#424), avg(ss_quantity#424), stddev_samp(cast(ss_quantity#424 as double)), count(sr_return_quantity#14), avg(sr_return_quantity#14), stddev_samp(cast(sr_return_quantity#14 as double)), count(cs_quantity#215), avg(cs_quantity#215), stddev_samp(cast(cs_quantity#215 as double))], output=[i_item_id#438, i_item_desc#441, s_state#76, store_sales_quantitycount#7281L, store_sales_quantityave#7282, store_sales_quantitystdev#7283, store_sales_quantitycov#7284, as_store_returns_quantitycount#7285L, as_store_returns_quantityave#7286, as_store_returns_quantitystdev#7287, store_returns_quantitycov#7288, catalog_sales_quantitycount#7289L, catalog_sales_quantityave#7290, catalog_sales_quantitystdev#7291, catalog_sales_quantitycov#7292])
   +- ShuffleQueryStage 10
      +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, s_state#76, 20), ENSURE_REQUIREMENTS, [plan_id=60151]
         +- *(14) HashAggregate(keys=[i_item_id#438, i_item_desc#441, s_state#76], functions=[partial_count(ss_quantity#424), partial_avg(ss_quantity#424), partial_stddev_samp(cast(ss_quantity#424 as double)), partial_count(sr_return_quantity#14), partial_avg(sr_return_quantity#14), partial_stddev_samp(cast(sr_return_quantity#14 as double)), partial_count(cs_quantity#215), partial_avg(cs_quantity#215), partial_stddev_samp(cast(cs_quantity#215 as double))], output=[i_item_id#438, i_item_desc#441, s_state#76, count#7583L, sum#7584, count#7585L, n#7468, avg#7469, m2#7470, count#7586L, sum#7587, count#7588L, n#7484, avg#7485, m2#7486, count#7589L, sum#7590, count#7591L, n#7500, avg#7501, m2#7502])
            +- *(14) Project [ss_quantity#424, sr_return_quantity#14, cs_quantity#215, s_state#76, i_item_id#438, i_item_desc#441]
               +- *(14) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :- *(14) Project [ss_item_sk#416, ss_quantity#424, sr_return_quantity#14, cs_quantity#215, s_state#76]
                  :  +- *(14) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                  :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_return_quantity#14, cs_quantity#215]
                  :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#7321], Inner, BuildRight, false
                  :     :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_return_quantity#14, cs_sold_date_sk#197, cs_quantity#215]
                  :     :     :  +- *(14) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#7293], Inner, BuildRight, false
                  :     :     :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_returned_date_sk#4, sr_return_quantity#14, cs_sold_date_sk#197, cs_quantity#215]
                  :     :     :     :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :     :     :- *(14) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_returned_date_sk#4, sr_return_quantity#14, cs_sold_date_sk#197, cs_quantity#215]
                  :     :     :     :     :  +- *(14) SortMergeJoin [sr_customer_sk#7, sr_item_sk#6], [cs_bill_customer_sk#200, cs_item_sk#212], Inner
                  :     :     :     :     :     :- *(12) Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :  +- ShuffleQueryStage 9
                  :     :     :     :     :     :     +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=59906]
                  :     :     :     :     :     :        +- *(11) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_returned_date_sk#4, sr_item_sk#6, sr_customer_sk#7, sr_return_quantity#14]
                  :     :     :     :     :     :           +- *(11) SortMergeJoin [ss_customer_sk#417, ss_item_sk#416, ss_ticket_number#423], [sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13], Inner
                  :     :     :     :     :     :              :- *(9) Sort [ss_customer_sk#417 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST, ss_ticket_number#423 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :              :  +- ShuffleQueryStage 0
                  :     :     :     :     :     :              :     +- Exchange hashpartitioning(ss_customer_sk#417, ss_item_sk#416, ss_ticket_number#423, 20), ENSURE_REQUIREMENTS, [plan_id=59154]
                  :     :     :     :     :     :              :        +- *(1) Filter ((((isnotnull(ss_customer_sk#417) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_ticket_number#423)) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
                  :     :     :     :     :     :              :           +- *(1) ColumnarToRow
                  :     :     :     :     :     :              :              +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ticket_number#423,ss_quantity#424] Batched: true, DataFilters: [isnotnull(ss_customer_sk#417), isnotnull(ss_item_sk#416), isnotnull(ss_ticket_number#423), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int...
                  :     :     :     :     :     :              +- *(10) Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST, sr_ticket_number#13 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :                 +- ShuffleQueryStage 1
                  :     :     :     :     :     :                    +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13, 20), ENSURE_REQUIREMENTS, [plan_id=59171]
                  :     :     :     :     :     :                       +- *(2) Filter (((isnotnull(sr_customer_sk#7) AND isnotnull(sr_item_sk#6)) AND isnotnull(sr_ticket_number#13)) AND isnotnull(sr_returned_date_sk#4))
                  :     :     :     :     :     :                          +- *(2) ColumnarToRow
                  :     :     :     :     :     :                             +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_item_sk#6,sr_customer_sk#7,sr_ticket_number#13,sr_return_quantity#14] Batched: true, DataFilters: [isnotnull(sr_customer_sk#7), isnotnull(sr_item_sk#6), isnotnull(sr_ticket_number#13), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_retu..., ReadSchema: struct<sr_returned_date_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_q...
                  :     :     :     :     :     +- *(13) Sort [cs_bill_customer_sk#200 ASC NULLS FIRST, cs_item_sk#212 ASC NULLS FIRST], false, 0
                  :     :     :     :     :        +- ShuffleQueryStage 2
                  :     :     :     :     :           +- Exchange hashpartitioning(cs_bill_customer_sk#200, cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=59192]
                  :     :     :     :     :              +- *(3) Filter ((isnotnull(cs_bill_customer_sk#200) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_date_sk#197))
                  :     :     :     :     :                 +- *(3) ColumnarToRow
                  :     :     :     :     :                    +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212,cs_quantity#215] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#200), isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>
                  :     :     :     :     +- BroadcastQueryStage 3
                  :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=59213]
                  :     :     :     :           +- *(4) Project [d_date_sk#24]
                  :     :     :     :              +- *(4) Filter ((isnotnull(d_quarter_name#39) AND (d_quarter_name#39 = 2001Q1)) AND isnotnull(d_date_sk#24))
                  :     :     :     :                 +- *(4) ColumnarToRow
                  :     :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_quarter_name#39] Batched: true, DataFilters: [isnotnull(d_quarter_name#39), (d_quarter_name#39 = 2001Q1), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>
                  :     :     :     +- BroadcastQueryStage 4
                  :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=59234]
                  :     :     :           +- *(5) Project [d_date_sk#7293]
                  :     :     :              +- *(5) Filter (d_quarter_name#7308 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#7293))
                  :     :     :                 +- *(5) ColumnarToRow
                  :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#7293,d_quarter_name#7308] Batched: true, DataFilters: [d_quarter_name#7308 IN (2001Q1,2001Q2,2001Q3), isnotnull(d_date_sk#7293)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>
                  :     :     +- BroadcastQueryStage 6
                  :     :        +- ReusedExchange [d_date_sk#7321], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=59234]
                  :     +- BroadcastQueryStage 7
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=59276]
                  :           +- *(7) Filter isnotnull(s_store_sk#52)
                  :              +- *(7) ColumnarToRow
                  :                 +- FileScan parquet default.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                  +- BroadcastQueryStage 8
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=59293]
                        +- *(8) Filter isnotnull(i_item_sk#437)
                           +- *(8) ColumnarToRow
                              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

==== q18 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ca_country#7850 ASC NULLS FIRST,ca_state#7851 ASC NULLS FIRST,ca_county#7852 ASC NULLS FIRST,i_item_id#7849 ASC NULLS FIRST], output=[i_item_id#7849,ca_country#7850,ca_state#7851,ca_county#7852,agg1#7820,agg2#7821,agg3#7822,agg4#7823,agg5#7824,agg6#7825,agg7#7826])
   +- *(11) HashAggregate(keys=[i_item_id#7849, ca_country#7850, ca_state#7851, ca_county#7852, spark_grouping_id#7848L], functions=[avg(cast(cs_quantity#215 as decimal(12,2))), avg(cast(cs_list_price#217 as decimal(12,2))), avg(cast(cs_coupon_amt#224 as decimal(12,2))), avg(cast(cs_sales_price#218 as decimal(12,2))), avg(cast(cs_net_profit#230 as decimal(12,2))), avg(cast(c_birth_year#94 as decimal(12,2))), avg(cast(cd_dep_count#3639 as decimal(12,2)))], output=[i_item_id#7849, ca_country#7850, ca_state#7851, ca_county#7852, agg1#7820, agg2#7821, agg3#7822, agg4#7823, agg5#7824, agg6#7825, agg7#7826])
      +- ShuffleQueryStage 7
         +- Exchange hashpartitioning(i_item_id#7849, ca_country#7850, ca_state#7851, ca_county#7852, spark_grouping_id#7848L, 20), ENSURE_REQUIREMENTS, [plan_id=61255]
            +- *(10) HashAggregate(keys=[i_item_id#7849, ca_country#7850, ca_state#7851, ca_county#7852, spark_grouping_id#7848L], functions=[partial_avg(cast(cs_quantity#215 as decimal(12,2))), partial_avg(cast(cs_list_price#217 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#224 as decimal(12,2))), partial_avg(cast(cs_sales_price#218 as decimal(12,2))), partial_avg(cast(cs_net_profit#230 as decimal(12,2))), partial_avg(cast(c_birth_year#94 as decimal(12,2))), partial_avg(cast(cd_dep_count#3639 as decimal(12,2)))], output=[i_item_id#7849, ca_country#7850, ca_state#7851, ca_county#7852, spark_grouping_id#7848L, sum#7878, count#7879L, sum#7880, count#7881L, sum#7882, count#7883L, sum#7884, count#7885L, sum#7886, count#7887L, sum#7888, count#7889L, sum#7890, count#7891L])
               +- *(10) Expand [[cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, i_item_id#438, ca_country#3727, ca_state#3725, ca_county#3724, 0], [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, i_item_id#438, ca_country#3727, ca_state#3725, null, 1], [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, i_item_id#438, ca_country#3727, null, null, 3], [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, i_item_id#438, null, null, null, 7], [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, null, null, null, null, 15]], [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, i_item_id#7849, ca_country#7850, ca_state#7851, ca_county#7852, spark_grouping_id#7848L]
                  +- *(10) Project [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, i_item_id#438, ca_country#3727, ca_state#3725, ca_county#3724]
                     +- *(10) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#437], Inner, BuildRight, false
                        :- *(10) Project [cs_item_sk#212, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, ca_county#3724, ca_state#3725, ca_country#3727]
                        :  +- *(10) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                        :     :- *(10) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_birth_year#94, ca_county#3724, ca_state#3725, ca_country#3727]
                        :     :  +- *(10) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
                        :     :     :- *(10) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_current_addr_sk#85, c_birth_year#94]
                        :     :     :  +- *(10) BroadcastHashJoin [c_current_cdemo_sk#83], [cd_demo_sk#7827], Inner, BuildRight, false
                        :     :     :     :- *(10) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639, c_current_cdemo_sk#83, c_current_addr_sk#85, c_birth_year#94]
                        :     :     :     :  +- *(10) BroadcastHashJoin [cs_bill_customer_sk#200], [c_customer_sk#81], Inner, BuildRight, false
                        :     :     :     :     :- *(10) Project [cs_sold_date_sk#197, cs_bill_customer_sk#200, cs_item_sk#212, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, cs_net_profit#230, cd_dep_count#3639]
                        :     :     :     :     :  +- *(10) SortMergeJoin [cs_bill_cdemo_sk#201], [cd_demo_sk#3633], Inner
                        :     :     :     :     :     :- *(8) Sort [cs_bill_cdemo_sk#201 ASC NULLS FIRST], false, 0
                        :     :     :     :     :     :  +- ShuffleQueryStage 0
                        :     :     :     :     :     :     +- Exchange hashpartitioning(cs_bill_cdemo_sk#201, 20), ENSURE_REQUIREMENTS, [plan_id=60447]
                        :     :     :     :     :     :        +- *(1) Filter (((isnotnull(cs_bill_cdemo_sk#201) AND isnotnull(cs_bill_customer_sk#200)) AND isnotnull(cs_sold_date_sk#197)) AND isnotnull(cs_item_sk#212))
                        :     :     :     :     :     :           +- *(1) ColumnarToRow
                        :     :     :     :     :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_bill_cdemo_sk#201,cs_item_sk#212,cs_quantity#215,cs_list_price#217,cs_sales_price#218,cs_coupon_amt#224,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_bill_cdemo_sk#201), isnotnull(cs_bill_customer_sk#200), isnotnull(cs_sold_date_sk#1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNu..., ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantit...
                        :     :     :     :     :     +- *(9) Sort [cd_demo_sk#3633 ASC NULLS FIRST], false, 0
                        :     :     :     :     :        +- ShuffleQueryStage 1
                        :     :     :     :     :           +- Exchange hashpartitioning(cd_demo_sk#3633, 20), ENSURE_REQUIREMENTS, [plan_id=60466]
                        :     :     :     :     :              +- *(2) Project [cd_demo_sk#3633, cd_dep_count#3639]
                        :     :     :     :     :                 +- *(2) Filter ((((isnotnull(cd_gender#3634) AND isnotnull(cd_education_status#3636)) AND (cd_gender#3634 = F)) AND (cd_education_status#3636 = Unknown             )) AND isnotnull(cd_demo_sk#3633))
                        :     :     :     :     :                    +- *(2) ColumnarToRow
                        :     :     :     :     :                       +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_gender#3634,cd_education_status#3636,cd_dep_count#3639] Batched: true, DataFilters: [isnotnull(cd_gender#3634), isnotnull(cd_education_status#3636), (cd_gender#3634 = F), (cd_educat..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_education..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>
                        :     :     :     :     +- BroadcastQueryStage 2
                        :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=60489]
                        :     :     :     :           +- *(3) Project [c_customer_sk#81, c_current_cdemo_sk#83, c_current_addr_sk#85, c_birth_year#94]
                        :     :     :     :              +- *(3) Filter (((c_birth_month#93 IN (1,6,8,9,12,2) AND isnotnull(c_customer_sk#81)) AND isnotnull(c_current_cdemo_sk#83)) AND isnotnull(c_current_addr_sk#85))
                        :     :     :     :                 +- *(3) ColumnarToRow
                        :     :     :     :                    +- FileScan parquet default.customer[c_customer_sk#81,c_current_cdemo_sk#83,c_current_addr_sk#85,c_birth_month#93,c_birth_year#94] Batched: true, DataFilters: [c_birth_month#93 IN (1,6,8,9,12,2), isnotnull(c_customer_sk#81), isnotnull(c_current_cdemo_sk#83..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [In(c_birth_month, [1,12,2,6,8,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNo..., ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_y...
                        :     :     :     +- BroadcastQueryStage 3
                        :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=60508]
                        :     :     :           +- *(4) Filter isnotnull(cd_demo_sk#7827)
                        :     :     :              +- *(4) ColumnarToRow
                        :     :     :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#7827] Batched: true, DataFilters: [isnotnull(cd_demo_sk#7827)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int>
                        :     :     +- BroadcastQueryStage 4
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=60525]
                        :     :           +- *(5) Filter (ca_state#3725 IN (MS,IN,ND,OK,NM,VA) AND isnotnull(ca_address_sk#3717))
                        :     :              +- *(5) ColumnarToRow
                        :     :                 +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_county#3724,ca_state#3725,ca_country#3727] Batched: true, DataFilters: [ca_state#3725 IN (MS,IN,ND,OK,NM,VA), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [In(ca_state, [IN,MS,ND,NM,OK,VA]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>
                        :     +- BroadcastQueryStage 5
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=60544]
                        :           +- *(6) Project [d_date_sk#24]
                        :              +- *(6) Filter ((isnotnull(d_year#30) AND (d_year#30 = 1998)) AND isnotnull(d_date_sk#24))
                        :                 +- *(6) ColumnarToRow
                        :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 1998), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                        +- BroadcastQueryStage 6
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=60563]
                              +- *(7) Filter isnotnull(i_item_sk#437)
                                 +- *(7) ColumnarToRow
                                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>

==== q19 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ext_price#7964 DESC NULLS LAST,brand#7963 ASC NULLS FIRST,brand_id#7962 ASC NULLS FIRST,i_manufact_id#450 ASC NULLS FIRST,i_manufact#451 ASC NULLS FIRST], output=[brand_id#7962,brand#7963,i_manufact_id#450,i_manufact#451,ext_price#7964])
   +- *(7) HashAggregate(keys=[i_brand#445, i_brand_id#444, i_manufact_id#450, i_manufact#451], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[brand_id#7962, brand#7963, i_manufact_id#450, i_manufact#451, ext_price#7964])
      +- ShuffleQueryStage 5
         +- Exchange hashpartitioning(i_brand#445, i_brand_id#444, i_manufact_id#450, i_manufact#451, 20), ENSURE_REQUIREMENTS, [plan_id=61988]
            +- *(6) HashAggregate(keys=[i_brand#445, i_brand_id#444, i_manufact_id#450, i_manufact#451], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_brand#445, i_brand_id#444, i_manufact_id#450, i_manufact#451, sum#7972L])
               +- *(6) Project [ss_ext_sales_price#429, i_brand_id#444, i_brand#445, i_manufact_id#450, i_manufact#451]
                  +- *(6) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, NOT (substr(ca_zip#3726, 1, 5) = substr(s_zip#77, 1, 5)), false
                     :- *(6) Project [ss_store_sk#421, ss_ext_sales_price#429, i_brand_id#444, i_brand#445, i_manufact_id#450, i_manufact#451, ca_zip#3726]
                     :  +- *(6) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
                     :     :- *(6) Project [ss_store_sk#421, ss_ext_sales_price#429, i_brand_id#444, i_brand#445, i_manufact_id#450, i_manufact#451, c_current_addr_sk#85]
                     :     :  +- *(6) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
                     :     :     :- *(6) Project [ss_customer_sk#417, ss_store_sk#421, ss_ext_sales_price#429, i_brand_id#444, i_brand#445, i_manufact_id#450, i_manufact#451]
                     :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :     :     :     :- *(6) Project [ss_item_sk#416, ss_customer_sk#417, ss_store_sk#421, ss_ext_sales_price#429]
                     :     :     :     :  +- *(6) BroadcastHashJoin [d_date_sk#24], [ss_sold_date_sk#414], Inner, BuildLeft, false
                     :     :     :     :     :- BroadcastQueryStage 0
                     :     :     :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=61507]
                     :     :     :     :     :     +- *(1) Project [d_date_sk#24]
                     :     :     :     :     :        +- *(1) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 11)) AND (d_year#30 = 1998)) AND isnotnull(d_date_sk#24))
                     :     :     :     :     :           +- *(1) ColumnarToRow
                     :     :     :     :     :              +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 11), (d_year#30 = 1998), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :     :     :     :     +- *(6) Filter (((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_customer_sk#417)) AND isnotnull(ss_store_sk#421))
                     :     :     :     :        +- *(6) ColumnarToRow
                     :     :     :     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416), isnotnull(ss_customer_sk#417), isnotn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:d...
                     :     :     :     +- BroadcastQueryStage 1
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=61528]
                     :     :     :           +- *(2) Project [i_item_sk#437, i_brand_id#444, i_brand#445, i_manufact_id#450, i_manufact#451]
                     :     :     :              +- *(2) Filter ((isnotnull(i_manager_id#457) AND (i_manager_id#457 = 8)) AND isnotnull(i_item_sk#437))
                     :     :     :                 +- *(2) ColumnarToRow
                     :     :     :                    +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_brand#445,i_manufact_id#450,i_manufact#451,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_manager_id#457), (i_manager_id#457 = 8), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_...
                     :     :     +- BroadcastQueryStage 2
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=61547]
                     :     :           +- *(3) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
                     :     :              +- *(3) ColumnarToRow
                     :     :                 +- FileScan parquet default.customer[c_customer_sk#81,c_current_addr_sk#85] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
                     :     +- BroadcastQueryStage 3
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=61564]
                     :           +- *(4) Filter (isnotnull(ca_address_sk#3717) AND isnotnull(ca_zip#3726))
                     :              +- *(4) ColumnarToRow
                     :                 +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_zip#3726] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717), isnotnull(ca_zip#3726)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                     +- BroadcastQueryStage 4
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=61581]
                           +- *(5) Filter (isnotnull(s_zip#77) AND isnotnull(s_store_sk#52))
                              +- *(5) ColumnarToRow
                                 +- FileScan parquet default.store[s_store_sk#52,s_zip#77] Batched: true, DataFilters: [isnotnull(s_zip#77), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_zip:string>


==== q20 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_category#449 ASC NULLS FIRST,i_class#447 ASC NULLS FIRST,i_item_id#438 ASC NULLS FIRST,i_item_desc#441 ASC NULLS FIRST,revenueratio#7977 ASC NULLS FIRST], output=[i_item_desc#441,i_category#449,i_class#447,i_current_price#442,itemrevenue#7976,revenueratio#7977])
   +- *(9) Project [i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#7976, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#7982) * 100.00), DecimalType(21,2)) as decimal(27,2))) / promote_precision(_we0#7984)), DecimalType(38,17)) AS revenueratio#7977, i_item_id#438]
      +- Window [sum(_w1#7983) windowspecdefinition(i_class#447, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#7984], [i_class#447]
         +- *(8) Sort [i_class#447 ASC NULLS FIRST], false, 0
            +- ShuffleQueryStage 4
               +- Exchange hashpartitioning(i_class#447, 20), ENSURE_REQUIREMENTS, [plan_id=62464]
                  +- *(7) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442], functions=[sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#7976, _w0#7982, _w1#7983, i_item_id#438])
                     +- ShuffleQueryStage 3
                        +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442, 20), ENSURE_REQUIREMENTS, [plan_id=62411]
                           +- *(6) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442, sum#7992L])
                              +- *(6) Project [cs_ext_sales_price#220, i_item_id#438, i_item_desc#441, i_current_price#442, i_class#447, i_category#449]
                                 +- *(6) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                                    :- *(6) Project [cs_sold_date_sk#197, cs_ext_sales_price#220, i_item_id#438, i_item_desc#441, i_current_price#442, i_class#447, i_category#449]
                                    :  +- *(6) SortMergeJoin [cs_item_sk#212], [i_item_sk#437], Inner
                                    :     :- *(4) Sort [cs_item_sk#212 ASC NULLS FIRST], false, 0
                                    :     :  +- ShuffleQueryStage 0
                                    :     :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=62164]
                                    :     :        +- *(1) Filter (isnotnull(cs_item_sk#212) AND isnotnull(cs_sold_date_sk#197))
                                    :     :           +- *(1) ColumnarToRow
                                    :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
                                    :     +- *(5) Sort [i_item_sk#437 ASC NULLS FIRST], false, 0
                                    :        +- ShuffleQueryStage 1
                                    :           +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=62181]
                                    :              +- *(2) Filter (i_category#449 IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#437))
                                    :                 +- *(2) ColumnarToRow
                                    :                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441,i_current_price#442,i_class#447,i_category#449] Batched: true, DataFilters: [i_category#449 IN (Sports                                            ,Books                     ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books                                             ,Home                         ..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...
                                    +- BroadcastQueryStage 2
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=62202]
                                          +- *(3) Project [d_date_sk#24]
                                             +- *(3) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 1999-02-22)) AND (d_date#26 <= 1999-03-24)) AND isnotnull(d_date_sk#24))
                                                +- *(3) ColumnarToRow
                                                   +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 1999-02-22), (d_date#26 <= 1999-03-24), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>

==== q21 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[w_warehouse_name#8011 ASC NULLS FIRST,i_item_id#438 ASC NULLS FIRST], output=[w_warehouse_name#8011,i_item_id#438,inv_before#8003L,inv_after#8004L])
   +- *(5) Filter (CASE WHEN (inv_before#8003L > 0) THEN ((cast(inv_after#8004L as double) / cast(inv_before#8003L as double)) >= 0.666667) END AND CASE WHEN (inv_before#8003L > 0) THEN ((cast(inv_after#8004L as double) / cast(inv_before#8003L as double)) <= 1.5) END)
      +- *(5) HashAggregate(keys=[w_warehouse_name#8011, i_item_id#438], functions=[sum(CASE WHEN (d_date#26 < 2000-03-11) THEN inv_quantity_on_hand#8008 ELSE 0 END), sum(CASE WHEN (d_date#26 >= 2000-03-11) THEN inv_quantity_on_hand#8008 ELSE 0 END)], output=[w_warehouse_name#8011, i_item_id#438, inv_before#8003L, inv_after#8004L])
         +- ShuffleQueryStage 3
            +- Exchange hashpartitioning(w_warehouse_name#8011, i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=62883]
               +- *(4) HashAggregate(keys=[w_warehouse_name#8011, i_item_id#438], functions=[partial_sum(CASE WHEN (d_date#26 < 2000-03-11) THEN inv_quantity_on_hand#8008 ELSE 0 END), partial_sum(CASE WHEN (d_date#26 >= 2000-03-11) THEN inv_quantity_on_hand#8008 ELSE 0 END)], output=[w_warehouse_name#8011, i_item_id#438, sum#8033L, sum#8034L])
                  +- *(4) Project [inv_quantity_on_hand#8008, w_warehouse_name#8011, i_item_id#438, d_date#26]
                     +- *(4) BroadcastHashJoin [inv_date_sk#8005], [d_date_sk#24], Inner, BuildRight, false
                        :- *(4) Project [inv_date_sk#8005, inv_quantity_on_hand#8008, w_warehouse_name#8011, i_item_id#438]
                        :  +- *(4) BroadcastHashJoin [inv_item_sk#8006], [i_item_sk#437], Inner, BuildRight, false
                        :     :- *(4) Project [inv_date_sk#8005, inv_item_sk#8006, inv_quantity_on_hand#8008, w_warehouse_name#8011]
                        :     :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#8007], [w_warehouse_sk#8009], Inner, BuildRight, false
                        :     :     :- *(4) Filter ((isnotnull(inv_warehouse_sk#8007) AND isnotnull(inv_item_sk#8006)) AND isnotnull(inv_date_sk#8005))
                        :     :     :  +- *(4) ColumnarToRow
                        :     :     :     +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_warehouse_sk#8007,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_warehouse_sk#8007), isnotnull(inv_item_sk#8006), isnotnull(inv_date_sk#8005)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
                        :     :     +- BroadcastQueryStage 0
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=62634]
                        :     :           +- *(1) Filter isnotnull(w_warehouse_sk#8009)
                        :     :              +- *(1) ColumnarToRow
                        :     :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
                        :     +- BroadcastQueryStage 1
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=62653]
                        :           +- *(2) Project [i_item_sk#437, i_item_id#438]
                        :              +- *(2) Filter (((isnotnull(i_current_price#442) AND (i_current_price#442 >= 0.99)) AND (i_current_price#442 <= 1.49)) AND isnotnull(i_item_sk#437))
                        :                 +- *(2) ColumnarToRow
                        :                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_current_price#442] Batched: true, DataFilters: [isnotnull(i_current_price#442), (i_current_price#442 >= 0.99), (i_current_price#442 <= 1.49), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>
                        +- BroadcastQueryStage 2
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=62672]
                              +- *(3) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-02-10)) AND (d_date#26 <= 2000-04-10)) AND isnotnull(d_date_sk#24))
                                 +- *(3) ColumnarToRow
                                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-02-10), (d_date#26 <= 2000-04-10), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>

==== q22 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[qoh#8041 ASC NULLS FIRST,i_product_name#8048 ASC NULLS FIRST,i_brand#8049 ASC NULLS FIRST,i_class#8050 ASC NULLS FIRST,i_category#8051 ASC NULLS FIRST], output=[i_product_name#8048,i_brand#8049,i_class#8050,i_category#8051,qoh#8041])
   +- *(5) HashAggregate(keys=[i_product_name#8048, i_brand#8049, i_class#8050, i_category#8051, spark_grouping_id#8047L], functions=[avg(inv_quantity_on_hand#8008)], output=[i_product_name#8048, i_brand#8049, i_class#8050, i_category#8051, qoh#8041])
      +- ShuffleQueryStage 3
         +- Exchange hashpartitioning(i_product_name#8048, i_brand#8049, i_class#8050, i_category#8051, spark_grouping_id#8047L, 20), ENSURE_REQUIREMENTS, [plan_id=63312]
            +- *(4) HashAggregate(keys=[i_product_name#8048, i_brand#8049, i_class#8050, i_category#8051, spark_grouping_id#8047L], functions=[partial_avg(inv_quantity_on_hand#8008)], output=[i_product_name#8048, i_brand#8049, i_class#8050, i_category#8051, spark_grouping_id#8047L, sum#8059, count#8060L])
               +- *(4) Expand [[inv_quantity_on_hand#8008, i_product_name#458, i_brand#445, i_class#447, i_category#449, 0], [inv_quantity_on_hand#8008, i_product_name#458, i_brand#445, i_class#447, null, 1], [inv_quantity_on_hand#8008, i_product_name#458, i_brand#445, null, null, 3], [inv_quantity_on_hand#8008, i_product_name#458, null, null, null, 7], [inv_quantity_on_hand#8008, null, null, null, null, 15]], [inv_quantity_on_hand#8008, i_product_name#8048, i_brand#8049, i_class#8050, i_category#8051, spark_grouping_id#8047L]
                  +- *(4) Project [inv_quantity_on_hand#8008, i_product_name#458, i_brand#445, i_class#447, i_category#449]
                     +- *(4) BroadcastHashJoin [inv_warehouse_sk#8007], [w_warehouse_sk#8009], Inner, BuildRight, false
                        :- *(4) Project [inv_warehouse_sk#8007, inv_quantity_on_hand#8008, i_brand#445, i_class#447, i_category#449, i_product_name#458]
                        :  +- *(4) BroadcastHashJoin [inv_item_sk#8006], [i_item_sk#437], Inner, BuildRight, false
                        :     :- *(4) Project [inv_item_sk#8006, inv_warehouse_sk#8007, inv_quantity_on_hand#8008]
                        :     :  +- *(4) BroadcastHashJoin [inv_date_sk#8005], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :- *(4) Filter ((isnotnull(inv_date_sk#8005) AND isnotnull(inv_item_sk#8006)) AND isnotnull(inv_warehouse_sk#8007))
                        :     :     :  +- *(4) ColumnarToRow
                        :     :     :     +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_warehouse_sk#8007,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_date_sk#8005), isnotnull(inv_item_sk#8006), isnotnull(inv_warehouse_sk#8007)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
                        :     :     +- BroadcastQueryStage 0
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=63064]
                        :     :           +- *(1) Project [d_date_sk#24]
                        :     :              +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                        :     :                 +- *(1) ColumnarToRow
                        :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                        :     +- BroadcastQueryStage 1
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=63083]
                        :           +- *(2) Filter isnotnull(i_item_sk#437)
                        :              +- *(2) ColumnarToRow
                        :                 +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_class#447,i_category#449,i_product_name#458] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>
                        +- BroadcastQueryStage 2
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=63100]
                              +- *(3) Filter isnotnull(w_warehouse_sk#8009)
                                 +- *(3) ColumnarToRow
                                    +- FileScan parquet default.warehouse[w_warehouse_sk#8009] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int>


==== q23a ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(25) HashAggregate(keys=[], functions=[sum(sales#8067)], output=[sum(sales)#8247])
   +- ShuffleQueryStage 29
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67237]
         +- *(24) HashAggregate(keys=[], functions=[partial_sum(sales#8067)], output=[sum#8252, isEmpty#8253])
            +- Union
               :- *(22) Project [CheckOverflow((promote_precision(cast(cs_quantity#215 as decimal(12,2))) * promote_precision(cast(cs_list_price#217 as decimal(12,2)))), DecimalType(18,2)) AS sales#8067]
               :  +- *(22) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#8175], Inner, BuildRight, false
               :     :- *(22) Project [cs_sold_date_sk#197, cs_quantity#215, cs_list_price#217]
               :     :  +- *(22) SortMergeJoin [cs_bill_customer_sk#200], [c_customer_sk#8157], LeftSemi
               :     :     :- *(20) Sort [cs_bill_customer_sk#200 ASC NULLS FIRST], false, 0
               :     :     :  +- ShuffleQueryStage 26
               :     :     :     +- Exchange hashpartitioning(cs_bill_customer_sk#200, 20), ENSURE_REQUIREMENTS, [plan_id=66561]
               :     :     :        +- *(17) Project [cs_sold_date_sk#197, cs_bill_customer_sk#200, cs_quantity#215, cs_list_price#217]
               :     :     :           +- *(17) BroadcastHashJoin [cs_item_sk#212], [item_sk#8074], LeftSemi, BuildRight, false
               :     :     :              :- AQEShuffleRead local
               :     :     :              :  +- ShuffleQueryStage 0
               :     :     :              :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=64051]
               :     :     :              :        +- *(1) Filter isnotnull(cs_sold_date_sk#197)
               :     :     :              :           +- *(1) ColumnarToRow
               :     :     :              :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212,cs_quantity#215,cs_list_price#217] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
               :     :     :              +- BroadcastQueryStage 23
               :     :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=66378]
               :     :     :                    +- AQEShuffleRead local
               :     :     :                       +- ShuffleQueryStage 20
               :     :     :                          +- Exchange hashpartitioning(item_sk#8074, 20), ENSURE_REQUIREMENTS, [plan_id=66159]
               :     :     :                             +- *(15) Project [item_sk#8074]
               :     :     :                                +- *(15) Filter (cnt#8076L > 4)
               :     :     :                                   +- *(15) HashAggregate(keys=[_groupingexpression#8249, i_item_sk#437, d_date#26], functions=[count(1)], output=[item_sk#8074, cnt#8076L])
               :     :     :                                      +- ShuffleQueryStage 17
               :     :     :                                         +- Exchange hashpartitioning(_groupingexpression#8249, i_item_sk#437, d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=65473]
               :     :     :                                            +- *(13) HashAggregate(keys=[_groupingexpression#8249, i_item_sk#437, d_date#26], functions=[partial_count(1)], output=[_groupingexpression#8249, i_item_sk#437, d_date#26, count#8255L])
               :     :     :                                               +- *(13) Project [d_date#26, i_item_sk#437, substr(i_item_desc#441, 1, 30) AS _groupingexpression#8249]
               :     :     :                                                  +- *(13) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
               :     :     :                                                     :- *(13) Project [ss_item_sk#416, d_date#26]
               :     :     :                                                     :  +- *(13) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
               :     :     :                                                     :     :- *(13) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416))
               :     :     :                                                     :     :  +- *(13) ColumnarToRow
               :     :     :                                                     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
               :     :     :                                                     :     +- BroadcastQueryStage 1
               :     :     :                                                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=64070]
               :     :     :                                                     :           +- *(2) Project [d_date_sk#24, d_date#26]
               :     :     :                                                     :              +- *(2) Filter (d_year#30 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#24))
               :     :     :                                                     :                 +- *(2) ColumnarToRow
               :     :     :                                                     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26,d_year#30] Batched: true, DataFilters: [d_year#30 IN (2000,2001,2002,2003), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
               :     :     :                                                     +- BroadcastQueryStage 2
               :     :     :                                                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=64089]
               :     :     :                                                           +- *(3) Filter isnotnull(i_item_sk#437)
               :     :     :                                                              +- *(3) ColumnarToRow
               :     :     :                                                                 +- FileScan parquet default.item[i_item_sk#437,i_item_desc#441] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
               :     :     +- *(21) Sort [c_customer_sk#8157 ASC NULLS FIRST], false, 0
               :     :        +- *(21) Project [c_customer_sk#8157]
               :     :           +- *(21) Filter (isnotnull(ssales#8079) AND (cast(ssales#8079 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery#8080, [id=#63687] as decimal(32,6)))), DecimalType(38,8))))
               :     :              :  +- Subquery subquery#8080, [id=#63687]
               :     :              :     +- AdaptiveSparkPlan isFinalPlan=true
                                          +- == Final Plan ==
                                             *(6) HashAggregate(keys=[], functions=[max(csales#8077)], output=[tpcds_cmax#8078])
                                             +- ShuffleQueryStage 6
                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67104]
                                                   +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#8077)], output=[max#8265])
                                                      +- *(5) HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8077])
                                                         +- ShuffleQueryStage 5
                                                            +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=67050]
                                                               +- *(4) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8268, isEmpty#8269])
                                                                  +- *(4) Project [ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                     +- *(4) BroadcastHashJoin [ss_sold_date_sk#8083], [d_date_sk#8106], Inner, BuildRight, false
                                                                        :- *(4) Project [ss_sold_date_sk#8083, ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                        :  +- *(4) BroadcastHashJoin [ss_customer_sk#8086], [c_customer_sk#81], Inner, BuildRight, false
                                                                        :     :- *(4) Filter (isnotnull(ss_customer_sk#8086) AND isnotnull(ss_sold_date_sk#8083))
                                                                        :     :  +- *(4) ColumnarToRow
                                                                        :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#8083,ss_customer_sk#8086,ss_quantity#8093,ss_sales_price#8096] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8086), isnotnull(ss_sold_date_sk#8083)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                        :     +- BroadcastQueryStage 4
                                                                        :        +- ReusedExchange [c_customer_sk#81], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=64117]
                                                                        +- BroadcastQueryStage 2
                                                                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=66912]
                                                                              +- *(2) Project [d_date_sk#8106]
                                                                                 +- *(2) Filter (d_year#8112 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8106))
                                                                                    +- *(2) ColumnarToRow
                                                                                       +- FileScan parquet default.date_dim[d_date_sk#8106,d_year#8112] Batched: true, DataFilters: [d_year#8112 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                          +- == Initial Plan ==
                                             HashAggregate(keys=[], functions=[max(csales#8077)], output=[tpcds_cmax#8078])
                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=63685]
                                                +- HashAggregate(keys=[], functions=[partial_max(csales#8077)], output=[max#8265])
                                                   +- HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8077])
                                                      +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=63681]
                                                         +- HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8268, isEmpty#8269])
                                                            +- Project [ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                               +- BroadcastHashJoin [ss_sold_date_sk#8083], [d_date_sk#8106], Inner, BuildRight, false
                                                                  :- Project [ss_sold_date_sk#8083, ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                  :  +- BroadcastHashJoin [ss_customer_sk#8086], [c_customer_sk#81], Inner, BuildRight, false
                                                                  :     :- Filter (isnotnull(ss_customer_sk#8086) AND isnotnull(ss_sold_date_sk#8083))
                                                                  :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#8083,ss_customer_sk#8086,ss_quantity#8093,ss_sales_price#8096] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8086), isnotnull(ss_sold_date_sk#8083)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=63672]
                                                                  :        +- Filter isnotnull(c_customer_sk#81)
                                                                  :           +- FileScan parquet default.customer[c_customer_sk#81] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=63676]
                                                                     +- Project [d_date_sk#8106]
                                                                        +- Filter (d_year#8112 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8106))
                                                                           +- FileScan parquet default.date_dim[d_date_sk#8106,d_year#8112] Batched: true, DataFilters: [d_year#8112 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
               :     :              +- *(21) HashAggregate(keys=[c_customer_sk#8157], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8144 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8147 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8157, ssales#8079])
               :     :                 +- ShuffleQueryStage 14
               :     :                    +- Exchange hashpartitioning(c_customer_sk#8157, 20), ENSURE_REQUIREMENTS, [plan_id=64684]
               :     :                       +- *(11) HashAggregate(keys=[c_customer_sk#8157], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8144 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8147 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8157, sum#8258, isEmpty#8259])
               :     :                          +- *(11) Project [ss_quantity#8144, ss_sales_price#8147, c_customer_sk#8157]
               :     :                             +- *(11) BroadcastHashJoin [ss_customer_sk#8137], [c_customer_sk#8157], Inner, BuildRight, false
               :     :                                :- *(11) Filter isnotnull(ss_customer_sk#8137)
               :     :                                :  +- *(11) ColumnarToRow
               :     :                                :     +- FileScan parquet default.store_sales[ss_customer_sk#8137,ss_quantity#8144,ss_sales_price#8147] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
               :     :                                +- BroadcastQueryStage 3
               :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=64117]
               :     :                                      +- *(4) Filter isnotnull(c_customer_sk#8157)
               :     :                                         +- *(4) ColumnarToRow
               :     :                                            +- FileScan parquet default.customer[c_customer_sk#8157] Batched: true, DataFilters: [isnotnull(c_customer_sk#8157)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
               :     +- BroadcastQueryStage 4
               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=64144]
               :           +- *(5) Project [d_date_sk#8175]
               :              +- *(5) Filter ((((isnotnull(d_year#8181) AND isnotnull(d_moy#8183)) AND (d_year#8181 = 2000)) AND (d_moy#8183 = 2)) AND isnotnull(d_date_sk#8175))
               :                 +- *(5) ColumnarToRow
               :                    +- FileScan parquet default.date_dim[d_date_sk#8175,d_year#8181,d_moy#8183] Batched: true, DataFilters: [isnotnull(d_year#8181), isnotnull(d_moy#8183), (d_year#8181 = 2000), (d_moy#8183 = 2), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
               +- *(23) Project [CheckOverflow((promote_precision(cast(ws_quantity#181 as decimal(12,2))) * promote_precision(cast(ws_list_price#183 as decimal(12,2)))), DecimalType(18,2)) AS sales#8070]
                  +- *(23) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#8203], Inner, BuildRight, false
                     :- *(23) Project [ws_sold_date_sk#163, ws_quantity#181, ws_list_price#183]
                     :  +- *(23) BroadcastHashJoin [ws_bill_customer_sk#167], [c_customer_sk#8157], LeftSemi, BuildRight, false
                     :     :- AQEShuffleRead local
                     :     :  +- ShuffleQueryStage 27
                     :     :     +- Exchange hashpartitioning(ws_bill_customer_sk#167, 20), ENSURE_REQUIREMENTS, [plan_id=66587]
                     :     :        +- *(18) Project [ws_sold_date_sk#163, ws_bill_customer_sk#167, ws_quantity#181, ws_list_price#183]
                     :     :           +- *(18) BroadcastHashJoin [ws_item_sk#166], [item_sk#8074], LeftSemi, BuildRight, false
                     :     :              :- AQEShuffleRead local
                     :     :              :  +- ShuffleQueryStage 5
                     :     :              :     +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=64163]
                     :     :              :        +- *(6) Filter isnotnull(ws_sold_date_sk#163)
                     :     :              :           +- *(6) ColumnarToRow
                     :     :              :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_customer_sk#167,ws_quantity#181,ws_list_price#183] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                     :     :              +- BroadcastQueryStage 25
                     :     :                 +- ReusedExchange [item_sk#8074], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=66378]
                     :     +- BroadcastQueryStage 28
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=66846]
                     :           +- *(19) Project [c_customer_sk#8157]
                     :              +- *(19) Filter (isnotnull(ssales#8079) AND (cast(ssales#8079 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery#8080, [id=#63687] as decimal(32,6)))), DecimalType(38,8))))
                     :                 :  +- Subquery subquery#8080, [id=#63687]
                     :                 :     +- AdaptiveSparkPlan isFinalPlan=true
                                             +- == Final Plan ==
                                                *(6) HashAggregate(keys=[], functions=[max(csales#8077)], output=[tpcds_cmax#8078])
                                                +- ShuffleQueryStage 6
                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67104]
                                                      +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#8077)], output=[max#8265])
                                                         +- *(5) HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8077])
                                                            +- ShuffleQueryStage 5
                                                               +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=67050]
                                                                  +- *(4) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8268, isEmpty#8269])
                                                                     +- *(4) Project [ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                        +- *(4) BroadcastHashJoin [ss_sold_date_sk#8083], [d_date_sk#8106], Inner, BuildRight, false
                                                                           :- *(4) Project [ss_sold_date_sk#8083, ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                           :  +- *(4) BroadcastHashJoin [ss_customer_sk#8086], [c_customer_sk#81], Inner, BuildRight, false
                                                                           :     :- *(4) Filter (isnotnull(ss_customer_sk#8086) AND isnotnull(ss_sold_date_sk#8083))
                                                                           :     :  +- *(4) ColumnarToRow
                                                                           :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#8083,ss_customer_sk#8086,ss_quantity#8093,ss_sales_price#8096] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8086), isnotnull(ss_sold_date_sk#8083)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                           :     +- BroadcastQueryStage 4
                                                                           :        +- ReusedExchange [c_customer_sk#81], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=64117]
                                                                           +- BroadcastQueryStage 2
                                                                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=66912]
                                                                                 +- *(2) Project [d_date_sk#8106]
                                                                                    +- *(2) Filter (d_year#8112 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8106))
                                                                                       +- *(2) ColumnarToRow
                                                                                          +- FileScan parquet default.date_dim[d_date_sk#8106,d_year#8112] Batched: true, DataFilters: [d_year#8112 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                             +- == Initial Plan ==
                                                HashAggregate(keys=[], functions=[max(csales#8077)], output=[tpcds_cmax#8078])
                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=63685]
                                                   +- HashAggregate(keys=[], functions=[partial_max(csales#8077)], output=[max#8265])
                                                      +- HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8077])
                                                         +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=63681]
                                                            +- HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8093 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8096 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8268, isEmpty#8269])
                                                               +- Project [ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                  +- BroadcastHashJoin [ss_sold_date_sk#8083], [d_date_sk#8106], Inner, BuildRight, false
                                                                     :- Project [ss_sold_date_sk#8083, ss_quantity#8093, ss_sales_price#8096, c_customer_sk#81]
                                                                     :  +- BroadcastHashJoin [ss_customer_sk#8086], [c_customer_sk#81], Inner, BuildRight, false
                                                                     :     :- Filter (isnotnull(ss_customer_sk#8086) AND isnotnull(ss_sold_date_sk#8083))
                                                                     :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#8083,ss_customer_sk#8086,ss_quantity#8093,ss_sales_price#8096] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8086), isnotnull(ss_sold_date_sk#8083)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=63672]
                                                                     :        +- Filter isnotnull(c_customer_sk#81)
                                                                     :           +- FileScan parquet default.customer[c_customer_sk#81] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=63676]
                                                                        +- Project [d_date_sk#8106]
                                                                           +- Filter (d_year#8112 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8106))
                                                                              +- FileScan parquet default.date_dim[d_date_sk#8106,d_year#8112] Batched: true, DataFilters: [d_year#8112 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :                 +- *(19) HashAggregate(keys=[c_customer_sk#8157], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8144 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8147 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8157, ssales#8079])
                     :                    +- ShuffleQueryStage 16
                     :                       +- ReusedExchange [c_customer_sk#8157, sum#8262, isEmpty#8263], Exchange hashpartitioning(c_customer_sk#8157, 20), ENSURE_REQUIREMENTS, [plan_id=64684]
                     +- BroadcastQueryStage 13
                        +- ReusedExchange [d_date_sk#8203], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=64144]

==== q23b ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_last_name#8452 ASC NULLS FIRST,c_first_name#8451 ASC NULLS FIRST,sales#8335 ASC NULLS FIRST], output=[c_last_name#8452,c_first_name#8451,sales#8335])
   +- Union
      :- *(36) HashAggregate(keys=[c_last_name#8452, c_first_name#8451], functions=[sum(CheckOverflow((promote_precision(cast(cs_quantity#215 as decimal(12,2))) * promote_precision(cast(cs_list_price#217 as decimal(12,2)))), DecimalType(18,2)))], output=[c_last_name#8452, c_first_name#8451, sales#8335])
      :  +- ShuffleQueryStage 42
      :     +- Exchange hashpartitioning(c_last_name#8452, c_first_name#8451, 20), ENSURE_REQUIREMENTS, [plan_id=73502]
      :        +- *(32) HashAggregate(keys=[c_last_name#8452, c_first_name#8451], functions=[partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#215 as decimal(12,2))) * promote_precision(cast(cs_list_price#217 as decimal(12,2)))), DecimalType(18,2)))], output=[c_last_name#8452, c_first_name#8451, sum#8560, isEmpty#8561])
      :           +- *(32) Project [cs_quantity#215, cs_list_price#217, c_first_name#8451, c_last_name#8452]
      :              +- *(32) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#8461], Inner, BuildRight, false
      :                 :- *(32) Project [cs_sold_date_sk#197, cs_quantity#215, cs_list_price#217, c_first_name#8451, c_last_name#8452]
      :                 :  +- *(32) BroadcastHashJoin [cs_bill_customer_sk#200], [c_customer_sk#8443], Inner, BuildLeft, false
      :                 :     :- BroadcastQueryStage 39
      :                 :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=72668]
      :                 :     :     +- *(27) SortMergeJoin [cs_bill_customer_sk#200], [c_customer_sk#8425], LeftSemi
      :                 :     :        :- *(25) Sort [cs_bill_customer_sk#200 ASC NULLS FIRST], false, 0
      :                 :     :        :  +- ShuffleQueryStage 37
      :                 :     :        :     +- Exchange hashpartitioning(cs_bill_customer_sk#200, 20), ENSURE_REQUIREMENTS, [plan_id=72412]
      :                 :     :        :        +- *(23) Project [cs_sold_date_sk#197, cs_bill_customer_sk#200, cs_quantity#215, cs_list_price#217]
      :                 :     :        :           +- *(23) BroadcastHashJoin [cs_item_sk#212], [item_sk#8342], LeftSemi, BuildRight, false
      :                 :     :        :              :- AQEShuffleRead local
      :                 :     :        :              :  +- ShuffleQueryStage 0
      :                 :     :        :              :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=68127]
      :                 :     :        :              :        +- *(1) Filter (isnotnull(cs_bill_customer_sk#200) AND isnotnull(cs_sold_date_sk#197))
      :                 :     :        :              :           +- *(1) ColumnarToRow
      :                 :     :        :              :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212,cs_quantity#215,cs_list_price#217] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#200), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:d...
      :                 :     :        :              +- BroadcastQueryStage 34
      :                 :     :        :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=71761]
      :                 :     :        :                    +- AQEShuffleRead local
      :                 :     :        :                       +- ShuffleQueryStage 31
      :                 :     :        :                          +- Exchange hashpartitioning(item_sk#8342, 20), ENSURE_REQUIREMENTS, [plan_id=71480]
      :                 :     :        :                             +- *(21) Project [item_sk#8342]
      :                 :     :        :                                +- *(21) Filter (cnt#8344L > 4)
      :                 :     :        :                                   +- *(21) HashAggregate(keys=[_groupingexpression#8557, i_item_sk#437, d_date#26], functions=[count(1)], output=[item_sk#8342, cnt#8344L])
      :                 :     :        :                                      +- ShuffleQueryStage 21
      :                 :     :        :                                         +- Exchange hashpartitioning(_groupingexpression#8557, i_item_sk#437, d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=69562]
      :                 :     :        :                                            +- *(15) HashAggregate(keys=[_groupingexpression#8557, i_item_sk#437, d_date#26], functions=[partial_count(1)], output=[_groupingexpression#8557, i_item_sk#437, d_date#26, count#8563L])
      :                 :     :        :                                               +- *(15) Project [d_date#26, i_item_sk#437, substr(i_item_desc#441, 1, 30) AS _groupingexpression#8557]
      :                 :     :        :                                                  +- *(15) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
      :                 :     :        :                                                     :- *(15) Project [ss_item_sk#416, d_date#26]
      :                 :     :        :                                                     :  +- *(15) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
      :                 :     :        :                                                     :     :- *(15) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416))
      :                 :     :        :                                                     :     :  +- *(15) ColumnarToRow
      :                 :     :        :                                                     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>
      :                 :     :        :                                                     :     +- BroadcastQueryStage 1
      :                 :     :        :                                                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=68146]
      :                 :     :        :                                                     :           +- *(2) Project [d_date_sk#24, d_date#26]
      :                 :     :        :                                                     :              +- *(2) Filter (d_year#30 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#24))
      :                 :     :        :                                                     :                 +- *(2) ColumnarToRow
      :                 :     :        :                                                     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26,d_year#30] Batched: true, DataFilters: [d_year#30 IN (2000,2001,2002,2003), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>
      :                 :     :        :                                                     +- BroadcastQueryStage 2
      :                 :     :        :                                                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68165]
      :                 :     :        :                                                           +- *(3) Filter isnotnull(i_item_sk#437)
      :                 :     :        :                                                              +- *(3) ColumnarToRow
      :                 :     :        :                                                                 +- FileScan parquet default.item[i_item_sk#437,i_item_desc#441] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
      :                 :     :        +- *(26) Sort [c_customer_sk#8425 ASC NULLS FIRST], false, 0
      :                 :     :           +- *(26) Project [c_customer_sk#8425]
      :                 :     :              +- *(26) Filter (isnotnull(ssales#8347) AND (cast(ssales#8347 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery#8348, [id=#67747] as decimal(32,6)))), DecimalType(38,8))))
      :                 :     :                 :  +- Subquery subquery#8348, [id=#67747]
      :                 :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true
                                                      +- == Final Plan ==
                                                         *(6) HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                         +- ShuffleQueryStage 6
                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=73185]
                                                               +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                                  +- *(5) HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                                     +- ShuffleQueryStage 5
                                                                        +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=73131]
                                                                           +- *(4) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                              +- *(4) Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                                 +- *(4) BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                                    :- *(4) Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                                    :  +- *(4) BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                                    :     :- *(4) Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                                    :     :  +- *(4) ColumnarToRow
                                                                                    :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                    :     +- BroadcastQueryStage 4
                                                                                    :        +- ReusedExchange [c_customer_sk#81], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68193]
                                                                                    +- BroadcastQueryStage 2
                                                                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=72778]
                                                                                          +- *(2) Project [d_date_sk#8374]
                                                                                             +- *(2) Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                                +- *(2) ColumnarToRow
                                                                                                   +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                      +- == Initial Plan ==
                                                         HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67745]
                                                            +- HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                               +- HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                                  +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=67741]
                                                                     +- HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                        +- Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                           +- BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                              :- Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                              :  +- BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                              :     :- Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                              :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=67732]
                                                                              :        +- Filter isnotnull(c_customer_sk#81)
                                                                              :           +- FileScan parquet default.customer[c_customer_sk#81] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=67736]
                                                                                 +- Project [d_date_sk#8374]
                                                                                    +- Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                       +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :                 :     :                 +- *(26) HashAggregate(keys=[c_customer_sk#8425], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8412 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8415 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8425, ssales#8347])
      :                 :     :                    +- ShuffleQueryStage 24
      :                 :     :                       +- Exchange hashpartitioning(c_customer_sk#8425, 20), ENSURE_REQUIREMENTS, [plan_id=70031]
      :                 :     :                          +- *(17) HashAggregate(keys=[c_customer_sk#8425], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8412 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8415 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8425, sum#8566, isEmpty#8567])
      :                 :     :                             +- *(17) Project [ss_quantity#8412, ss_sales_price#8415, c_customer_sk#8425]
      :                 :     :                                +- *(17) BroadcastHashJoin [ss_customer_sk#8405], [c_customer_sk#8425], Inner, BuildRight, false
      :                 :     :                                   :- *(17) Filter isnotnull(ss_customer_sk#8405)
      :                 :     :                                   :  +- *(17) ColumnarToRow
      :                 :     :                                   :     +- FileScan parquet default.store_sales[ss_customer_sk#8405,ss_quantity#8412,ss_sales_price#8415] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8405)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
      :                 :     :                                   +- BroadcastQueryStage 3
      :                 :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68193]
      :                 :     :                                         +- *(4) Filter isnotnull(c_customer_sk#8425)
      :                 :     :                                            +- *(4) ColumnarToRow
      :                 :     :                                               +- FileScan parquet default.customer[c_customer_sk#8425] Batched: true, DataFilters: [isnotnull(c_customer_sk#8425)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
      :                 :     +- *(32) SortMergeJoin [c_customer_sk#8443], [c_customer_sk#8425], LeftSemi
      :                 :        :- *(30) Sort [c_customer_sk#8443 ASC NULLS FIRST], false, 0
      :                 :        :  +- ShuffleQueryStage 4
      :                 :        :     +- Exchange hashpartitioning(c_customer_sk#8443, 20), ENSURE_REQUIREMENTS, [plan_id=68217]
      :                 :        :        +- *(5) Filter isnotnull(c_customer_sk#8443)
      :                 :        :           +- *(5) ColumnarToRow
      :                 :        :              +- FileScan parquet default.customer[c_customer_sk#8443,c_first_name#8451,c_last_name#8452] Batched: true, DataFilters: [isnotnull(c_customer_sk#8443)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
      :                 :        +- *(31) Sort [c_customer_sk#8425 ASC NULLS FIRST], false, 0
      :                 :           +- *(31) Project [c_customer_sk#8425]
      :                 :              +- *(31) Filter (isnotnull(ssales#8347) AND (cast(ssales#8347 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery#8348, [id=#67747] as decimal(32,6)))), DecimalType(38,8))))
      :                 :                 :  +- Subquery subquery#8348, [id=#67747]
      :                 :                 :     +- AdaptiveSparkPlan isFinalPlan=true
                                                +- == Final Plan ==
                                                   *(6) HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                   +- ShuffleQueryStage 6
                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=73185]
                                                         +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                            +- *(5) HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                               +- ShuffleQueryStage 5
                                                                  +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=73131]
                                                                     +- *(4) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                        +- *(4) Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                           +- *(4) BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                              :- *(4) Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                              :  +- *(4) BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                              :     :- *(4) Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                              :     :  +- *(4) ColumnarToRow
                                                                              :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :     +- BroadcastQueryStage 4
                                                                              :        +- ReusedExchange [c_customer_sk#81], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68193]
                                                                              +- BroadcastQueryStage 2
                                                                                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=72778]
                                                                                    +- *(2) Project [d_date_sk#8374]
                                                                                       +- *(2) Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                          +- *(2) ColumnarToRow
                                                                                             +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                +- == Initial Plan ==
                                                   HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67745]
                                                      +- HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                         +- HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                            +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=67741]
                                                               +- HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                  +- Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                     +- BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                        :- Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                        :  +- BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                        :     :- Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                        :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=67732]
                                                                        :        +- Filter isnotnull(c_customer_sk#81)
                                                                        :           +- FileScan parquet default.customer[c_customer_sk#81] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=67736]
                                                                           +- Project [d_date_sk#8374]
                                                                              +- Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                 +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
      :                 :                 +- *(31) HashAggregate(keys=[c_customer_sk#8425], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8412 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8415 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8425, ssales#8347])
      :                 :                    +- ShuffleQueryStage 26
      :                 :                       +- ReusedExchange [c_customer_sk#8425, sum#8566, isEmpty#8567], Exchange hashpartitioning(c_customer_sk#8425, 20), ENSURE_REQUIREMENTS, [plan_id=70031]
      :                 +- BroadcastQueryStage 7
      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=68264]
      :                       +- *(7) Project [d_date_sk#8461]
      :                          +- *(7) Filter ((((isnotnull(d_year#8467) AND isnotnull(d_moy#8469)) AND (d_year#8467 = 2000)) AND (d_moy#8469 = 2)) AND isnotnull(d_date_sk#8461))
      :                             +- *(7) ColumnarToRow
      :                                +- FileScan parquet default.date_dim[d_date_sk#8461,d_year#8467,d_moy#8469] Batched: true, DataFilters: [isnotnull(d_year#8467), isnotnull(d_moy#8469), (d_year#8467 = 2000), (d_moy#8469 = 2), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
      +- *(37) HashAggregate(keys=[c_last_name#8498, c_first_name#8497], functions=[sum(CheckOverflow((promote_precision(cast(ws_quantity#181 as decimal(12,2))) * promote_precision(cast(ws_list_price#183 as decimal(12,2)))), DecimalType(18,2)))], output=[c_last_name#8498, c_first_name#8497, sales#8338])
         +- ShuffleQueryStage 43
            +- Exchange hashpartitioning(c_last_name#8498, c_first_name#8497, 20), ENSURE_REQUIREMENTS, [plan_id=73637]
               +- *(35) HashAggregate(keys=[c_last_name#8498, c_first_name#8497], functions=[partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#181 as decimal(12,2))) * promote_precision(cast(ws_list_price#183 as decimal(12,2)))), DecimalType(18,2)))], output=[c_last_name#8498, c_first_name#8497, sum#8570, isEmpty#8571])
                  +- *(35) Project [ws_quantity#181, ws_list_price#183, c_first_name#8497, c_last_name#8498]
                     +- *(35) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#8507], Inner, BuildRight, false
                        :- *(35) Project [ws_sold_date_sk#163, ws_quantity#181, ws_list_price#183, c_first_name#8497, c_last_name#8498]
                        :  +- *(35) BroadcastHashJoin [ws_bill_customer_sk#167], [c_customer_sk#8489], Inner, BuildLeft, false
                        :     :- BroadcastQueryStage 41
                        :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=73346]
                        :     :     +- *(29) BroadcastHashJoin [ws_bill_customer_sk#167], [c_customer_sk#8425], LeftSemi, BuildRight, false
                        :     :        :- AQEShuffleRead local
                        :     :        :  +- ShuffleQueryStage 38
                        :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#167, 20), ENSURE_REQUIREMENTS, [plan_id=72442]
                        :     :        :        +- *(24) Project [ws_sold_date_sk#163, ws_bill_customer_sk#167, ws_quantity#181, ws_list_price#183]
                        :     :        :           +- *(24) BroadcastHashJoin [ws_item_sk#166], [item_sk#8342], LeftSemi, BuildRight, false
                        :     :        :              :- AQEShuffleRead local
                        :     :        :              :  +- ShuffleQueryStage 8
                        :     :        :              :     +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=68411]
                        :     :        :              :        +- *(8) Filter (isnotnull(ws_bill_customer_sk#167) AND isnotnull(ws_sold_date_sk#163))
                        :     :        :              :           +- *(8) ColumnarToRow
                        :     :        :              :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_customer_sk#167,ws_quantity#181,ws_list_price#183] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#167), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:d...
                        :     :        :              +- BroadcastQueryStage 36
                        :     :        :                 +- ReusedExchange [item_sk#8342], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=71761]
                        :     :        +- BroadcastQueryStage 40
                        :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=72989]
                        :     :              +- *(28) Project [c_customer_sk#8425]
                        :     :                 +- *(28) Filter (isnotnull(ssales#8347) AND (cast(ssales#8347 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery#8348, [id=#67747] as decimal(32,6)))), DecimalType(38,8))))
                        :     :                    :  +- Subquery subquery#8348, [id=#67747]
                        :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true
                                                         +- == Final Plan ==
                                                            *(6) HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                            +- ShuffleQueryStage 6
                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=73185]
                                                                  +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                                     +- *(5) HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                                        +- ShuffleQueryStage 5
                                                                           +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=73131]
                                                                              +- *(4) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                                 +- *(4) Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                                    +- *(4) BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                                       :- *(4) Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                                       :  +- *(4) BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                                       :     :- *(4) Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                                       :     :  +- *(4) ColumnarToRow
                                                                                       :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                       :     +- BroadcastQueryStage 4
                                                                                       :        +- ReusedExchange [c_customer_sk#81], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68193]
                                                                                       +- BroadcastQueryStage 2
                                                                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=72778]
                                                                                             +- *(2) Project [d_date_sk#8374]
                                                                                                +- *(2) Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                                   +- *(2) ColumnarToRow
                                                                                                      +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                         +- == Initial Plan ==
                                                            HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67745]
                                                               +- HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                                  +- HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                                     +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=67741]
                                                                        +- HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                           +- Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                              +- BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                                 :- Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                                 :  +- BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                                 :     :- Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                                 :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=67732]
                                                                                 :        +- Filter isnotnull(c_customer_sk#81)
                                                                                 :           +- FileScan parquet default.customer[c_customer_sk#81] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=67736]
                                                                                    +- Project [d_date_sk#8374]
                                                                                       +- Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                          +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                        :     :                    +- *(28) HashAggregate(keys=[c_customer_sk#8425], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8412 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8415 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8425, ssales#8347])
                        :     :                       +- ShuffleQueryStage 28
                        :     :                          +- ReusedExchange [c_customer_sk#8425, sum#8574, isEmpty#8575], Exchange hashpartitioning(c_customer_sk#8425, 20), ENSURE_REQUIREMENTS, [plan_id=70031]
                        :     +- *(35) SortMergeJoin [c_customer_sk#8489], [c_customer_sk#8425], LeftSemi
                        :        :- *(33) Sort [c_customer_sk#8489 ASC NULLS FIRST], false, 0
                        :        :  +- ShuffleQueryStage 16
                        :        :     +- ReusedExchange [c_customer_sk#8489, c_first_name#8497, c_last_name#8498], Exchange hashpartitioning(c_customer_sk#8443, 20), ENSURE_REQUIREMENTS, [plan_id=68217]
                        :        +- *(34) Sort [c_customer_sk#8425 ASC NULLS FIRST], false, 0
                        :           +- *(34) Project [c_customer_sk#8425]
                        :              +- *(34) Filter (isnotnull(ssales#8347) AND (cast(ssales#8347 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery subquery#8348, [id=#67747] as decimal(32,6)))), DecimalType(38,8))))
                        :                 :  +- Subquery subquery#8348, [id=#67747]
                        :                 :     +- AdaptiveSparkPlan isFinalPlan=true
                                                +- == Final Plan ==
                                                   *(6) HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                   +- ShuffleQueryStage 6
                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=73185]
                                                         +- *(5) HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                            +- *(5) HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                               +- ShuffleQueryStage 5
                                                                  +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=73131]
                                                                     +- *(4) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                        +- *(4) Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                           +- *(4) BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                              :- *(4) Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                              :  +- *(4) BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                              :     :- *(4) Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                              :     :  +- *(4) ColumnarToRow
                                                                              :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                              :     +- BroadcastQueryStage 4
                                                                              :        +- ReusedExchange [c_customer_sk#81], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68193]
                                                                              +- BroadcastQueryStage 2
                                                                                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=72778]
                                                                                    +- *(2) Project [d_date_sk#8374]
                                                                                       +- *(2) Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                          +- *(2) ColumnarToRow
                                                                                             +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                                +- == Initial Plan ==
                                                   HashAggregate(keys=[], functions=[max(csales#8345)], output=[tpcds_cmax#8346])
                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=67745]
                                                      +- HashAggregate(keys=[], functions=[partial_max(csales#8345)], output=[max#8577])
                                                         +- HashAggregate(keys=[c_customer_sk#81], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[csales#8345])
                                                            +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=67741]
                                                               +- HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#8361 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8364 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#81, sum#8580, isEmpty#8581])
                                                                  +- Project [ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                     +- BroadcastHashJoin [ss_sold_date_sk#8351], [d_date_sk#8374], Inner, BuildRight, false
                                                                        :- Project [ss_sold_date_sk#8351, ss_quantity#8361, ss_sales_price#8364, c_customer_sk#81]
                                                                        :  +- BroadcastHashJoin [ss_customer_sk#8354], [c_customer_sk#81], Inner, BuildRight, false
                                                                        :     :- Filter (isnotnull(ss_customer_sk#8354) AND isnotnull(ss_sold_date_sk#8351))
                                                                        :     :  +- FileScan parquet default.store_sales[ss_sold_date_sk#8351,ss_customer_sk#8354,ss_quantity#8361,ss_sales_price#8364] Batched: true, DataFilters: [isnotnull(ss_customer_sk#8354), isnotnull(ss_sold_date_sk#8351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>
                                                                        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=67732]
                                                                        :        +- Filter isnotnull(c_customer_sk#81)
                                                                        :           +- FileScan parquet default.customer[c_customer_sk#81] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int>
                                                                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=67736]
                                                                           +- Project [d_date_sk#8374]
                                                                              +- Filter (d_year#8380 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8374))
                                                                                 +- FileScan parquet default.date_dim[d_date_sk#8374,d_year#8380] Batched: true, DataFilters: [d_year#8380 IN (2000,2001,2002,2003), isnotnull(d_date_sk#8374)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                        :                 +- *(34) HashAggregate(keys=[c_customer_sk#8425], functions=[sum(CheckOverflow((promote_precision(cast(ss_quantity#8412 as decimal(12,2))) * promote_precision(cast(ss_sales_price#8415 as decimal(12,2)))), DecimalType(18,2)))], output=[c_customer_sk#8425, ssales#8347])
                        :                    +- ShuffleQueryStage 30
                        :                       +- ReusedExchange [c_customer_sk#8425, sum#8574, isEmpty#8575], Exchange hashpartitioning(c_customer_sk#8425, 20), ENSURE_REQUIREMENTS, [plan_id=70031]
                        +- BroadcastQueryStage 20
                           +- ReusedExchange [d_date_sk#8507], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=68264]

==== q24 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(11) Filter (isnotnull(paid#8687) AND (cast(paid#8687 as decimal(33,8)) > cast(Subquery subquery#8688, [id=#73922] as decimal(33,8))))
   :  +- Subquery subquery#8688, [id=#73922]
   :     +- AdaptiveSparkPlan isFinalPlan=true
         +- == Final Plan ==
            *(11) HashAggregate(keys=[], functions=[avg(netpaid#8689)], output=[(0.05 * avg(netpaid))#8693])
            +- ShuffleQueryStage 12
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=75268]
                  +- *(10) HashAggregate(keys=[], functions=[partial_avg(netpaid#8689)], output=[sum#8711, count#8712L])
                     +- *(10) HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452], functions=[sum(UnscaledValue(ss_net_paid#434))], output=[netpaid#8689])
                        +- ShuffleQueryStage 11
                           +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452, 20), ENSURE_REQUIREMENTS, [plan_id=75206]
                              +- *(9) HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452], functions=[partial_sum(UnscaledValue(ss_net_paid#434))], output=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452, sum#8714L])
                                 +- *(9) Project [ss_net_paid#434, s_store_name#57, s_state#76, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457, c_first_name#89, c_last_name#90, ca_state#3725]
                                    +- *(9) BroadcastHashJoin [c_birth_country#95, s_zip#77], [upper(ca_country#3727), ca_zip#3726], Inner, BuildRight, false
                                       :- *(9) Project [ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457, c_first_name#89, c_last_name#90, c_birth_country#95]
                                       :  +- *(9) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
                                       :     :- *(9) Project [ss_customer_sk#417, ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457]
                                       :     :  +- *(9) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                                       :     :     :- *(9) Project [ss_item_sk#416, ss_customer_sk#417, ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77]
                                       :     :     :  +- *(9) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :     :     :     :- *(9) Project [ss_item_sk#416, ss_customer_sk#417, ss_store_sk#421, ss_net_paid#434]
                                       :     :     :     :  +- *(9) SortMergeJoin [ss_ticket_number#423, ss_item_sk#416], [sr_ticket_number#13, sr_item_sk#6], Inner
                                       :     :     :     :     :- *(7) Sort [ss_ticket_number#423 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST], false, 0
                                       :     :     :     :     :  +- ShuffleQueryStage 1
                                       :     :     :     :     :     +- ReusedExchange [ss_item_sk#416, ss_customer_sk#417, ss_store_sk#421, ss_ticket_number#423, ss_net_paid#434], Exchange hashpartitioning(ss_ticket_number#423, ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=74041]
                                       :     :     :     :     +- *(8) Sort [sr_ticket_number#13 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                                       :     :     :     :        +- ShuffleQueryStage 3
                                       :     :     :     :           +- ReusedExchange [sr_item_sk#6, sr_ticket_number#13], Exchange hashpartitioning(sr_ticket_number#13, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=74058]
                                       :     :     :     +- BroadcastQueryStage 5
                                       :     :     :        +- ReusedExchange [s_store_sk#52, s_store_name#57, s_state#76, s_zip#77], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=74079]
                                       :     :     +- BroadcastQueryStage 6
                                       :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=74986]
                                       :     :           +- *(4) Filter isnotnull(i_item_sk#437)
                                       :     :              +- *(4) ColumnarToRow
                                       :     :                 +- FileScan parquet default.item[i_item_sk#437,i_current_price#442,i_size#452,i_color#454,i_units#455,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...
                                       :     +- BroadcastQueryStage 8
                                       :        +- ReusedExchange [c_customer_sk#81, c_first_name#89, c_last_name#90, c_birth_country#95], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=74115]
                                       +- BroadcastQueryStage 10
                                          +- ReusedExchange [ca_state#3725, ca_zip#3726, ca_country#3727], BroadcastExchange HashedRelationBroadcastMode(List(upper(input[2, string, false]), input[1, string, false]),false), [plan_id=74132]
         +- == Initial Plan ==
            HashAggregate(keys=[], functions=[avg(netpaid#8689)], output=[(0.05 * avg(netpaid))#8693])
            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=73920]
               +- HashAggregate(keys=[], functions=[partial_avg(netpaid#8689)], output=[sum#8711, count#8712L])
                  +- HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452], functions=[sum(UnscaledValue(ss_net_paid#434))], output=[netpaid#8689])
                     +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452, 20), ENSURE_REQUIREMENTS, [plan_id=73916]
                        +- HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452], functions=[partial_sum(UnscaledValue(ss_net_paid#434))], output=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452, sum#8714L])
                           +- Project [ss_net_paid#434, s_store_name#57, s_state#76, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457, c_first_name#89, c_last_name#90, ca_state#3725]
                              +- BroadcastHashJoin [c_birth_country#95, s_zip#77], [upper(ca_country#3727), ca_zip#3726], Inner, BuildRight, false
                                 :- Project [ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457, c_first_name#89, c_last_name#90, c_birth_country#95]
                                 :  +- BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
                                 :     :- Project [ss_customer_sk#417, ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457]
                                 :     :  +- BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                                 :     :     :- Project [ss_item_sk#416, ss_customer_sk#417, ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77]
                                 :     :     :  +- BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                 :     :     :     :- Project [ss_item_sk#416, ss_customer_sk#417, ss_store_sk#421, ss_net_paid#434]
                                 :     :     :     :  +- SortMergeJoin [ss_ticket_number#423, ss_item_sk#416], [sr_ticket_number#13, sr_item_sk#6], Inner
                                 :     :     :     :     :- Sort [ss_ticket_number#423 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST], false, 0
                                 :     :     :     :     :  +- Exchange hashpartitioning(ss_ticket_number#423, ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=73892]
                                 :     :     :     :     :     +- Filter (((isnotnull(ss_ticket_number#423) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_customer_sk#417))
                                 :     :     :     :     :        +- FileScan parquet default.store_sales[ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ticket_number#423,ss_net_paid#434] Batched: true, DataFilters: [isnotnull(ss_ticket_number#423), isnotnull(ss_item_sk#416), isnotnull(ss_store_sk#421), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal...
                                 :     :     :     :     +- Sort [sr_ticket_number#13 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                                 :     :     :     :        +- Exchange hashpartitioning(sr_ticket_number#13, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=73893]
                                 :     :     :     :           +- Filter (isnotnull(sr_ticket_number#13) AND isnotnull(sr_item_sk#6))
                                 :     :     :     :              +- FileScan parquet default.store_returns[sr_item_sk#6,sr_ticket_number#13] Batched: true, DataFilters: [isnotnull(sr_ticket_number#13), isnotnull(sr_item_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>
                                 :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=73899]
                                 :     :     :        +- Project [s_store_sk#52, s_store_name#57, s_state#76, s_zip#77]
                                 :     :     :           +- Filter (((isnotnull(s_market_id#62) AND (s_market_id#62 = 8)) AND isnotnull(s_store_sk#52)) AND isnotnull(s_zip#77))
                                 :     :     :              +- FileScan parquet default.store[s_store_sk#52,s_store_name#57,s_market_id#62,s_state#76,s_zip#77] Batched: true, DataFilters: [isnotnull(s_market_id#62), (s_market_id#62 = 8), isnotnull(s_store_sk#52), isnotnull(s_zip#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>
                                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=73903]
                                 :     :        +- Filter isnotnull(i_item_sk#437)
                                 :     :           +- FileScan parquet default.item[i_item_sk#437,i_current_price#442,i_size#452,i_color#454,i_units#455,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...
                                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=73907]
                                 :        +- Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_birth_country#95))
                                 :           +- FileScan parquet default.customer[c_customer_sk#81,c_first_name#89,c_last_name#90,c_birth_country#95] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_birth_country#95)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>
                                 +- BroadcastExchange HashedRelationBroadcastMode(List(upper(input[2, string, false]), input[1, string, false]),false), [plan_id=73911]
                                    +- Filter (isnotnull(ca_country#3727) AND isnotnull(ca_zip#3726))
                                       +- FileScan parquet default.customer_address[ca_state#3725,ca_zip#3726,ca_country#3727] Batched: true, DataFilters: [isnotnull(ca_country#3727), isnotnull(ca_zip#3726)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>
   +- *(11) HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57], functions=[sum(netpaid#8689)], output=[c_last_name#90, c_first_name#89, s_store_name#57, paid#8687])
      +- ShuffleQueryStage 7
         +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, s_store_name#57, 20), ENSURE_REQUIREMENTS, [plan_id=74795]
            +- *(10) HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57], functions=[partial_sum(netpaid#8689)], output=[c_last_name#90, c_first_name#89, s_store_name#57, sum#8705, isEmpty#8706])
               +- *(10) HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452], functions=[sum(UnscaledValue(ss_net_paid#434))], output=[c_last_name#90, c_first_name#89, s_store_name#57, netpaid#8689])
                  +- ShuffleQueryStage 6
                     +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452, 20), ENSURE_REQUIREMENTS, [plan_id=74726]
                        +- *(9) HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452], functions=[partial_sum(UnscaledValue(ss_net_paid#434))], output=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#3725, s_state#76, i_color#454, i_current_price#442, i_manager_id#457, i_units#455, i_size#452, sum#8708L])
                           +- *(9) Project [ss_net_paid#434, s_store_name#57, s_state#76, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457, c_first_name#89, c_last_name#90, ca_state#3725]
                              +- *(9) BroadcastHashJoin [c_birth_country#95, s_zip#77], [upper(ca_country#3727), ca_zip#3726], Inner, BuildRight, false
                                 :- *(9) Project [ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457, c_first_name#89, c_last_name#90, c_birth_country#95]
                                 :  +- *(9) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
                                 :     :- *(9) Project [ss_customer_sk#417, ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77, i_current_price#442, i_size#452, i_color#454, i_units#455, i_manager_id#457]
                                 :     :  +- *(9) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                                 :     :     :- *(9) Project [ss_item_sk#416, ss_customer_sk#417, ss_net_paid#434, s_store_name#57, s_state#76, s_zip#77]
                                 :     :     :  +- *(9) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                 :     :     :     :- *(9) Project [ss_item_sk#416, ss_customer_sk#417, ss_store_sk#421, ss_net_paid#434]
                                 :     :     :     :  +- *(9) SortMergeJoin [ss_ticket_number#423, ss_item_sk#416], [sr_ticket_number#13, sr_item_sk#6], Inner
                                 :     :     :     :     :- *(7) Sort [ss_ticket_number#423 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST], false, 0
                                 :     :     :     :     :  +- ShuffleQueryStage 0
                                 :     :     :     :     :     +- Exchange hashpartitioning(ss_ticket_number#423, ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=74041]
                                 :     :     :     :     :        +- *(1) Filter (((isnotnull(ss_ticket_number#423) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_customer_sk#417))
                                 :     :     :     :     :           +- *(1) ColumnarToRow
                                 :     :     :     :     :              +- FileScan parquet default.store_sales[ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ticket_number#423,ss_net_paid#434] Batched: true, DataFilters: [isnotnull(ss_ticket_number#423), isnotnull(ss_item_sk#416), isnotnull(ss_store_sk#421), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal...
                                 :     :     :     :     +- *(8) Sort [sr_ticket_number#13 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                                 :     :     :     :        +- ShuffleQueryStage 1
                                 :     :     :     :           +- Exchange hashpartitioning(sr_ticket_number#13, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=74058]
                                 :     :     :     :              +- *(2) Filter (isnotnull(sr_ticket_number#13) AND isnotnull(sr_item_sk#6))
                                 :     :     :     :                 +- *(2) ColumnarToRow
                                 :     :     :     :                    +- FileScan parquet default.store_returns[sr_item_sk#6,sr_ticket_number#13] Batched: true, DataFilters: [isnotnull(sr_ticket_number#13), isnotnull(sr_item_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>
                                 :     :     :     +- BroadcastQueryStage 2
                                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=74079]
                                 :     :     :           +- *(3) Project [s_store_sk#52, s_store_name#57, s_state#76, s_zip#77]
                                 :     :     :              +- *(3) Filter (((isnotnull(s_market_id#62) AND (s_market_id#62 = 8)) AND isnotnull(s_store_sk#52)) AND isnotnull(s_zip#77))
                                 :     :     :                 +- *(3) ColumnarToRow
                                 :     :     :                    +- FileScan parquet default.store[s_store_sk#52,s_store_name#57,s_market_id#62,s_state#76,s_zip#77] Batched: true, DataFilters: [isnotnull(s_market_id#62), (s_market_id#62 = 8), isnotnull(s_store_sk#52), isnotnull(s_zip#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>
                                 :     :     +- BroadcastQueryStage 3
                                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=74098]
                                 :     :           +- *(4) Filter ((isnotnull(i_color#454) AND (i_color#454 = pale                )) AND isnotnull(i_item_sk#437))
                                 :     :              +- *(4) ColumnarToRow
                                 :     :                 +- FileScan parquet default.item[i_item_sk#437,i_current_price#442,i_size#452,i_color#454,i_units#455,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_color#454), (i_color#454 = pale                ), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...
                                 :     +- BroadcastQueryStage 4
                                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=74115]
                                 :           +- *(5) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_birth_country#95))
                                 :              +- *(5) ColumnarToRow
                                 :                 +- FileScan parquet default.customer[c_customer_sk#81,c_first_name#89,c_last_name#90,c_birth_country#95] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_birth_country#95)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>
                                 +- BroadcastQueryStage 5
                                    +- BroadcastExchange HashedRelationBroadcastMode(List(upper(input[2, string, false]), input[1, string, false]),false), [plan_id=74132]
                                       +- *(6) Filter (isnotnull(ca_country#3727) AND isnotnull(ca_zip#3726))
                                          +- *(6) ColumnarToRow
                                             +- FileScan parquet default.customer_address[ca_state#3725,ca_zip#3726,ca_country#3727] Batched: true, DataFilters: [isnotnull(ca_country#3727), isnotnull(ca_zip#3726)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

==== q25 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(15) HashAggregate(keys=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57], functions=[sum(UnscaledValue(ss_net_profit#436)), sum(UnscaledValue(sr_net_loss#23)), sum(UnscaledValue(cs_net_profit#230))], output=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57, store_sales_profit#8826, store_returns_loss#8827, catalog_sales_profit#8828])
   +- ShuffleQueryStage 10
      +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57, 20), ENSURE_REQUIREMENTS, [plan_id=78100]
         +- *(14) HashAggregate(keys=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57], functions=[partial_sum(UnscaledValue(ss_net_profit#436)), partial_sum(UnscaledValue(sr_net_loss#23)), partial_sum(UnscaledValue(cs_net_profit#230))], output=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57, sum#8900L, sum#8901L, sum#8902L])
            +- *(14) Project [ss_net_profit#436, sr_net_loss#23, cs_net_profit#230, s_store_id#53, s_store_name#57, i_item_id#438, i_item_desc#441]
               +- *(14) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :- *(14) Project [ss_item_sk#416, ss_net_profit#436, sr_net_loss#23, cs_net_profit#230, s_store_id#53, s_store_name#57]
                  :  +- *(14) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                  :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_net_profit#436, sr_net_loss#23, cs_net_profit#230]
                  :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#8857], Inner, BuildRight, false
                  :     :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_net_profit#436, sr_net_loss#23, cs_sold_date_sk#197, cs_net_profit#230]
                  :     :     :  +- *(14) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#8829], Inner, BuildRight, false
                  :     :     :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_net_profit#436, sr_returned_date_sk#4, sr_net_loss#23, cs_sold_date_sk#197, cs_net_profit#230]
                  :     :     :     :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :     :     :- *(14) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_net_profit#436, sr_returned_date_sk#4, sr_net_loss#23, cs_sold_date_sk#197, cs_net_profit#230]
                  :     :     :     :     :  +- *(14) SortMergeJoin [sr_customer_sk#7, sr_item_sk#6], [cs_bill_customer_sk#200, cs_item_sk#212], Inner
                  :     :     :     :     :     :- *(12) Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :  +- ShuffleQueryStage 9
                  :     :     :     :     :     :     +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=77855]
                  :     :     :     :     :     :        +- *(11) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_net_profit#436, sr_returned_date_sk#4, sr_item_sk#6, sr_customer_sk#7, sr_net_loss#23]
                  :     :     :     :     :     :           +- *(11) SortMergeJoin [ss_customer_sk#417, ss_item_sk#416, ss_ticket_number#423], [sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13], Inner
                  :     :     :     :     :     :              :- *(9) Sort [ss_customer_sk#417 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST, ss_ticket_number#423 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :              :  +- ShuffleQueryStage 0
                  :     :     :     :     :     :              :     +- Exchange hashpartitioning(ss_customer_sk#417, ss_item_sk#416, ss_ticket_number#423, 20), ENSURE_REQUIREMENTS, [plan_id=77103]
                  :     :     :     :     :     :              :        +- *(1) Filter ((((isnotnull(ss_customer_sk#417) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_ticket_number#423)) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
                  :     :     :     :     :     :              :           +- *(1) ColumnarToRow
                  :     :     :     :     :     :              :              +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ticket_number#423,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_customer_sk#417), isnotnull(ss_item_sk#416), isnotnull(ss_ticket_number#423), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int...
                  :     :     :     :     :     :              +- *(10) Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST, sr_ticket_number#13 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :                 +- ShuffleQueryStage 1
                  :     :     :     :     :     :                    +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13, 20), ENSURE_REQUIREMENTS, [plan_id=77120]
                  :     :     :     :     :     :                       +- *(2) Filter (((isnotnull(sr_customer_sk#7) AND isnotnull(sr_item_sk#6)) AND isnotnull(sr_ticket_number#13)) AND isnotnull(sr_returned_date_sk#4))
                  :     :     :     :     :     :                          +- *(2) ColumnarToRow
                  :     :     :     :     :     :                             +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_item_sk#6,sr_customer_sk#7,sr_ticket_number#13,sr_net_loss#23] Batched: true, DataFilters: [isnotnull(sr_customer_sk#7), isnotnull(sr_item_sk#6), isnotnull(sr_ticket_number#13), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_retu..., ReadSchema: struct<sr_returned_date_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_net_loss...
                  :     :     :     :     :     +- *(13) Sort [cs_bill_customer_sk#200 ASC NULLS FIRST, cs_item_sk#212 ASC NULLS FIRST], false, 0
                  :     :     :     :     :        +- ShuffleQueryStage 2
                  :     :     :     :     :           +- Exchange hashpartitioning(cs_bill_customer_sk#200, cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=77141]
                  :     :     :     :     :              +- *(3) Filter ((isnotnull(cs_bill_customer_sk#200) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_date_sk#197))
                  :     :     :     :     :                 +- *(3) ColumnarToRow
                  :     :     :     :     :                    +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#200), isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>
                  :     :     :     :     +- BroadcastQueryStage 3
                  :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=77162]
                  :     :     :     :           +- *(4) Project [d_date_sk#24]
                  :     :     :     :              +- *(4) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 4)) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                  :     :     :     :                 +- *(4) ColumnarToRow
                  :     :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 4), (d_year#30 = 2001), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :     :     :     +- BroadcastQueryStage 4
                  :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=77183]
                  :     :     :           +- *(5) Project [d_date_sk#8829]
                  :     :     :              +- *(5) Filter (((((isnotnull(d_moy#8837) AND isnotnull(d_year#8835)) AND (d_moy#8837 >= 4)) AND (d_moy#8837 <= 10)) AND (d_year#8835 = 2001)) AND isnotnull(d_date_sk#8829))
                  :     :     :                 +- *(5) ColumnarToRow
                  :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#8829,d_year#8835,d_moy#8837] Batched: true, DataFilters: [isnotnull(d_moy#8837), isnotnull(d_year#8835), (d_moy#8837 >= 4), (d_moy#8837 <= 10), (d_year#88..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :     :     +- BroadcastQueryStage 6
                  :     :        +- ReusedExchange [d_date_sk#8857], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=77183]
                  :     +- BroadcastQueryStage 7
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=77225]
                  :           +- *(7) Filter isnotnull(s_store_sk#52)
                  :              +- *(7) ColumnarToRow
                  :                 +- FileScan parquet default.store[s_store_sk#52,s_store_id#53,s_store_name#57] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
                  +- BroadcastQueryStage 8
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=77242]
                        +- *(8) Filter isnotnull(i_item_sk#437)
                           +- *(8) ColumnarToRow
                              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

==== q26 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#438 ASC NULLS FIRST], output=[i_item_id#438,agg1#8915,agg2#8916,agg3#8917,agg4#8918])
   +- *(7) HashAggregate(keys=[i_item_id#438], functions=[avg(cs_quantity#215), avg(UnscaledValue(cs_list_price#217)), avg(UnscaledValue(cs_coupon_amt#224)), avg(UnscaledValue(cs_sales_price#218))], output=[i_item_id#438, agg1#8915, agg2#8916, agg3#8917, agg4#8918])
      +- ShuffleQueryStage 6
         +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=78847]
            +- *(6) HashAggregate(keys=[i_item_id#438], functions=[partial_avg(cs_quantity#215), partial_avg(UnscaledValue(cs_list_price#217)), partial_avg(UnscaledValue(cs_coupon_amt#224)), partial_avg(UnscaledValue(cs_sales_price#218))], output=[i_item_id#438, sum#8936, count#8937L, sum#8938, count#8939L, sum#8940, count#8941L, sum#8942, count#8943L])
               +- *(6) Project [cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, i_item_id#438]
                  +- *(6) BroadcastHashJoin [cs_promo_sk#213], [p_promo_sk#3642], Inner, BuildRight, false
                     :- *(6) Project [cs_promo_sk#213, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224, i_item_id#438]
                     :  +- *(6) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#437], Inner, BuildRight, false
                     :     :- *(6) Project [cs_item_sk#212, cs_promo_sk#213, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224]
                     :     :  +- *(6) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                     :     :     :- *(6) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_promo_sk#213, cs_quantity#215, cs_list_price#217, cs_sales_price#218, cs_coupon_amt#224]
                     :     :     :  +- *(6) BroadcastHashJoin [cs_bill_cdemo_sk#201], [cd_demo_sk#3633], Inner, BuildRight, false
                     :     :     :     :- AQEShuffleRead local
                     :     :     :     :  +- ShuffleQueryStage 0
                     :     :     :     :     +- Exchange hashpartitioning(cs_bill_cdemo_sk#201, 20), ENSURE_REQUIREMENTS, [plan_id=78328]
                     :     :     :     :        +- *(1) Filter (((isnotnull(cs_bill_cdemo_sk#201) AND isnotnull(cs_sold_date_sk#197)) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_promo_sk#213))
                     :     :     :     :           +- *(1) ColumnarToRow
                     :     :     :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_cdemo_sk#201,cs_item_sk#212,cs_promo_sk#213,cs_quantity#215,cs_list_price#217,cs_sales_price#218,cs_coupon_amt#224] Batched: true, DataFilters: [isnotnull(cs_bill_cdemo_sk#201), isnotnull(cs_sold_date_sk#197), isnotnull(cs_item_sk#212), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_quantity:int,cs...
                     :     :     :     +- BroadcastQueryStage 5
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=78742]
                     :     :     :           +- AQEShuffleRead local
                     :     :     :              +- ShuffleQueryStage 1
                     :     :     :                 +- Exchange hashpartitioning(cd_demo_sk#3633, 20), ENSURE_REQUIREMENTS, [plan_id=78347]
                     :     :     :                    +- *(2) Project [cd_demo_sk#3633]
                     :     :     :                       +- *(2) Filter ((((((isnotnull(cd_gender#3634) AND isnotnull(cd_marital_status#3635)) AND isnotnull(cd_education_status#3636)) AND (cd_gender#3634 = M)) AND (cd_marital_status#3635 = S)) AND (cd_education_status#3636 = College             )) AND isnotnull(cd_demo_sk#3633))
                     :     :     :                          +- *(2) ColumnarToRow
                     :     :     :                             +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_gender#3634,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [isnotnull(cd_gender#3634), isnotnull(cd_marital_status#3635), isnotnull(cd_education_status#3636..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                     :     :     +- BroadcastQueryStage 2
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=78370]
                     :     :           +- *(3) Project [d_date_sk#24]
                     :     :              +- *(3) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
                     :     :                 +- *(3) ColumnarToRow
                     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     :     +- BroadcastQueryStage 3
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=78389]
                     :           +- *(4) Filter isnotnull(i_item_sk#437)
                     :              +- *(4) ColumnarToRow
                     :                 +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                     +- BroadcastQueryStage 4
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=78408]
                           +- *(5) Project [p_promo_sk#3642]
                              +- *(5) Filter (((p_channel_email#3651 = N) OR (p_channel_event#3656 = N)) AND isnotnull(p_promo_sk#3642))
                                 +- *(5) ColumnarToRow
                                    +- FileScan parquet default.promotion[p_promo_sk#3642,p_channel_email#3651,p_channel_event#3656] Batched: true, DataFilters: [((p_channel_email#3651 = N) OR (p_channel_event#3656 = N)), isnotnull(p_promo_sk#3642)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/promotion], PartitionFilters: [], PushedFilters: [Or(EqualTo(p_channel_email,N),EqualTo(p_channel_event,N)), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>

==== q27 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#8996 ASC NULLS FIRST,s_state#8997 ASC NULLS FIRST], output=[i_item_id#8996,s_state#8997,g_state#8984,agg1#8985,agg2#8986,agg3#8987,agg4#8988])
   +- *(6) HashAggregate(keys=[i_item_id#8996, s_state#8997, spark_grouping_id#8995L], functions=[avg(ss_quantity#424), avg(UnscaledValue(ss_list_price#426)), avg(UnscaledValue(ss_coupon_amt#433)), avg(UnscaledValue(ss_sales_price#427))], output=[i_item_id#8996, s_state#8997, g_state#8984, agg1#8985, agg2#8986, agg3#8987, agg4#8988])
      +- ShuffleQueryStage 4
         +- Exchange hashpartitioning(i_item_id#8996, s_state#8997, spark_grouping_id#8995L, 20), ENSURE_REQUIREMENTS, [plan_id=79427]
            +- *(5) HashAggregate(keys=[i_item_id#8996, s_state#8997, spark_grouping_id#8995L], functions=[partial_avg(ss_quantity#424), partial_avg(UnscaledValue(ss_list_price#426)), partial_avg(UnscaledValue(ss_coupon_amt#433)), partial_avg(UnscaledValue(ss_sales_price#427))], output=[i_item_id#8996, s_state#8997, spark_grouping_id#8995L, sum#9014, count#9015L, sum#9016, count#9017L, sum#9018, count#9019L, sum#9020, count#9021L])
               +- *(5) Expand [[ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, i_item_id#438, s_state#76, 0], [ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, i_item_id#438, null, 1], [ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, null, null, 3]], [ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, i_item_id#8996, s_state#8997, spark_grouping_id#8995L]
                  +- *(5) Project [ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, i_item_id#438, s_state#76]
                     +- *(5) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                        :- *(5) Project [ss_item_sk#416, ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433, s_state#76]
                        :  +- *(5) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                        :     :- *(5) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433]
                        :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :- *(5) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_quantity#424, ss_list_price#426, ss_sales_price#427, ss_coupon_amt#433]
                        :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#418], [cd_demo_sk#3633], Inner, BuildRight, false
                        :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#418) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_item_sk#416))
                        :     :     :     :  +- *(5) ColumnarToRow
                        :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_cdemo_sk#418,ss_store_sk#421,ss_quantity#424,ss_list_price#426,ss_sales_price#427,ss_coupon_amt#433] Batched: true, DataFilters: [isnotnull(ss_cdemo_sk#418), isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list...
                        :     :     :     +- BroadcastQueryStage 0
                        :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=79058]
                        :     :     :           +- *(1) Project [cd_demo_sk#3633]
                        :     :     :              +- *(1) Filter ((((((isnotnull(cd_gender#3634) AND isnotnull(cd_marital_status#3635)) AND isnotnull(cd_education_status#3636)) AND (cd_gender#3634 = M)) AND (cd_marital_status#3635 = S)) AND (cd_education_status#3636 = College             )) AND isnotnull(cd_demo_sk#3633))
                        :     :     :                 +- *(1) ColumnarToRow
                        :     :     :                    +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_gender#3634,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [isnotnull(cd_gender#3634), isnotnull(cd_marital_status#3635), isnotnull(cd_education_status#3636..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_g..., ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>
                        :     :     +- BroadcastQueryStage 1
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=79079]
                        :     :           +- *(2) Project [d_date_sk#24]
                        :     :              +- *(2) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2002)) AND isnotnull(d_date_sk#24))
                        :     :                 +- *(2) ColumnarToRow
                        :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2002), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                        :     +- BroadcastQueryStage 2
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=79098]
                        :           +- *(3) Filter ((isnotnull(s_state#76) AND (s_state#76 = TN)) AND isnotnull(s_store_sk#52))
                        :              +- *(3) ColumnarToRow
                        :                 +- FileScan parquet default.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_state#76), (s_state#76 = TN), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                        +- BroadcastQueryStage 3
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=79115]
                              +- *(4) Filter isnotnull(i_item_sk#437)
                                 +- *(4) ColumnarToRow
                                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>

==== q28 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(19) BroadcastNestedLoopJoin BuildRight, Inner
   :- *(19) BroadcastNestedLoopJoin BuildRight, Inner
   :  :- *(19) BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :- *(19) BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :  :- CartesianProduct
   :  :  :  :  :- *(17) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#426)), count(ss_list_price#426), count(distinct ss_list_price#426)], output=[B1_LP#9046, B1_CNT#9047L, B1_CNTD#9048L])
   :  :  :  :  :  +- ShuffleQueryStage 6
   :  :  :  :  :     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=79984]
   :  :  :  :  :        +- *(7) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#426)), merge_count(ss_list_price#426), partial_count(distinct ss_list_price#426)], output=[sum#9222, count#9223L, count#9225L, count#9228L])
   :  :  :  :  :           +- *(7) HashAggregate(keys=[ss_list_price#426], functions=[merge_avg(UnscaledValue(ss_list_price#426)), merge_count(ss_list_price#426)], output=[ss_list_price#426, sum#9222, count#9223L, count#9225L])
   :  :  :  :  :              +- ShuffleQueryStage 0
   :  :  :  :  :                 +- Exchange hashpartitioning(ss_list_price#426, 20), ENSURE_REQUIREMENTS, [plan_id=79689]
   :  :  :  :  :                    +- *(1) HashAggregate(keys=[ss_list_price#426], functions=[partial_avg(UnscaledValue(ss_list_price#426)), partial_count(ss_list_price#426)], output=[ss_list_price#426, sum#9222, count#9223L, count#9225L])
   :  :  :  :  :                       +- *(1) Project [ss_list_price#426]
   :  :  :  :  :                          +- *(1) Filter (((isnotnull(ss_quantity#424) AND (ss_quantity#424 >= 0)) AND (ss_quantity#424 <= 5)) AND ((((ss_list_price#426 >= 8.00) AND (ss_list_price#426 <= 18.00)) OR ((ss_coupon_amt#433 >= 459.00) AND (ss_coupon_amt#433 <= 1459.00))) OR ((ss_wholesale_cost#425 >= 57.00) AND (ss_wholesale_cost#425 <= 77.00))))
   :  :  :  :  :                             +- *(1) ColumnarToRow
   :  :  :  :  :                                +- FileScan parquet default.store_sales[ss_quantity#424,ss_wholesale_cost#425,ss_list_price#426,ss_coupon_amt#433] Batched: true, DataFilters: [isnotnull(ss_quantity#424), (ss_quantity#424 >= 0), (ss_quantity#424 <= 5), ((((ss_list_price#42..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,0), LessThanOrEqual(ss_quantity,5), Or(Or..., ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  :  :  +- *(18) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#9076)), count(ss_list_price#9076), count(distinct ss_list_price#9076)], output=[B2_LP#9049, B2_CNT#9050L, B2_CNTD#9051L])
   :  :  :  :     +- ShuffleQueryStage 7
   :  :  :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=80066]
   :  :  :  :           +- *(8) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#9076)), merge_count(ss_list_price#9076), partial_count(distinct ss_list_price#9076)], output=[sum#9232, count#9233L, count#9235L, count#9238L])
   :  :  :  :              +- *(8) HashAggregate(keys=[ss_list_price#9076], functions=[merge_avg(UnscaledValue(ss_list_price#9076)), merge_count(ss_list_price#9076)], output=[ss_list_price#9076, sum#9232, count#9233L, count#9235L])
   :  :  :  :                 +- ShuffleQueryStage 1
   :  :  :  :                    +- Exchange hashpartitioning(ss_list_price#9076, 20), ENSURE_REQUIREMENTS, [plan_id=79731]
   :  :  :  :                       +- *(2) HashAggregate(keys=[ss_list_price#9076], functions=[partial_avg(UnscaledValue(ss_list_price#9076)), partial_count(ss_list_price#9076)], output=[ss_list_price#9076, sum#9232, count#9233L, count#9235L])
   :  :  :  :                          +- *(2) Project [ss_list_price#9076]
   :  :  :  :                             +- *(2) Filter (((isnotnull(ss_quantity#9074) AND (ss_quantity#9074 >= 6)) AND (ss_quantity#9074 <= 10)) AND ((((ss_list_price#9076 >= 90.00) AND (ss_list_price#9076 <= 100.00)) OR ((ss_coupon_amt#9083 >= 2323.00) AND (ss_coupon_amt#9083 <= 3323.00))) OR ((ss_wholesale_cost#9075 >= 31.00) AND (ss_wholesale_cost#9075 <= 51.00))))
   :  :  :  :                                +- *(2) ColumnarToRow
   :  :  :  :                                   +- FileScan parquet default.store_sales[ss_quantity#9074,ss_wholesale_cost#9075,ss_list_price#9076,ss_coupon_amt#9083] Batched: true, DataFilters: [isnotnull(ss_quantity#9074), (ss_quantity#9074 >= 6), (ss_quantity#9074 <= 10), ((((ss_list_pric..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,6), LessThanOrEqual(ss_quantity,10), Or(O..., ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  :  +- BroadcastQueryStage 12
   :  :  :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=80348]
   :  :  :        +- *(13) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#9099)), count(ss_list_price#9099), count(distinct ss_list_price#9099)], output=[B3_LP#9052, B3_CNT#9053L, B3_CNTD#9054L])
   :  :  :           +- ShuffleQueryStage 8
   :  :  :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=80111]
   :  :  :                 +- *(9) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#9099)), merge_count(ss_list_price#9099), partial_count(distinct ss_list_price#9099)], output=[sum#9242, count#9243L, count#9245L, count#9248L])
   :  :  :                    +- *(9) HashAggregate(keys=[ss_list_price#9099], functions=[merge_avg(UnscaledValue(ss_list_price#9099)), merge_count(ss_list_price#9099)], output=[ss_list_price#9099, sum#9242, count#9243L, count#9245L])
   :  :  :                       +- ShuffleQueryStage 2
   :  :  :                          +- Exchange hashpartitioning(ss_list_price#9099, 20), ENSURE_REQUIREMENTS, [plan_id=79777]
   :  :  :                             +- *(3) HashAggregate(keys=[ss_list_price#9099], functions=[partial_avg(UnscaledValue(ss_list_price#9099)), partial_count(ss_list_price#9099)], output=[ss_list_price#9099, sum#9242, count#9243L, count#9245L])
   :  :  :                                +- *(3) Project [ss_list_price#9099]
   :  :  :                                   +- *(3) Filter (((isnotnull(ss_quantity#9097) AND (ss_quantity#9097 >= 11)) AND (ss_quantity#9097 <= 15)) AND ((((ss_list_price#9099 >= 142.00) AND (ss_list_price#9099 <= 152.00)) OR ((ss_coupon_amt#9106 >= 12214.00) AND (ss_coupon_amt#9106 <= 13214.00))) OR ((ss_wholesale_cost#9098 >= 79.00) AND (ss_wholesale_cost#9098 <= 99.00))))
   :  :  :                                      +- *(3) ColumnarToRow
   :  :  :                                         +- FileScan parquet default.store_sales[ss_quantity#9097,ss_wholesale_cost#9098,ss_list_price#9099,ss_coupon_amt#9106] Batched: true, DataFilters: [isnotnull(ss_quantity#9097), (ss_quantity#9097 >= 11), (ss_quantity#9097 <= 15), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,11), LessThanOrEqual(ss_quantity,15), Or(..., ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  :  +- BroadcastQueryStage 13
   :  :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=80425]
   :  :        +- *(14) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#9122)), count(ss_list_price#9122), count(distinct ss_list_price#9122)], output=[B4_LP#9055, B4_CNT#9056L, B4_CNTD#9057L])
   :  :           +- ShuffleQueryStage 9
   :  :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=80155]
   :  :                 +- *(10) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#9122)), merge_count(ss_list_price#9122), partial_count(distinct ss_list_price#9122)], output=[sum#9252, count#9253L, count#9255L, count#9258L])
   :  :                    +- *(10) HashAggregate(keys=[ss_list_price#9122], functions=[merge_avg(UnscaledValue(ss_list_price#9122)), merge_count(ss_list_price#9122)], output=[ss_list_price#9122, sum#9252, count#9253L, count#9255L])
   :  :                       +- ShuffleQueryStage 3
   :  :                          +- Exchange hashpartitioning(ss_list_price#9122, 20), ENSURE_REQUIREMENTS, [plan_id=79824]
   :  :                             +- *(4) HashAggregate(keys=[ss_list_price#9122], functions=[partial_avg(UnscaledValue(ss_list_price#9122)), partial_count(ss_list_price#9122)], output=[ss_list_price#9122, sum#9252, count#9253L, count#9255L])
   :  :                                +- *(4) Project [ss_list_price#9122]
   :  :                                   +- *(4) Filter (((isnotnull(ss_quantity#9120) AND (ss_quantity#9120 >= 16)) AND (ss_quantity#9120 <= 20)) AND ((((ss_list_price#9122 >= 135.00) AND (ss_list_price#9122 <= 145.00)) OR ((ss_coupon_amt#9129 >= 6071.00) AND (ss_coupon_amt#9129 <= 7071.00))) OR ((ss_wholesale_cost#9121 >= 38.00) AND (ss_wholesale_cost#9121 <= 58.00))))
   :  :                                      +- *(4) ColumnarToRow
   :  :                                         +- FileScan parquet default.store_sales[ss_quantity#9120,ss_wholesale_cost#9121,ss_list_price#9122,ss_coupon_amt#9129] Batched: true, DataFilters: [isnotnull(ss_quantity#9120), (ss_quantity#9120 >= 16), (ss_quantity#9120 <= 20), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,16), LessThanOrEqual(ss_quantity,20), Or(..., ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   :  +- BroadcastQueryStage 14
   :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=80496]
   :        +- *(15) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#9145)), count(ss_list_price#9145), count(distinct ss_list_price#9145)], output=[B5_LP#9058, B5_CNT#9059L, B5_CNTD#9060L])
   :           +- ShuffleQueryStage 10
   :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=80198]
   :                 +- *(11) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#9145)), merge_count(ss_list_price#9145), partial_count(distinct ss_list_price#9145)], output=[sum#9262, count#9263L, count#9265L, count#9268L])
   :                    +- *(11) HashAggregate(keys=[ss_list_price#9145], functions=[merge_avg(UnscaledValue(ss_list_price#9145)), merge_count(ss_list_price#9145)], output=[ss_list_price#9145, sum#9262, count#9263L, count#9265L])
   :                       +- ShuffleQueryStage 4
   :                          +- Exchange hashpartitioning(ss_list_price#9145, 20), ENSURE_REQUIREMENTS, [plan_id=79871]
   :                             +- *(5) HashAggregate(keys=[ss_list_price#9145], functions=[partial_avg(UnscaledValue(ss_list_price#9145)), partial_count(ss_list_price#9145)], output=[ss_list_price#9145, sum#9262, count#9263L, count#9265L])
   :                                +- *(5) Project [ss_list_price#9145]
   :                                   +- *(5) Filter (((isnotnull(ss_quantity#9143) AND (ss_quantity#9143 >= 21)) AND (ss_quantity#9143 <= 25)) AND ((((ss_list_price#9145 >= 122.00) AND (ss_list_price#9145 <= 132.00)) OR ((ss_coupon_amt#9152 >= 836.00) AND (ss_coupon_amt#9152 <= 1836.00))) OR ((ss_wholesale_cost#9144 >= 17.00) AND (ss_wholesale_cost#9144 <= 37.00))))
   :                                      +- *(5) ColumnarToRow
   :                                         +- FileScan parquet default.store_sales[ss_quantity#9143,ss_wholesale_cost#9144,ss_list_price#9145,ss_coupon_amt#9152] Batched: true, DataFilters: [isnotnull(ss_quantity#9143), (ss_quantity#9143 >= 21), (ss_quantity#9143 <= 25), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,25), Or(..., ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...
   +- BroadcastQueryStage 15
      +- BroadcastExchange IdentityBroadcastMode, [plan_id=80565]
         +- *(16) HashAggregate(keys=[], functions=[avg(UnscaledValue(ss_list_price#9168)), count(ss_list_price#9168), count(distinct ss_list_price#9168)], output=[B6_LP#9061, B6_CNT#9062L, B6_CNTD#9063L])
            +- ShuffleQueryStage 11
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=80240]
                  +- *(12) HashAggregate(keys=[], functions=[merge_avg(UnscaledValue(ss_list_price#9168)), merge_count(ss_list_price#9168), partial_count(distinct ss_list_price#9168)], output=[sum#9272, count#9273L, count#9275L, count#9278L])
                     +- *(12) HashAggregate(keys=[ss_list_price#9168], functions=[merge_avg(UnscaledValue(ss_list_price#9168)), merge_count(ss_list_price#9168)], output=[ss_list_price#9168, sum#9272, count#9273L, count#9275L])
                        +- ShuffleQueryStage 5
                           +- Exchange hashpartitioning(ss_list_price#9168, 20), ENSURE_REQUIREMENTS, [plan_id=79918]
                              +- *(6) HashAggregate(keys=[ss_list_price#9168], functions=[partial_avg(UnscaledValue(ss_list_price#9168)), partial_count(ss_list_price#9168)], output=[ss_list_price#9168, sum#9272, count#9273L, count#9275L])
                                 +- *(6) Project [ss_list_price#9168]
                                    +- *(6) Filter (((isnotnull(ss_quantity#9166) AND (ss_quantity#9166 >= 26)) AND (ss_quantity#9166 <= 30)) AND ((((ss_list_price#9168 >= 154.00) AND (ss_list_price#9168 <= 164.00)) OR ((ss_coupon_amt#9175 >= 7326.00) AND (ss_coupon_amt#9175 <= 8326.00))) OR ((ss_wholesale_cost#9167 >= 7.00) AND (ss_wholesale_cost#9167 <= 27.00))))
                                       +- *(6) ColumnarToRow
                                          +- FileScan parquet default.store_sales[ss_quantity#9166,ss_wholesale_cost#9167,ss_list_price#9168,ss_coupon_amt#9175] Batched: true, DataFilters: [isnotnull(ss_quantity#9166), (ss_quantity#9166 >= 26), (ss_quantity#9166 <= 30), ((((ss_list_pri..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,26), LessThanOrEqual(ss_quantity,30), Or(..., ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:de...


==== q29 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(15) HashAggregate(keys=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57], functions=[sum(ss_quantity#424), sum(sr_return_quantity#14), sum(cs_quantity#215)], output=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57, store_sales_quantity#9590L, store_returns_quantity#9591L, catalog_sales_quantity#9592L])
   +- ShuffleQueryStage 9
      +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57, 20), ENSURE_REQUIREMENTS, [plan_id=81979]
         +- *(14) HashAggregate(keys=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57], functions=[partial_sum(ss_quantity#424), partial_sum(sr_return_quantity#14), partial_sum(cs_quantity#215)], output=[i_item_id#438, i_item_desc#441, s_store_id#53, s_store_name#57, sum#9664L, sum#9665L, sum#9666L])
            +- *(14) Project [ss_quantity#424, sr_return_quantity#14, cs_quantity#215, s_store_id#53, s_store_name#57, i_item_id#438, i_item_desc#441]
               +- *(14) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :- *(14) Project [ss_item_sk#416, ss_quantity#424, sr_return_quantity#14, cs_quantity#215, s_store_id#53, s_store_name#57]
                  :  +- *(14) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                  :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_return_quantity#14, cs_quantity#215]
                  :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#9621], Inner, BuildRight, false
                  :     :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_return_quantity#14, cs_sold_date_sk#197, cs_quantity#215]
                  :     :     :  +- *(14) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#9593], Inner, BuildRight, false
                  :     :     :     :- *(14) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_returned_date_sk#4, sr_return_quantity#14, cs_sold_date_sk#197, cs_quantity#215]
                  :     :     :     :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :     :     :- *(14) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_returned_date_sk#4, sr_return_quantity#14, cs_sold_date_sk#197, cs_quantity#215]
                  :     :     :     :     :  +- *(14) SortMergeJoin [sr_customer_sk#7, sr_item_sk#6], [cs_bill_customer_sk#200, cs_item_sk#212], Inner
                  :     :     :     :     :     :- *(12) Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :  +- ShuffleQueryStage 8
                  :     :     :     :     :     :     +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=81734]
                  :     :     :     :     :     :        +- *(11) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_quantity#424, sr_returned_date_sk#4, sr_item_sk#6, sr_customer_sk#7, sr_return_quantity#14]
                  :     :     :     :     :     :           +- *(11) SortMergeJoin [ss_customer_sk#417, ss_item_sk#416, ss_ticket_number#423], [sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13], Inner
                  :     :     :     :     :     :              :- *(9) Sort [ss_customer_sk#417 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST, ss_ticket_number#423 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :              :  +- ShuffleQueryStage 0
                  :     :     :     :     :     :              :     +- Exchange hashpartitioning(ss_customer_sk#417, ss_item_sk#416, ss_ticket_number#423, 20), ENSURE_REQUIREMENTS, [plan_id=80893]
                  :     :     :     :     :     :              :        +- *(1) Filter ((((isnotnull(ss_customer_sk#417) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_ticket_number#423)) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
                  :     :     :     :     :     :              :           +- *(1) ColumnarToRow
                  :     :     :     :     :     :              :              +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ticket_number#423,ss_quantity#424] Batched: true, DataFilters: [isnotnull(ss_customer_sk#417), isnotnull(ss_item_sk#416), isnotnull(ss_ticket_number#423), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int...
                  :     :     :     :     :     :              +- *(10) Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST, sr_ticket_number#13 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :                 +- ShuffleQueryStage 1
                  :     :     :     :     :     :                    +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13, 20), ENSURE_REQUIREMENTS, [plan_id=80910]
                  :     :     :     :     :     :                       +- *(2) Filter (((isnotnull(sr_customer_sk#7) AND isnotnull(sr_item_sk#6)) AND isnotnull(sr_ticket_number#13)) AND isnotnull(sr_returned_date_sk#4))
                  :     :     :     :     :     :                          +- *(2) ColumnarToRow
                  :     :     :     :     :     :                             +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_item_sk#6,sr_customer_sk#7,sr_ticket_number#13,sr_return_quantity#14] Batched: true, DataFilters: [isnotnull(sr_customer_sk#7), isnotnull(sr_item_sk#6), isnotnull(sr_ticket_number#13), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_retu..., ReadSchema: struct<sr_returned_date_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_q...
                  :     :     :     :     :     +- *(13) Sort [cs_bill_customer_sk#200 ASC NULLS FIRST, cs_item_sk#212 ASC NULLS FIRST], false, 0
                  :     :     :     :     :        +- ShuffleQueryStage 2
                  :     :     :     :     :           +- Exchange hashpartitioning(cs_bill_customer_sk#200, cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=80931]
                  :     :     :     :     :              +- *(3) Filter ((isnotnull(cs_bill_customer_sk#200) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_date_sk#197))
                  :     :     :     :     :                 +- *(3) ColumnarToRow
                  :     :     :     :     :                    +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212,cs_quantity#215] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#200), isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>
                  :     :     :     :     +- BroadcastQueryStage 3
                  :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=80952]
                  :     :     :     :           +- *(4) Project [d_date_sk#24]
                  :     :     :     :              +- *(4) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 9)) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#24))
                  :     :     :     :                 +- *(4) ColumnarToRow
                  :     :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 9), (d_year#30 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,9), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :     :     :     +- BroadcastQueryStage 4
                  :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=80973]
                  :     :     :           +- *(5) Project [d_date_sk#9593]
                  :     :     :              +- *(5) Filter (((((isnotnull(d_moy#9601) AND isnotnull(d_year#9599)) AND (d_moy#9601 >= 9)) AND (d_moy#9601 <= 12)) AND (d_year#9599 = 1999)) AND isnotnull(d_date_sk#9593))
                  :     :     :                 +- *(5) ColumnarToRow
                  :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#9593,d_year#9599,d_moy#9601] Batched: true, DataFilters: [isnotnull(d_moy#9601), isnotnull(d_year#9599), (d_moy#9601 >= 9), (d_moy#9601 <= 12), (d_year#95..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,9), LessThanOrEqual(d_moy,12), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :     :     +- BroadcastQueryStage 5
                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=80994]
                  :     :           +- *(6) Project [d_date_sk#9621]
                  :     :              +- *(6) Filter (d_year#9627 IN (1999,2000,2001) AND isnotnull(d_date_sk#9621))
                  :     :                 +- *(6) ColumnarToRow
                  :     :                    +- FileScan parquet default.date_dim[d_date_sk#9621,d_year#9627] Batched: true, DataFilters: [d_year#9627 IN (1999,2000,2001), isnotnull(d_date_sk#9621)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                  :     +- BroadcastQueryStage 6
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=81013]
                  :           +- *(7) Filter isnotnull(s_store_sk#52)
                  :              +- *(7) ColumnarToRow
                  :                 +- FileScan parquet default.store[s_store_sk#52,s_store_id#53,s_store_name#57] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
                  +- BroadcastQueryStage 7
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=81030]
                        +- *(8) Filter isnotnull(i_item_sk#437)
                           +- *(8) ColumnarToRow
                              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

==== q30 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST,c_salutation#88 ASC NULLS FIRST,c_first_name#89 ASC NULLS FIRST,c_last_name#90 ASC NULLS FIRST,c_preferred_cust_flag#91 ASC NULLS FIRST,c_birth_day#92 ASC NULLS FIRST,c_birth_month#93 ASC NULLS FIRST,c_birth_year#94 ASC NULLS FIRST,c_birth_country#95 ASC NULLS FIRST,c_login#96 ASC NULLS FIRST,c_email_address#97 ASC NULLS FIRST,c_last_review_date#98 ASC NULLS FIRST,ctr_total_return#9682 ASC NULLS FIRST], output=[c_customer_id#82,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98,ctr_total_return#9682])
   +- *(13) Project [c_customer_id#82, c_salutation#88, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_day#92, c_birth_month#93, c_birth_year#94, c_birth_country#95, c_login#96, c_email_address#97, c_last_review_date#98, ctr_total_return#9682]
      +- *(13) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#9683], Inner, BuildRight, false
         :- *(13) Project [ctr_total_return#9682, c_customer_id#82, c_current_addr_sk#85, c_salutation#88, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_day#92, c_birth_month#93, c_birth_year#94, c_birth_country#95, c_login#96, c_email_address#97, c_last_review_date#98]
         :  +- *(13) BroadcastHashJoin [ctr_customer_sk#9680], [c_customer_sk#81], Inner, BuildRight, false
         :     :- *(13) Project [ctr_customer_sk#9680, ctr_total_return#9682]
         :     :  +- *(13) BroadcastHashJoin [ctr_state#9681], [ctr_state#9681#9713], Inner, BuildLeft, (cast(ctr_total_return#9682 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#9698), false
         :     :     :- BroadcastQueryStage 15
         :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=83622]
         :     :     :     +- *(11) Filter isnotnull(ctr_total_return#9682)
         :     :     :        +- *(11) HashAggregate(keys=[wr_returning_customer_sk#3334, ca_state#3725], functions=[sum(UnscaledValue(wr_return_amt#3342))], output=[ctr_customer_sk#9680, ctr_state#9681, ctr_total_return#9682])
         :     :     :           +- ShuffleQueryStage 13
         :     :     :              +- Exchange hashpartitioning(wr_returning_customer_sk#3334, ca_state#3725, 20), ENSURE_REQUIREMENTS, [plan_id=83492]
         :     :     :                 +- *(9) HashAggregate(keys=[wr_returning_customer_sk#3334, ca_state#3725], functions=[partial_sum(UnscaledValue(wr_return_amt#3342))], output=[wr_returning_customer_sk#3334, ca_state#3725, sum#9715L])
         :     :     :                    +- *(9) Project [wr_returning_customer_sk#3334, wr_return_amt#3342, ca_state#3725]
         :     :     :                       +- *(9) BroadcastHashJoin [wr_returning_addr_sk#3337], [ca_address_sk#3717], Inner, BuildRight, false
         :     :     :                          :- *(9) Project [wr_returning_customer_sk#3334, wr_returning_addr_sk#3337, wr_return_amt#3342]
         :     :     :                          :  +- *(9) BroadcastHashJoin [wr_returned_date_sk#3327], [d_date_sk#24], Inner, BuildRight, false
         :     :     :                          :     :- AQEShuffleRead local
         :     :     :                          :     :  +- ShuffleQueryStage 0
         :     :     :                          :     :     +- Exchange hashpartitioning(wr_returned_date_sk#3327, 20), ENSURE_REQUIREMENTS, [plan_id=82303]
         :     :     :                          :     :        +- *(1) Filter ((isnotnull(wr_returned_date_sk#3327) AND isnotnull(wr_returning_addr_sk#3337)) AND isnotnull(wr_returning_customer_sk#3334))
         :     :     :                          :     :           +- *(1) ColumnarToRow
         :     :     :                          :     :              +- FileScan parquet default.web_returns[wr_returned_date_sk#3327,wr_returning_customer_sk#3334,wr_returning_addr_sk#3337,wr_return_amt#3342] Batched: true, DataFilters: [isnotnull(wr_returned_date_sk#3327), isnotnull(wr_returning_addr_sk#3337), isnotnull(wr_returnin..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_returned_date_sk), IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer..., ReadSchema: struct<wr_returned_date_sk:int,wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_am...
         :     :     :                          :     +- BroadcastQueryStage 10
         :     :     :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=83177]
         :     :     :                          :           +- AQEShuffleRead local
         :     :     :                          :              +- ShuffleQueryStage 1
         :     :     :                          :                 +- Exchange hashpartitioning(d_date_sk#24, 20), ENSURE_REQUIREMENTS, [plan_id=82322]
         :     :     :                          :                    +- *(2) Project [d_date_sk#24]
         :     :     :                          :                       +- *(2) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2002)) AND isnotnull(d_date_sk#24))
         :     :     :                          :                          +- *(2) ColumnarToRow
         :     :     :                          :                             +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2002), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :                          +- BroadcastQueryStage 2
         :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=82343]
         :     :     :                                +- *(3) Filter (isnotnull(ca_address_sk#3717) AND isnotnull(ca_state#3725))
         :     :     :                                   +- *(3) ColumnarToRow
         :     :     :                                      +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717), isnotnull(ca_state#3725)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
         :     :     +- *(13) Filter isnotnull((avg(ctr_total_return) * 1.2)#9698)
         :     :        +- *(13) HashAggregate(keys=[ctr_state#9681], functions=[avg(ctr_total_return#9682)], output=[(avg(ctr_total_return) * 1.2)#9698, ctr_state#9681#9713])
         :     :           +- ShuffleQueryStage 16
         :     :              +- Exchange hashpartitioning(ctr_state#9681, 20), ENSURE_REQUIREMENTS, [plan_id=83693]
         :     :                 +- *(12) HashAggregate(keys=[ctr_state#9681], functions=[partial_avg(ctr_total_return#9682)], output=[ctr_state#9681, sum#9718, count#9719L])
         :     :                    +- *(12) HashAggregate(keys=[wr_returning_customer_sk#3334, ca_state#3725], functions=[sum(UnscaledValue(wr_return_amt#3342))], output=[ctr_state#9681, ctr_total_return#9682])
         :     :                       +- ShuffleQueryStage 14
         :     :                          +- Exchange hashpartitioning(wr_returning_customer_sk#3334, ca_state#3725, 20), ENSURE_REQUIREMENTS, [plan_id=83531]
         :     :                             +- *(10) HashAggregate(keys=[wr_returning_customer_sk#3334, ca_state#3725], functions=[partial_sum(UnscaledValue(wr_return_amt#3342))], output=[wr_returning_customer_sk#3334, ca_state#3725, sum#9721L])
         :     :                                +- *(10) Project [wr_returning_customer_sk#3334, wr_return_amt#3342, ca_state#3725]
         :     :                                   +- *(10) BroadcastHashJoin [wr_returning_addr_sk#3337], [ca_address_sk#3717], Inner, BuildRight, false
         :     :                                      :- *(10) Project [wr_returning_customer_sk#3334, wr_returning_addr_sk#3337, wr_return_amt#3342]
         :     :                                      :  +- *(10) BroadcastHashJoin [wr_returned_date_sk#3327], [d_date_sk#24], Inner, BuildRight, false
         :     :                                      :     :- AQEShuffleRead local
         :     :                                      :     :  +- ShuffleQueryStage 3
         :     :                                      :     :     +- Exchange hashpartitioning(wr_returned_date_sk#3327, 20), ENSURE_REQUIREMENTS, [plan_id=82404]
         :     :                                      :     :        +- *(4) Filter (isnotnull(wr_returned_date_sk#3327) AND isnotnull(wr_returning_addr_sk#3337))
         :     :                                      :     :           +- *(4) ColumnarToRow
         :     :                                      :     :              +- FileScan parquet default.web_returns[wr_returned_date_sk#3327,wr_returning_customer_sk#3334,wr_returning_addr_sk#3337,wr_return_amt#3342] Batched: true, DataFilters: [isnotnull(wr_returned_date_sk#3327), isnotnull(wr_returning_addr_sk#3337)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_returned_date_sk), IsNotNull(wr_returning_addr_sk)], ReadSchema: struct<wr_returned_date_sk:int,wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_am...
         :     :                                      :     +- BroadcastQueryStage 12
         :     :                                      :        +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=83177]
         :     :                                      +- BroadcastQueryStage 7
         :     :                                         +- ReusedExchange [ca_address_sk#3717, ca_state#3725], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=82343]
         :     +- BroadcastQueryStage 8
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=82479]
         :           +- *(7) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
         :              +- *(7) ColumnarToRow
         :                 +- FileScan parquet default.customer[c_customer_sk#81,c_customer_id#82,c_current_addr_sk#85,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_n...
         +- BroadcastQueryStage 9
            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=82504]
               +- *(8) Project [ca_address_sk#9683]
                  +- *(8) Filter ((isnotnull(ca_state#9691) AND (ca_state#9691 = GA)) AND isnotnull(ca_address_sk#9683))
                     +- *(8) ColumnarToRow
                        +- FileScan parquet default.customer_address[ca_address_sk#9683,ca_state#9691] Batched: true, DataFilters: [isnotnull(ca_state#9691), (ca_state#9691 = GA), isnotnull(ca_address_sk#9683)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>


==== q31 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(28) Sort [ca_county#3724 ASC NULLS FIRST], true, 0
   +- ShuffleQueryStage 36
      +- Exchange rangepartitioning(ca_county#3724 ASC NULLS FIRST, 20), ENSURE_REQUIREMENTS, [plan_id=88431]
         +- *(27) Project [ca_county#3724, d_year#30, CheckOverflow((promote_precision(web_sales#9814) / promote_precision(web_sales#9757)), DecimalType(37,20)) AS web_q1_q2_increase#9752, CheckOverflow((promote_precision(store_sales#9806) / promote_precision(store_sales#9756)), DecimalType(37,20)) AS store_q1_q2_increase#9753, CheckOverflow((promote_precision(web_sales#9818) / promote_precision(web_sales#9814)), DecimalType(37,20)) AS web_q2_q3_increase#9754, CheckOverflow((promote_precision(store_sales#9810) / promote_precision(store_sales#9806)), DecimalType(37,20)) AS store_q2_q3_increase#9755]
            +- *(27) BroadcastHashJoin [ca_county#9793], [ca_county#10382], Inner, BuildRight, (CASE WHEN (web_sales#9814 > 0.00) THEN CheckOverflow((promote_precision(web_sales#9818) / promote_precision(web_sales#9814)), DecimalType(37,20)) END > CASE WHEN (store_sales#9806 > 0.00) THEN CheckOverflow((promote_precision(store_sales#9810) / promote_precision(store_sales#9806)), DecimalType(37,20)) END), false
               :- *(27) Project [ca_county#3724, d_year#30, store_sales#9756, store_sales#9806, store_sales#9810, ca_county#9793, web_sales#9757, web_sales#9814]
               :  +- *(27) BroadcastHashJoin [ca_county#9793], [ca_county#10306], Inner, BuildRight, (CASE WHEN (web_sales#9757 > 0.00) THEN CheckOverflow((promote_precision(web_sales#9814) / promote_precision(web_sales#9757)), DecimalType(37,20)) END > CASE WHEN (store_sales#9756 > 0.00) THEN CheckOverflow((promote_precision(store_sales#9806) / promote_precision(store_sales#9756)), DecimalType(37,20)) END), false
               :     :- *(27) BroadcastHashJoin [ca_county#3724], [ca_county#9793], Inner, BuildRight, false
               :     :  :- *(27) Project [ca_county#3724, d_year#30, store_sales#9756, store_sales#9806, store_sales#9810]
               :     :  :  +- *(27) BroadcastHashJoin [ca_county#10165], [ca_county#10230], Inner, BuildRight, false
               :     :  :     :- *(27) BroadcastHashJoin [ca_county#3724], [ca_county#10165], Inner, BuildLeft, false
               :     :  :     :  :- BroadcastQueryStage 29
               :     :  :     :  :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=87371]
               :     :  :     :  :     +- *(20) HashAggregate(keys=[ca_county#3724, d_qoy#34, d_year#30], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[ca_county#3724, d_year#30, store_sales#9756])
               :     :  :     :  :        +- ShuffleQueryStage 22
               :     :  :     :  :           +- Exchange hashpartitioning(ca_county#3724, d_qoy#34, d_year#30, 20), ENSURE_REQUIREMENTS, [plan_id=86009]
               :     :  :     :  :              +- *(16) HashAggregate(keys=[ca_county#3724, d_qoy#34, d_year#30], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[ca_county#3724, d_qoy#34, d_year#30, sum#10390L])
               :     :  :     :  :                 +- *(16) Project [ss_ext_sales_price#429, d_year#30, d_qoy#34, ca_county#3724]
               :     :  :     :  :                    +- *(16) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, false
               :     :  :     :  :                       :- *(16) Project [ss_addr_sk#420, ss_ext_sales_price#429, d_year#30, d_qoy#34]
               :     :  :     :  :                       :  +- *(16) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
               :     :  :     :  :                       :     :- *(16) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_addr_sk#420))
               :     :  :     :  :                       :     :  +- *(16) ColumnarToRow
               :     :  :     :  :                       :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_addr_sk#420,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_addr_sk#420)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>
               :     :  :     :  :                       :     +- BroadcastQueryStage 0
               :     :  :     :  :                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84480]
               :     :  :     :  :                       :           +- *(1) Filter ((((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND (d_qoy#34 = 1)) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
               :     :  :     :  :                       :              +- *(1) ColumnarToRow
               :     :  :     :  :                       :                 +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_qoy#34), isnotnull(d_year#30), (d_qoy#34 = 1), (d_year#30 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
               :     :  :     :  :                       +- BroadcastQueryStage 1
               :     :  :     :  :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84497]
               :     :  :     :  :                             +- *(2) Filter (isnotnull(ca_address_sk#3717) AND isnotnull(ca_county#3724))
               :     :  :     :  :                                +- *(2) ColumnarToRow
               :     :  :     :  :                                   +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_county#3724] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717), isnotnull(ca_county#3724)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)], ReadSchema: struct<ca_address_sk:int,ca_county:string>
               :     :  :     :  +- *(27) HashAggregate(keys=[ca_county#10165, d_qoy#10140, d_year#10136], functions=[sum(UnscaledValue(ss_ext_sales_price#10122))], output=[ca_county#10165, store_sales#9806])
               :     :  :     :     +- ShuffleQueryStage 24
               :     :  :     :        +- Exchange hashpartitioning(ca_county#10165, d_qoy#10140, d_year#10136, 20), ENSURE_REQUIREMENTS, [plan_id=86337]
               :     :  :     :           +- *(18) HashAggregate(keys=[ca_county#10165, d_qoy#10140, d_year#10136], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#10122))], output=[ca_county#10165, d_qoy#10140, d_year#10136, sum#10392L])
               :     :  :     :              +- *(18) Project [ss_ext_sales_price#10122, d_year#10136, d_qoy#10140, ca_county#10165]
               :     :  :     :                 +- *(18) BroadcastHashJoin [ss_addr_sk#10113], [ca_address_sk#10158], Inner, BuildRight, false
               :     :  :     :                    :- *(18) Project [ss_addr_sk#10113, ss_ext_sales_price#10122, d_year#10136, d_qoy#10140]
               :     :  :     :                    :  +- *(18) BroadcastHashJoin [ss_sold_date_sk#10107], [d_date_sk#10130], Inner, BuildRight, false
               :     :  :     :                    :     :- *(18) Filter (isnotnull(ss_sold_date_sk#10107) AND isnotnull(ss_addr_sk#10113))
               :     :  :     :                    :     :  +- *(18) ColumnarToRow
               :     :  :     :                    :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#10107,ss_addr_sk#10113,ss_ext_sales_price#10122] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#10107), isnotnull(ss_addr_sk#10113)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>
               :     :  :     :                    :     +- BroadcastQueryStage 2
               :     :  :     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84519]
               :     :  :     :                    :           +- *(3) Filter ((((isnotnull(d_qoy#10140) AND isnotnull(d_year#10136)) AND (d_qoy#10140 = 2)) AND (d_year#10136 = 2000)) AND isnotnull(d_date_sk#10130))
               :     :  :     :                    :              +- *(3) ColumnarToRow
               :     :  :     :                    :                 +- FileScan parquet default.date_dim[d_date_sk#10130,d_year#10136,d_qoy#10140] Batched: true, DataFilters: [isnotnull(d_qoy#10140), isnotnull(d_year#10136), (d_qoy#10140 = 2), (d_year#10136 = 2000), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
               :     :  :     :                    +- BroadcastQueryStage 4
               :     :  :     :                       +- ReusedExchange [ca_address_sk#10158, ca_county#10165], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84497]
               :     :  :     +- BroadcastQueryStage 32
               :     :  :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=87826]
               :     :  :           +- *(23) HashAggregate(keys=[ca_county#10230, d_qoy#10205, d_year#10201], functions=[sum(UnscaledValue(ss_ext_sales_price#10187))], output=[ca_county#10230, store_sales#9810])
               :     :  :              +- ShuffleQueryStage 23
               :     :  :                 +- Exchange hashpartitioning(ca_county#10230, d_qoy#10205, d_year#10201, 20), ENSURE_REQUIREMENTS, [plan_id=86053]
               :     :  :                    +- *(17) HashAggregate(keys=[ca_county#10230, d_qoy#10205, d_year#10201], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#10187))], output=[ca_county#10230, d_qoy#10205, d_year#10201, sum#10394L])
               :     :  :                       +- *(17) Project [ss_ext_sales_price#10187, d_year#10201, d_qoy#10205, ca_county#10230]
               :     :  :                          +- *(17) BroadcastHashJoin [ss_addr_sk#10178], [ca_address_sk#10223], Inner, BuildRight, false
               :     :  :                             :- *(17) Project [ss_addr_sk#10178, ss_ext_sales_price#10187, d_year#10201, d_qoy#10205]
               :     :  :                             :  +- *(17) BroadcastHashJoin [ss_sold_date_sk#10172], [d_date_sk#10195], Inner, BuildRight, false
               :     :  :                             :     :- *(17) Filter (isnotnull(ss_sold_date_sk#10172) AND isnotnull(ss_addr_sk#10178))
               :     :  :                             :     :  +- *(17) ColumnarToRow
               :     :  :                             :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#10172,ss_addr_sk#10178,ss_ext_sales_price#10187] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#10172), isnotnull(ss_addr_sk#10178)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>
               :     :  :                             :     +- BroadcastQueryStage 5
               :     :  :                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84561]
               :     :  :                             :           +- *(5) Filter ((((isnotnull(d_qoy#10205) AND isnotnull(d_year#10201)) AND (d_qoy#10205 = 3)) AND (d_year#10201 = 2000)) AND isnotnull(d_date_sk#10195))
               :     :  :                             :              +- *(5) ColumnarToRow
               :     :  :                             :                 +- FileScan parquet default.date_dim[d_date_sk#10195,d_year#10201,d_qoy#10205] Batched: true, DataFilters: [isnotnull(d_qoy#10205), isnotnull(d_year#10201), (d_qoy#10205 = 3), (d_year#10201 = 2000), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
               :     :  :                             +- BroadcastQueryStage 7
               :     :  :                                +- ReusedExchange [ca_address_sk#10223, ca_county#10230], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84497]
               :     :  +- BroadcastQueryStage 33
               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=87935]
               :     :        +- *(24) HashAggregate(keys=[ca_county#9793, d_qoy#9768, d_year#9764], functions=[sum(UnscaledValue(ws_ext_sales_price#186))], output=[ca_county#9793, web_sales#9757])
               :     :           +- ShuffleQueryStage 28
               :     :              +- Exchange hashpartitioning(ca_county#9793, d_qoy#9768, d_year#9764, 20), ENSURE_REQUIREMENTS, [plan_id=87150]
               :     :                 +- *(19) HashAggregate(keys=[ca_county#9793, d_qoy#9768, d_year#9764], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186))], output=[ca_county#9793, d_qoy#9768, d_year#9764, sum#10396L])
               :     :                    +- *(19) Project [ws_ext_sales_price#186, d_year#9764, d_qoy#9768, ca_county#9793]
               :     :                       +- *(19) BroadcastHashJoin [ws_bill_addr_sk#170], [ca_address_sk#9786], Inner, BuildRight, false
               :     :                          :- *(19) Project [ws_bill_addr_sk#170, ws_ext_sales_price#186, d_year#9764, d_qoy#9768]
               :     :                          :  +- *(19) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#9758], Inner, BuildRight, false
               :     :                          :     :- AQEShuffleRead local
               :     :                          :     :  +- ShuffleQueryStage 8
               :     :                          :     :     +- Exchange hashpartitioning(ws_sold_date_sk#163, 20), ENSURE_REQUIREMENTS, [plan_id=84604]
               :     :                          :     :        +- *(7) Filter (isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_bill_addr_sk#170))
               :     :                          :     :           +- *(7) ColumnarToRow
               :     :                          :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_bill_addr_sk#170,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_addr_sk#170)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_addr_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>
               :     :                          :     +- BroadcastQueryStage 25
               :     :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=86556]
               :     :                          :           +- AQEShuffleRead local
               :     :                          :              +- ShuffleQueryStage 9
               :     :                          :                 +- Exchange hashpartitioning(d_date_sk#9758, 20), ENSURE_REQUIREMENTS, [plan_id=84621]
               :     :                          :                    +- *(8) Filter ((((isnotnull(d_qoy#9768) AND isnotnull(d_year#9764)) AND (d_qoy#9768 = 1)) AND (d_year#9764 = 2000)) AND isnotnull(d_date_sk#9758))
               :     :                          :                       +- *(8) ColumnarToRow
               :     :                          :                          +- FileScan parquet default.date_dim[d_date_sk#9758,d_year#9764,d_qoy#9768] Batched: true, DataFilters: [isnotnull(d_qoy#9768), isnotnull(d_year#9764), (d_qoy#9768 = 1), (d_year#9764 = 2000), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
               :     :                          +- BroadcastQueryStage 11
               :     :                             +- ReusedExchange [ca_address_sk#9786, ca_county#9793], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84497]
               :     +- BroadcastQueryStage 34
               :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=88157]
               :           +- *(25) HashAggregate(keys=[ca_county#10306, d_qoy#10281, d_year#10277], functions=[sum(UnscaledValue(ws_ext_sales_price#10260))], output=[ca_county#10306, web_sales#9814])
               :              +- ShuffleQueryStage 30
               :                 +- Exchange hashpartitioning(ca_county#10306, d_qoy#10281, d_year#10277, 20), ENSURE_REQUIREMENTS, [plan_id=87547]
               :                    +- *(21) HashAggregate(keys=[ca_county#10306, d_qoy#10281, d_year#10277], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#10260))], output=[ca_county#10306, d_qoy#10281, d_year#10277, sum#10398L])
               :                       +- *(21) Project [ws_ext_sales_price#10260, d_year#10277, d_qoy#10281, ca_county#10306]
               :                          +- *(21) BroadcastHashJoin [ws_bill_addr_sk#10244], [ca_address_sk#10299], Inner, BuildRight, false
               :                             :- *(21) Project [ws_bill_addr_sk#10244, ws_ext_sales_price#10260, d_year#10277, d_qoy#10281]
               :                             :  +- *(21) BroadcastHashJoin [ws_sold_date_sk#10237], [d_date_sk#10271], Inner, BuildRight, false
               :                             :     :- AQEShuffleRead local
               :                             :     :  +- ShuffleQueryStage 13
               :                             :     :     +- ReusedExchange [ws_sold_date_sk#10237, ws_bill_addr_sk#10244, ws_ext_sales_price#10260], Exchange hashpartitioning(ws_sold_date_sk#163, 20), ENSURE_REQUIREMENTS, [plan_id=84604]
               :                             :     +- BroadcastQueryStage 26
               :                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=86760]
               :                             :           +- AQEShuffleRead local
               :                             :              +- ShuffleQueryStage 14
               :                             :                 +- Exchange hashpartitioning(d_date_sk#10271, 20), ENSURE_REQUIREMENTS, [plan_id=84684]
               :                             :                    +- *(11) Filter ((((isnotnull(d_qoy#10281) AND isnotnull(d_year#10277)) AND (d_qoy#10281 = 2)) AND (d_year#10277 = 2000)) AND isnotnull(d_date_sk#10271))
               :                             :                       +- *(11) ColumnarToRow
               :                             :                          +- FileScan parquet default.date_dim[d_date_sk#10271,d_year#10277,d_qoy#10281] Batched: true, DataFilters: [isnotnull(d_qoy#10281), isnotnull(d_year#10277), (d_qoy#10281 = 2), (d_year#10277 = 2000), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
               :                             +- BroadcastQueryStage 16
               :                                +- ReusedExchange [ca_address_sk#10299, ca_county#10306], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84497]
               +- BroadcastQueryStage 35
                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=88238]
                     +- *(26) HashAggregate(keys=[ca_county#10382, d_qoy#10357, d_year#10353], functions=[sum(UnscaledValue(ws_ext_sales_price#10336))], output=[ca_county#10382, web_sales#9818])
                        +- ShuffleQueryStage 31
                           +- Exchange hashpartitioning(ca_county#10382, d_qoy#10357, d_year#10353, 20), ENSURE_REQUIREMENTS, [plan_id=87697]
                              +- *(22) HashAggregate(keys=[ca_county#10382, d_qoy#10357, d_year#10353], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#10336))], output=[ca_county#10382, d_qoy#10357, d_year#10353, sum#10400L])
                                 +- *(22) Project [ws_ext_sales_price#10336, d_year#10353, d_qoy#10357, ca_county#10382]
                                    +- *(22) BroadcastHashJoin [ws_bill_addr_sk#10320], [ca_address_sk#10375], Inner, BuildRight, false
                                       :- *(22) Project [ws_bill_addr_sk#10320, ws_ext_sales_price#10336, d_year#10353, d_qoy#10357]
                                       :  +- *(22) BroadcastHashJoin [ws_sold_date_sk#10313], [d_date_sk#10347], Inner, BuildRight, false
                                       :     :- AQEShuffleRead local
                                       :     :  +- ShuffleQueryStage 18
                                       :     :     +- ReusedExchange [ws_sold_date_sk#10313, ws_bill_addr_sk#10320, ws_ext_sales_price#10336], Exchange hashpartitioning(ws_sold_date_sk#163, 20), ENSURE_REQUIREMENTS, [plan_id=84604]
                                       :     +- BroadcastQueryStage 27
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=86954]
                                       :           +- AQEShuffleRead local
                                       :              +- ShuffleQueryStage 19
                                       :                 +- Exchange hashpartitioning(d_date_sk#10347, 20), ENSURE_REQUIREMENTS, [plan_id=84748]
                                       :                    +- *(14) Filter ((((isnotnull(d_qoy#10357) AND isnotnull(d_year#10353)) AND (d_qoy#10357 = 3)) AND (d_year#10353 = 2000)) AND isnotnull(d_date_sk#10347))
                                       :                       +- *(14) ColumnarToRow
                                       :                          +- FileScan parquet default.date_dim[d_date_sk#10347,d_year#10353,d_qoy#10357] Batched: true, DataFilters: [isnotnull(d_qoy#10357), isnotnull(d_year#10353), (d_qoy#10357 = 3), (d_year#10353 = 2000), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                                       +- BroadcastQueryStage 21
                                          +- ReusedExchange [ca_address_sk#10375, ca_county#10382], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=84497]

==== q32 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(8) HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_discount_amt#219))], output=[excess discount amount#10452])
   +- ShuffleQueryStage 7
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=89135]
         +- *(7) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cs_ext_discount_amt#219))], output=[sum#10521L])
            +- *(7) Project [cs_ext_discount_amt#219]
               +- *(7) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                  :- *(7) Project [cs_sold_date_sk#197, cs_ext_discount_amt#219]
                  :  +- *(7) BroadcastHashJoin [i_item_sk#437], [cs_item_sk#10471], Inner, BuildRight, (cast(cs_ext_discount_amt#219 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#10455), false
                  :     :- AQEShuffleRead local
                  :     :  +- ShuffleQueryStage 5
                  :     :     +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=88970]
                  :     :        +- *(5) Project [cs_sold_date_sk#197, cs_ext_discount_amt#219, i_item_sk#437]
                  :     :           +- *(5) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#437], Inner, BuildRight, false
                  :     :              :- *(5) Filter ((isnotnull(cs_item_sk#212) AND isnotnull(cs_ext_discount_amt#219)) AND isnotnull(cs_sold_date_sk#197))
                  :     :              :  +- *(5) ColumnarToRow
                  :     :              :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_item_sk#212,cs_ext_discount_amt#219] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_ext_discount_amt#219), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>
                  :     :              +- BroadcastQueryStage 0
                  :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=88663]
                  :     :                    +- *(1) Project [i_item_sk#437]
                  :     :                       +- *(1) Filter ((isnotnull(i_manufact_id#450) AND (i_manufact_id#450 = 977)) AND isnotnull(i_item_sk#437))
                  :     :                          +- *(1) ColumnarToRow
                  :     :                             +- FileScan parquet default.item[i_item_sk#437,i_manufact_id#450] Batched: true, DataFilters: [isnotnull(i_manufact_id#450), (i_manufact_id#450 = 977), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>
                  :     +- BroadcastQueryStage 6
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=89044]
                  :           +- *(6) Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#10455)
                  :              +- *(6) HashAggregate(keys=[cs_item_sk#10471], functions=[avg(UnscaledValue(cs_ext_discount_amt#10478))], output=[(1.3 * avg(cs_ext_discount_amt))#10455, cs_item_sk#10471])
                  :                 +- ShuffleQueryStage 4
                  :                    +- Exchange hashpartitioning(cs_item_sk#10471, 20), ENSURE_REQUIREMENTS, [plan_id=88859]
                  :                       +- *(4) HashAggregate(keys=[cs_item_sk#10471], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#10478))], output=[cs_item_sk#10471, sum#10524, count#10525L])
                  :                          +- *(4) Project [cs_item_sk#10471, cs_ext_discount_amt#10478]
                  :                             +- *(4) BroadcastHashJoin [cs_sold_date_sk#10456], [d_date_sk#10490], Inner, BuildRight, false
                  :                                :- *(4) Filter (isnotnull(cs_sold_date_sk#10456) AND isnotnull(cs_item_sk#10471))
                  :                                :  +- *(4) ColumnarToRow
                  :                                :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#10456,cs_item_sk#10471,cs_ext_discount_amt#10478] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#10456), isnotnull(cs_item_sk#10471)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>
                  :                                +- BroadcastQueryStage 1
                  :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=88686]
                  :                                      +- *(2) Project [d_date_sk#10490]
                  :                                         +- *(2) Filter (((isnotnull(d_date#10492) AND (d_date#10492 >= 2000-01-27)) AND (d_date#10492 <= 2000-04-26)) AND isnotnull(d_date_sk#10490))
                  :                                            +- *(2) ColumnarToRow
                  :                                               +- FileScan parquet default.date_dim[d_date_sk#10490,d_date#10492] Batched: true, DataFilters: [isnotnull(d_date#10492), (d_date#10492 >= 2000-01-27), (d_date#10492 <= 2000-04-26), isnotnull(d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                  +- BroadcastQueryStage 3
                     +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=88686]

==== q33 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[total_sales#10542 ASC NULLS FIRST], output=[i_manufact_id#450,total_sales#10542])
   +- *(29) HashAggregate(keys=[i_manufact_id#450], functions=[sum(total_sales#10543)], output=[i_manufact_id#450, total_sales#10542])
      +- ShuffleQueryStage 28
         +- Exchange hashpartitioning(i_manufact_id#450, 20), ENSURE_REQUIREMENTS, [plan_id=91675]
            +- *(28) HashAggregate(keys=[i_manufact_id#450], functions=[partial_sum(total_sales#10543)], output=[i_manufact_id#450, sum#10755, isEmpty#10756])
               +- Union
                  :- *(25) HashAggregate(keys=[i_manufact_id#450], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_manufact_id#450, total_sales#10543])
                  :  +- ShuffleQueryStage 25
                  :     +- Exchange hashpartitioning(i_manufact_id#450, 20), ENSURE_REQUIREMENTS, [plan_id=91463]
                  :        +- *(22) HashAggregate(keys=[i_manufact_id#450], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_manufact_id#450, sum#10758L])
                  :           +- *(22) Project [ss_ext_sales_price#429, i_manufact_id#450]
                  :              +- *(22) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :                 :- *(22) Project [ss_item_sk#416, ss_ext_sales_price#429]
                  :                 :  +- *(22) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, false
                  :                 :     :- *(22) Project [ss_item_sk#416, ss_addr_sk#420, ss_ext_sales_price#429]
                  :                 :     :  +- *(22) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :                 :     :     :- *(22) Filter ((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_addr_sk#420)) AND isnotnull(ss_item_sk#416))
                  :                 :     :     :  +- *(22) ColumnarToRow
                  :                 :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_addr_sk#420,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_addr_sk#420), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>
                  :                 :     :     +- BroadcastQueryStage 0
                  :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=89667]
                  :                 :     :           +- *(1) Project [d_date_sk#24]
                  :                 :     :              +- *(1) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 1998)) AND (d_moy#32 = 5)) AND isnotnull(d_date_sk#24))
                  :                 :     :                 +- *(1) ColumnarToRow
                  :                 :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 1998), (d_moy#32 = 5), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :                 :     +- BroadcastQueryStage 1
                  :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=89688]
                  :                 :           +- *(2) Project [ca_address_sk#3717]
                  :                 :              +- *(2) Filter ((isnotnull(ca_gmt_offset#3728) AND (ca_gmt_offset#3728 = -5.00)) AND isnotnull(ca_address_sk#3717))
                  :                 :                 +- *(2) ColumnarToRow
                  :                 :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_gmt_offset#3728] Batched: true, DataFilters: [isnotnull(ca_gmt_offset#3728), (ca_gmt_offset#3728 = -5.00), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>
                  :                 +- BroadcastQueryStage 20
                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=91010]
                  :                       +- *(15) SortMergeJoin [i_manufact_id#450], [i_manufact_id#10688], LeftSemi
                  :                          :- *(13) Sort [i_manufact_id#450 ASC NULLS FIRST], false, 0
                  :                          :  +- ShuffleQueryStage 2
                  :                          :     +- Exchange hashpartitioning(i_manufact_id#450, 20), ENSURE_REQUIREMENTS, [plan_id=89707]
                  :                          :        +- *(3) Filter isnotnull(i_item_sk#437)
                  :                          :           +- *(3) ColumnarToRow
                  :                          :              +- FileScan parquet default.item[i_item_sk#437,i_manufact_id#450] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>
                  :                          +- *(14) Sort [i_manufact_id#10688 ASC NULLS FIRST], false, 0
                  :                             +- ShuffleQueryStage 3
                  :                                +- Exchange hashpartitioning(i_manufact_id#10688, 20), ENSURE_REQUIREMENTS, [plan_id=89726]
                  :                                   +- *(4) Project [i_manufact_id#10688]
                  :                                      +- *(4) Filter (isnotnull(i_category#10687) AND (i_category#10687 = Electronics                                       ))
                  :                                         +- *(4) ColumnarToRow
                  :                                            +- FileScan parquet default.item[i_category#10687,i_manufact_id#10688] Batched: true, DataFilters: [isnotnull(i_category#10687), (i_category#10687 = Electronics                                    ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Electronics                                       )], ReadSchema: struct<i_category:string,i_manufact_id:int>
                  :- *(26) HashAggregate(keys=[i_manufact_id#10603], functions=[sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_manufact_id#10603, total_sales#10545])
                  :  +- ShuffleQueryStage 26
                  :     +- Exchange hashpartitioning(i_manufact_id#10603, 20), ENSURE_REQUIREMENTS, [plan_id=91514]
                  :        +- *(23) HashAggregate(keys=[i_manufact_id#10603], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_manufact_id#10603, sum#10760L])
                  :           +- *(23) Project [cs_ext_sales_price#220, i_manufact_id#10603]
                  :              +- *(23) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#10590], Inner, BuildRight, false
                  :                 :- *(23) Project [cs_item_sk#212, cs_ext_sales_price#220]
                  :                 :  +- *(23) BroadcastHashJoin [cs_bill_addr_sk#203], [ca_address_sk#10577], Inner, BuildRight, false
                  :                 :     :- *(23) Project [cs_bill_addr_sk#203, cs_item_sk#212, cs_ext_sales_price#220]
                  :                 :     :  +- *(23) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#10549], Inner, BuildRight, false
                  :                 :     :     :- *(23) Filter ((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_bill_addr_sk#203)) AND isnotnull(cs_item_sk#212))
                  :                 :     :     :  +- *(23) ColumnarToRow
                  :                 :     :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_addr_sk#203,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_bill_addr_sk#203), isnotnull(cs_item_sk#212)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
                  :                 :     :     +- BroadcastQueryStage 5
                  :                 :     :        +- ReusedExchange [d_date_sk#10549], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=89667]
                  :                 :     +- BroadcastQueryStage 7
                  :                 :        +- ReusedExchange [ca_address_sk#10577], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=89688]
                  :                 +- BroadcastQueryStage 22
                  :                    +- ReusedExchange [i_item_sk#10590, i_manufact_id#10603], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=91010]
                  +- *(27) HashAggregate(keys=[i_manufact_id#10666], functions=[sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_manufact_id#10666, total_sales#10547])
                     +- ShuffleQueryStage 27
                        +- Exchange hashpartitioning(i_manufact_id#10666, 20), ENSURE_REQUIREMENTS, [plan_id=91565]
                           +- *(24) HashAggregate(keys=[i_manufact_id#10666], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_manufact_id#10666, sum#10762L])
                              +- *(24) Project [ws_ext_sales_price#186, i_manufact_id#10666]
                                 +- *(24) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#10653], Inner, BuildRight, false
                                    :- *(24) Project [ws_item_sk#166, ws_ext_sales_price#186]
                                    :  +- *(24) BroadcastHashJoin [ws_bill_addr_sk#170], [ca_address_sk#10640], Inner, BuildRight, false
                                    :     :- *(24) Project [ws_item_sk#166, ws_bill_addr_sk#170, ws_ext_sales_price#186]
                                    :     :  +- *(24) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#10612], Inner, BuildRight, false
                                    :     :     :- *(24) Filter ((isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_bill_addr_sk#170)) AND isnotnull(ws_item_sk#166))
                                    :     :     :  +- *(24) ColumnarToRow
                                    :     :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_addr_sk#170,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_addr_sk#170), isnotnull(ws_item_sk#166)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>
                                    :     :     +- BroadcastQueryStage 13
                                    :     :        +- ReusedExchange [d_date_sk#10612], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=89667]
                                    :     +- BroadcastQueryStage 15
                                    :        +- ReusedExchange [ca_address_sk#10640], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=89688]
                                    +- BroadcastQueryStage 24
                                       +- ReusedExchange [i_item_sk#10653, i_manufact_id#10666], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=91010]

==== q36 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#10792 DESC NULLS LAST,CASE WHEN (lochierarchy#10792 = 0) THEN i_category#10803 END ASC NULLS FIRST,rank_within_parent#10793 ASC NULLS FIRST], output=[gross_margin#10791,i_category#10803,i_class#10804,lochierarchy#10792,rank_within_parent#10793])
   +- *(7) Project [gross_margin#10791, i_category#10803, i_class#10804, lochierarchy#10792, rank_within_parent#10793]
      +- Window [rank(_w3#10819) windowspecdefinition(_w1#10817, _w2#10818, _w3#10819 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#10793], [_w1#10817, _w2#10818], [_w3#10819 ASC NULLS FIRST]
         +- *(6) Sort [_w1#10817 ASC NULLS FIRST, _w2#10818 ASC NULLS FIRST, _w3#10819 ASC NULLS FIRST], false, 0
            +- ShuffleQueryStage 4
               +- Exchange hashpartitioning(_w1#10817, _w2#10818, 20), ENSURE_REQUIREMENTS, [plan_id=92221]
                  +- *(5) HashAggregate(keys=[i_category#10803, i_class#10804, spark_grouping_id#10802L], functions=[sum(UnscaledValue(ss_net_profit#436)), sum(UnscaledValue(ss_ext_sales_price#429))], output=[gross_margin#10791, i_category#10803, i_class#10804, lochierarchy#10792, _w1#10817, _w2#10818, _w3#10819])
                     +- ShuffleQueryStage 3
                        +- Exchange hashpartitioning(i_category#10803, i_class#10804, spark_grouping_id#10802L, 20), ENSURE_REQUIREMENTS, [plan_id=92166]
                           +- *(4) HashAggregate(keys=[i_category#10803, i_class#10804, spark_grouping_id#10802L], functions=[partial_sum(UnscaledValue(ss_net_profit#436)), partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_category#10803, i_class#10804, spark_grouping_id#10802L, sum#10833L, sum#10834L])
                              +- *(4) Expand [[ss_ext_sales_price#429, ss_net_profit#436, i_category#449, i_class#447, 0], [ss_ext_sales_price#429, ss_net_profit#436, i_category#449, null, 1], [ss_ext_sales_price#429, ss_net_profit#436, null, null, 3]], [ss_ext_sales_price#429, ss_net_profit#436, i_category#10803, i_class#10804, spark_grouping_id#10802L]
                                 +- *(4) Project [ss_ext_sales_price#429, ss_net_profit#436, i_category#449, i_class#447]
                                    +- *(4) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :- *(4) Project [ss_store_sk#421, ss_ext_sales_price#429, ss_net_profit#436, i_class#447, i_category#449]
                                       :  +- *(4) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                                       :     :- *(4) Project [ss_item_sk#416, ss_store_sk#421, ss_ext_sales_price#429, ss_net_profit#436]
                                       :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                       :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_store_sk#421))
                                       :     :     :  +- *(4) ColumnarToRow
                                       :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_ext_sales_price#429,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_...
                                       :     :     +- BroadcastQueryStage 0
                                       :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=91867]
                                       :     :           +- *(1) Project [d_date_sk#24]
                                       :     :              +- *(1) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                                       :     :                 +- *(1) ColumnarToRow
                                       :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                                       :     +- BroadcastQueryStage 1
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=91886]
                                       :           +- *(2) Filter isnotnull(i_item_sk#437)
                                       :              +- *(2) ColumnarToRow
                                       :                 +- FileScan parquet default.item[i_item_sk#437,i_class#447,i_category#449] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>
                                       +- BroadcastQueryStage 2
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=91905]
                                             +- *(3) Project [s_store_sk#52]
                                                +- *(3) Filter ((isnotnull(s_state#76) AND (s_state#76 = TN)) AND isnotnull(s_store_sk#52))
                                                   +- *(3) ColumnarToRow
                                                      +- FileScan parquet default.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_state#76), (s_state#76 = TN), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>

==== q37 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#438 ASC NULLS FIRST], output=[i_item_id#438,i_item_desc#441,i_current_price#442])
   +- *(5) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_current_price#442], functions=[], output=[i_item_id#438, i_item_desc#441, i_current_price#442])
      +- ShuffleQueryStage 3
         +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, i_current_price#442, 20), ENSURE_REQUIREMENTS, [plan_id=92597]
            +- *(4) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_current_price#442], functions=[], output=[i_item_id#438, i_item_desc#441, i_current_price#442])
               +- *(4) Project [i_item_id#438, i_item_desc#441, i_current_price#442]
                  +- *(4) BroadcastHashJoin [i_item_sk#437], [cs_item_sk#212], Inner, BuildRight, false
                     :- *(4) Project [i_item_sk#437, i_item_id#438, i_item_desc#441, i_current_price#442]
                     :  +- *(4) BroadcastHashJoin [inv_date_sk#8005], [d_date_sk#24], Inner, BuildRight, false
                     :     :- *(4) Project [i_item_sk#437, i_item_id#438, i_item_desc#441, i_current_price#442, inv_date_sk#8005]
                     :     :  +- *(4) BroadcastHashJoin [i_item_sk#437], [inv_item_sk#8006], Inner, BuildLeft, false
                     :     :     :- BroadcastQueryStage 0
                     :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=92387]
                     :     :     :     +- *(1) Project [i_item_sk#437, i_item_id#438, i_item_desc#441, i_current_price#442]
                     :     :     :        +- *(1) Filter ((((isnotnull(i_current_price#442) AND (i_current_price#442 >= 68.00)) AND (i_current_price#442 <= 98.00)) AND i_manufact_id#450 IN (677,940,694,808)) AND isnotnull(i_item_sk#437))
                     :     :     :           +- *(1) ColumnarToRow
                     :     :     :              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441,i_current_price#442,i_manufact_id#450] Batched: true, DataFilters: [isnotnull(i_current_price#442), (i_current_price#442 >= 68.00), (i_current_price#442 <= 98.00), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,68.00), LessThanOrEqual(i_current..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_...
                     :     :     +- *(4) Project [inv_date_sk#8005, inv_item_sk#8006]
                     :     :        +- *(4) Filter ((((isnotnull(inv_quantity_on_hand#8008) AND (inv_quantity_on_hand#8008 >= 100)) AND (inv_quantity_on_hand#8008 <= 500)) AND isnotnull(inv_item_sk#8006)) AND isnotnull(inv_date_sk#8005))
                     :     :           +- *(4) ColumnarToRow
                     :     :              +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#8008), (inv_quantity_on_hand#8008 >= 100), (inv_quantity_on_hand#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(i..., ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>
                     :     +- BroadcastQueryStage 1
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=92408]
                     :           +- *(2) Project [d_date_sk#24]
                     :              +- *(2) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-02-01)) AND (d_date#26 <= 2000-04-01)) AND isnotnull(d_date_sk#24))
                     :                 +- *(2) ColumnarToRow
                     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-02-01), (d_date#26 <= 2000-04-01), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-01), LessThanOrEqual(d_date,2000-04-01), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                     +- BroadcastQueryStage 2
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=92427]
                           +- *(3) Filter isnotnull(cs_item_sk#212)
                              +- *(3) ColumnarToRow
                                 +- FileScan parquet default.catalog_sales[cs_item_sk#212] Batched: true, DataFilters: [isnotnull(cs_item_sk#212)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int>

==== q38 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(17) HashAggregate(keys=[], functions=[count(1)], output=[count(1)#10941L])
   +- ShuffleQueryStage 17
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=94354]
         +- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#10948L])
            +- *(16) Project
               +- *(16) BroadcastHashJoin [coalesce(c_last_name#90, ), isnull(c_last_name#90), coalesce(c_first_name#89, ), isnull(c_first_name#89), coalesce(d_date#26, 1970-01-01), isnull(d_date#26)], [coalesce(c_last_name#10932, ), isnull(c_last_name#10932), coalesce(c_first_name#10931, ), isnull(c_first_name#10931), coalesce(d_date#10897, 1970-01-01), isnull(d_date#10897)], LeftSemi, BuildRight, false
                  :- *(16) SortMergeJoin [coalesce(c_last_name#90, ), isnull(c_last_name#90), coalesce(c_first_name#89, ), isnull(c_first_name#89), coalesce(d_date#26, 1970-01-01), isnull(d_date#26)], [coalesce(c_last_name#10886, ), isnull(c_last_name#10886), coalesce(c_first_name#10885, ), isnull(c_first_name#10885), coalesce(d_date#10851, 1970-01-01), isnull(d_date#10851)], LeftSemi
                  :  :- *(14) Sort [coalesce(c_last_name#90, ) ASC NULLS FIRST, isnull(c_last_name#90) ASC NULLS FIRST, coalesce(c_first_name#89, ) ASC NULLS FIRST, isnull(c_first_name#89) ASC NULLS FIRST, coalesce(d_date#26, 1970-01-01) ASC NULLS FIRST, isnull(d_date#26) ASC NULLS FIRST], false, 0
                  :  :  +- ShuffleQueryStage 15
                  :  :     +- Exchange hashpartitioning(coalesce(c_last_name#90, ), isnull(c_last_name#90), coalesce(c_first_name#89, ), isnull(c_first_name#89), coalesce(d_date#26, 1970-01-01), isnull(d_date#26), 20), ENSURE_REQUIREMENTS, [plan_id=94168]
                  :  :        +- *(12) HashAggregate(keys=[c_last_name#90, c_first_name#89, d_date#26], functions=[], output=[c_last_name#90, c_first_name#89, d_date#26])
                  :  :           +- ShuffleQueryStage 11
                  :  :              +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=93867]
                  :  :                 +- *(8) HashAggregate(keys=[c_last_name#90, c_first_name#89, d_date#26], functions=[], output=[c_last_name#90, c_first_name#89, d_date#26])
                  :  :                    +- *(8) Project [c_last_name#90, c_first_name#89, d_date#26]
                  :  :                       +- *(8) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
                  :  :                          :- *(8) Project [ss_customer_sk#417, d_date#26]
                  :  :                          :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :  :                          :     :- *(8) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_customer_sk#417))
                  :  :                          :     :  +- *(8) ColumnarToRow
                  :  :                          :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_customer_sk#417)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>
                  :  :                          :     +- BroadcastQueryStage 0
                  :  :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=92991]
                  :  :                          :           +- *(1) Project [d_date_sk#24, d_date#26]
                  :  :                          :              +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                  :  :                          :                 +- *(1) ColumnarToRow
                  :  :                          :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                  :  :                          +- BroadcastQueryStage 1
                  :  :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=93010]
                  :  :                                +- *(2) Filter isnotnull(c_customer_sk#81)
                  :  :                                   +- *(2) ColumnarToRow
                  :  :                                      +- FileScan parquet default.customer[c_customer_sk#81,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                  :  +- *(15) Sort [coalesce(c_last_name#10886, ) ASC NULLS FIRST, isnull(c_last_name#10886) ASC NULLS FIRST, coalesce(c_first_name#10885, ) ASC NULLS FIRST, isnull(c_first_name#10885) ASC NULLS FIRST, coalesce(d_date#10851, 1970-01-01) ASC NULLS FIRST, isnull(d_date#10851) ASC NULLS FIRST], false, 0
                  :     +- ShuffleQueryStage 16
                  :        +- Exchange hashpartitioning(coalesce(c_last_name#10886, ), isnull(c_last_name#10886), coalesce(c_first_name#10885, ), isnull(c_first_name#10885), coalesce(d_date#10851, 1970-01-01), isnull(d_date#10851), 20), ENSURE_REQUIREMENTS, [plan_id=94286]
                  :           +- *(13) HashAggregate(keys=[c_last_name#10886, c_first_name#10885, d_date#10851], functions=[], output=[c_last_name#10886, c_first_name#10885, d_date#10851])
                  :              +- ShuffleQueryStage 12
                  :                 +- Exchange hashpartitioning(c_last_name#10886, c_first_name#10885, d_date#10851, 20), ENSURE_REQUIREMENTS, [plan_id=93910]
                  :                    +- *(9) HashAggregate(keys=[c_last_name#10886, c_first_name#10885, d_date#10851], functions=[], output=[c_last_name#10886, c_first_name#10885, d_date#10851])
                  :                       +- *(9) Project [c_last_name#10886, c_first_name#10885, d_date#10851]
                  :                          +- *(9) BroadcastHashJoin [cs_bill_customer_sk#200], [c_customer_sk#10877], Inner, BuildRight, false
                  :                             :- *(9) Project [cs_bill_customer_sk#200, d_date#10851]
                  :                             :  +- *(9) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#10849], Inner, BuildRight, false
                  :                             :     :- *(9) Filter (isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_bill_customer_sk#200))
                  :                             :     :  +- *(9) ColumnarToRow
                  :                             :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_bill_customer_sk#200)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>
                  :                             :     +- BroadcastQueryStage 3
                  :                             :        +- ReusedExchange [d_date_sk#10849, d_date#10851], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=92991]
                  :                             +- BroadcastQueryStage 5
                  :                                +- ReusedExchange [c_customer_sk#10877, c_first_name#10885, c_last_name#10886], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=93010]
                  +- BroadcastQueryStage 14
                     +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 1970-01-01), isnull(input[2, date, true])),false), [plan_id=94116]
                        +- *(11) HashAggregate(keys=[c_last_name#10932, c_first_name#10931, d_date#10897], functions=[], output=[c_last_name#10932, c_first_name#10931, d_date#10897])
                           +- ShuffleQueryStage 13
                              +- Exchange hashpartitioning(c_last_name#10932, c_first_name#10931, d_date#10897, 20), ENSURE_REQUIREMENTS, [plan_id=94034]
                                 +- *(10) HashAggregate(keys=[c_last_name#10932, c_first_name#10931, d_date#10897], functions=[], output=[c_last_name#10932, c_first_name#10931, d_date#10897])
                                    +- *(10) Project [c_last_name#10932, c_first_name#10931, d_date#10897]
                                       +- *(10) BroadcastHashJoin [ws_bill_customer_sk#167], [c_customer_sk#10923], Inner, BuildRight, false
                                          :- *(10) Project [ws_bill_customer_sk#167, d_date#10897]
                                          :  +- *(10) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#10895], Inner, BuildRight, false
                                          :     :- AQEShuffleRead local
                                          :     :  +- ShuffleQueryStage 6
                                          :     :     +- Exchange hashpartitioning(ws_sold_date_sk#163, 20), ENSURE_REQUIREMENTS, [plan_id=93080]
                                          :     :        +- *(5) Filter (isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_bill_customer_sk#167))
                                          :     :           +- *(5) ColumnarToRow
                                          :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_bill_customer_sk#167] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_customer_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>
                                          :     +- BroadcastQueryStage 10
                                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=93550]
                                          :           +- AQEShuffleRead local
                                          :              +- ShuffleQueryStage 7
                                          :                 +- Exchange hashpartitioning(d_date_sk#10895, 20), ENSURE_REQUIREMENTS, [plan_id=93099]
                                          :                    +- *(6) Project [d_date_sk#10895, d_date#10897]
                                          :                       +- *(6) Filter (((isnotnull(d_month_seq#10898) AND (d_month_seq#10898 >= 1200)) AND (d_month_seq#10898 <= 1211)) AND isnotnull(d_date_sk#10895))
                                          :                          +- *(6) ColumnarToRow
                                          :                             +- FileScan parquet default.date_dim[d_date_sk#10895,d_date#10897,d_month_seq#10898] Batched: true, DataFilters: [isnotnull(d_month_seq#10898), (d_month_seq#10898 >= 1200), (d_month_seq#10898 <= 1211), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                                          +- BroadcastQueryStage 9
                                             +- ReusedExchange [c_customer_sk#10923, c_first_name#10931, c_last_name#10932], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=93010]

==== q39a ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(11) Sort [w_warehouse_sk#8009 ASC NULLS FIRST, i_item_sk#437 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, mean#10950 ASC NULLS FIRST, cov#10951 ASC NULLS FIRST, d_moy#11136 ASC NULLS FIRST, mean#10983 ASC NULLS FIRST, cov#10984 ASC NULLS FIRST], true, 0
   +- ShuffleQueryStage 11
      +- Exchange rangepartitioning(w_warehouse_sk#8009 ASC NULLS FIRST, i_item_sk#437 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, mean#10950 ASC NULLS FIRST, cov#10951 ASC NULLS FIRST, d_moy#11136 ASC NULLS FIRST, mean#10983 ASC NULLS FIRST, cov#10984 ASC NULLS FIRST, 20), ENSURE_REQUIREMENTS, [plan_id=95594]
         +- *(10) BroadcastHashJoin [i_item_sk#437, w_warehouse_sk#8009], [i_item_sk#11092, w_warehouse_sk#11114], Inner, BuildLeft, false
            :- BroadcastQueryStage 10
            :  +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=95535]
            :     +- *(9) Project [w_warehouse_sk#8009, i_item_sk#437, d_moy#32, mean#10950, CASE WHEN (mean#10950 = 0.0) THEN null ELSE (stdev#10949 / mean#10950) END AS cov#10951]
            :        +- *(9) Filter CASE WHEN (mean#10950 = 0.0) THEN false ELSE ((stdev#10949 / mean#10950) > 1.0) END
            :           +- *(9) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32], functions=[stddev_samp(cast(inv_quantity_on_hand#8008 as double)), avg(inv_quantity_on_hand#8008)], output=[w_warehouse_sk#8009, i_item_sk#437, d_moy#32, stdev#10949, mean#10950])
            :              +- ShuffleQueryStage 8
            :                 +- Exchange hashpartitioning(w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=95398]
            :                    +- *(7) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#8008 as double)), partial_avg(inv_quantity_on_hand#8008)], output=[w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32, n#10975, avg#10976, m2#10977, sum#11175, count#11176L])
            :                       +- *(7) Project [inv_quantity_on_hand#8008, i_item_sk#437, w_warehouse_sk#8009, w_warehouse_name#8011, d_moy#32]
            :                          +- *(7) BroadcastHashJoin [inv_date_sk#8005], [d_date_sk#24], Inner, BuildRight, false
            :                             :- *(7) Project [inv_date_sk#8005, inv_quantity_on_hand#8008, i_item_sk#437, w_warehouse_sk#8009, w_warehouse_name#8011]
            :                             :  +- *(7) BroadcastHashJoin [inv_warehouse_sk#8007], [w_warehouse_sk#8009], Inner, BuildRight, false
            :                             :     :- *(7) Project [inv_date_sk#8005, inv_warehouse_sk#8007, inv_quantity_on_hand#8008, i_item_sk#437]
            :                             :     :  +- *(7) BroadcastHashJoin [inv_item_sk#8006], [i_item_sk#437], Inner, BuildRight, false
            :                             :     :     :- *(7) Filter ((isnotnull(inv_item_sk#8006) AND isnotnull(inv_warehouse_sk#8007)) AND isnotnull(inv_date_sk#8005))
            :                             :     :     :  +- *(7) ColumnarToRow
            :                             :     :     :     +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_warehouse_sk#8007,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_item_sk#8006), isnotnull(inv_warehouse_sk#8007), isnotnull(inv_date_sk#8005)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
            :                             :     :     +- BroadcastQueryStage 0
            :                             :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=94694]
            :                             :     :           +- *(1) Filter isnotnull(i_item_sk#437)
            :                             :     :              +- *(1) ColumnarToRow
            :                             :     :                 +- FileScan parquet default.item[i_item_sk#437] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>
            :                             :     +- BroadcastQueryStage 1
            :                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=94711]
            :                             :           +- *(2) Filter isnotnull(w_warehouse_sk#8009)
            :                             :              +- *(2) ColumnarToRow
            :                             :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
            :                             +- BroadcastQueryStage 2
            :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=94730]
            :                                   +- *(3) Project [d_date_sk#24, d_moy#32]
            :                                      +- *(3) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 2001)) AND (d_moy#32 = 1)) AND isnotnull(d_date_sk#24))
            :                                         +- *(3) ColumnarToRow
            :                                            +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 2001), (d_moy#32 = 1), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
            +- *(10) Project [w_warehouse_sk#11114, i_item_sk#11092, d_moy#11136, mean#10950 AS mean#10983, CASE WHEN (mean#10950 = 0.0) THEN null ELSE (stdev#10949 / mean#10950) END AS cov#10984]
               +- *(10) Filter CASE WHEN (mean#10950 = 0.0) THEN false ELSE ((stdev#10949 / mean#10950) > 1.0) END
                  +- *(10) HashAggregate(keys=[w_warehouse_name#11116, w_warehouse_sk#11114, i_item_sk#11092, d_moy#11136], functions=[stddev_samp(cast(inv_quantity_on_hand#11091 as double)), avg(inv_quantity_on_hand#11091)], output=[w_warehouse_sk#11114, i_item_sk#11092, d_moy#11136, stdev#10949, mean#10950])
                     +- ShuffleQueryStage 9
                        +- Exchange hashpartitioning(w_warehouse_name#11116, w_warehouse_sk#11114, i_item_sk#11092, d_moy#11136, 20), ENSURE_REQUIREMENTS, [plan_id=95453]
                           +- *(8) HashAggregate(keys=[w_warehouse_name#11116, w_warehouse_sk#11114, i_item_sk#11092, d_moy#11136], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#11091 as double)), partial_avg(inv_quantity_on_hand#11091)], output=[w_warehouse_name#11116, w_warehouse_sk#11114, i_item_sk#11092, d_moy#11136, n#11161, avg#11162, m2#11163, sum#11179, count#11180L])
                              +- *(8) Project [inv_quantity_on_hand#11091, i_item_sk#11092, w_warehouse_sk#11114, w_warehouse_name#11116, d_moy#11136]
                                 +- *(8) BroadcastHashJoin [inv_date_sk#11088], [d_date_sk#11128], Inner, BuildRight, false
                                    :- *(8) Project [inv_date_sk#11088, inv_quantity_on_hand#11091, i_item_sk#11092, w_warehouse_sk#11114, w_warehouse_name#11116]
                                    :  +- *(8) BroadcastHashJoin [inv_warehouse_sk#11090], [w_warehouse_sk#11114], Inner, BuildRight, false
                                    :     :- *(8) Project [inv_date_sk#11088, inv_warehouse_sk#11090, inv_quantity_on_hand#11091, i_item_sk#11092]
                                    :     :  +- *(8) BroadcastHashJoin [inv_item_sk#11089], [i_item_sk#11092], Inner, BuildRight, false
                                    :     :     :- *(8) Filter ((isnotnull(inv_item_sk#11089) AND isnotnull(inv_warehouse_sk#11090)) AND isnotnull(inv_date_sk#11088))
                                    :     :     :  +- *(8) ColumnarToRow
                                    :     :     :     +- FileScan parquet default.inventory[inv_date_sk#11088,inv_item_sk#11089,inv_warehouse_sk#11090,inv_quantity_on_hand#11091] Batched: true, DataFilters: [isnotnull(inv_item_sk#11089), isnotnull(inv_warehouse_sk#11090), isnotnull(inv_date_sk#11088)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
                                    :     :     +- BroadcastQueryStage 4
                                    :     :        +- ReusedExchange [i_item_sk#11092], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=94694]
                                    :     +- BroadcastQueryStage 6
                                    :        +- ReusedExchange [w_warehouse_sk#11114, w_warehouse_name#11116], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=94711]
                                    +- BroadcastQueryStage 7
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=94796]
                                          +- *(6) Project [d_date_sk#11128, d_moy#11136]
                                             +- *(6) Filter ((((isnotnull(d_year#11134) AND isnotnull(d_moy#11136)) AND (d_year#11134 = 2001)) AND (d_moy#11136 = 2)) AND isnotnull(d_date_sk#11128))
                                                +- *(6) ColumnarToRow
                                                   +- FileScan parquet default.date_dim[d_date_sk#11128,d_year#11134,d_moy#11136] Batched: true, DataFilters: [isnotnull(d_year#11134), isnotnull(d_moy#11136), (d_year#11134 = 2001), (d_moy#11136 = 2), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

==== q39b ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(11) Sort [w_warehouse_sk#8009 ASC NULLS FIRST, i_item_sk#437 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, mean#11330 ASC NULLS FIRST, cov#11331 ASC NULLS FIRST, d_moy#11516 ASC NULLS FIRST, mean#11363 ASC NULLS FIRST, cov#11364 ASC NULLS FIRST], true, 0
   +- ShuffleQueryStage 11
      +- Exchange rangepartitioning(w_warehouse_sk#8009 ASC NULLS FIRST, i_item_sk#437 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, mean#11330 ASC NULLS FIRST, cov#11331 ASC NULLS FIRST, d_moy#11516 ASC NULLS FIRST, mean#11363 ASC NULLS FIRST, cov#11364 ASC NULLS FIRST, 20), ENSURE_REQUIREMENTS, [plan_id=96830]
         +- *(10) BroadcastHashJoin [i_item_sk#437, w_warehouse_sk#8009], [i_item_sk#11472, w_warehouse_sk#11494], Inner, BuildLeft, false
            :- BroadcastQueryStage 10
            :  +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=96771]
            :     +- *(9) Project [w_warehouse_sk#8009, i_item_sk#437, d_moy#32, mean#11330, CASE WHEN (mean#11330 = 0.0) THEN null ELSE (stdev#11329 / mean#11330) END AS cov#11331]
            :        +- *(9) Filter (CASE WHEN (mean#11330 = 0.0) THEN false ELSE ((stdev#11329 / mean#11330) > 1.0) END AND CASE WHEN (mean#11330 = 0.0) THEN false ELSE ((stdev#11329 / mean#11330) > 1.5) END)
            :           +- *(9) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32], functions=[stddev_samp(cast(inv_quantity_on_hand#8008 as double)), avg(inv_quantity_on_hand#8008)], output=[w_warehouse_sk#8009, i_item_sk#437, d_moy#32, stdev#11329, mean#11330])
            :              +- ShuffleQueryStage 8
            :                 +- Exchange hashpartitioning(w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=96634]
            :                    +- *(7) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#8008 as double)), partial_avg(inv_quantity_on_hand#8008)], output=[w_warehouse_name#8011, w_warehouse_sk#8009, i_item_sk#437, d_moy#32, n#11355, avg#11356, m2#11357, sum#11555, count#11556L])
            :                       +- *(7) Project [inv_quantity_on_hand#8008, i_item_sk#437, w_warehouse_sk#8009, w_warehouse_name#8011, d_moy#32]
            :                          +- *(7) BroadcastHashJoin [inv_date_sk#8005], [d_date_sk#24], Inner, BuildRight, false
            :                             :- *(7) Project [inv_date_sk#8005, inv_quantity_on_hand#8008, i_item_sk#437, w_warehouse_sk#8009, w_warehouse_name#8011]
            :                             :  +- *(7) BroadcastHashJoin [inv_warehouse_sk#8007], [w_warehouse_sk#8009], Inner, BuildRight, false
            :                             :     :- *(7) Project [inv_date_sk#8005, inv_warehouse_sk#8007, inv_quantity_on_hand#8008, i_item_sk#437]
            :                             :     :  +- *(7) BroadcastHashJoin [inv_item_sk#8006], [i_item_sk#437], Inner, BuildRight, false
            :                             :     :     :- *(7) Filter ((isnotnull(inv_item_sk#8006) AND isnotnull(inv_warehouse_sk#8007)) AND isnotnull(inv_date_sk#8005))
            :                             :     :     :  +- *(7) ColumnarToRow
            :                             :     :     :     +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_warehouse_sk#8007,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_item_sk#8006), isnotnull(inv_warehouse_sk#8007), isnotnull(inv_date_sk#8005)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
            :                             :     :     +- BroadcastQueryStage 0
            :                             :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=95930]
            :                             :     :           +- *(1) Filter isnotnull(i_item_sk#437)
            :                             :     :              +- *(1) ColumnarToRow
            :                             :     :                 +- FileScan parquet default.item[i_item_sk#437] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>
            :                             :     +- BroadcastQueryStage 1
            :                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=95947]
            :                             :           +- *(2) Filter isnotnull(w_warehouse_sk#8009)
            :                             :              +- *(2) ColumnarToRow
            :                             :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
            :                             +- BroadcastQueryStage 2
            :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=95966]
            :                                   +- *(3) Project [d_date_sk#24, d_moy#32]
            :                                      +- *(3) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 2001)) AND (d_moy#32 = 1)) AND isnotnull(d_date_sk#24))
            :                                         +- *(3) ColumnarToRow
            :                                            +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 2001), (d_moy#32 = 1), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
            +- *(10) Project [w_warehouse_sk#11494, i_item_sk#11472, d_moy#11516, mean#11330 AS mean#11363, CASE WHEN (mean#11330 = 0.0) THEN null ELSE (stdev#11329 / mean#11330) END AS cov#11364]
               +- *(10) Filter CASE WHEN (mean#11330 = 0.0) THEN false ELSE ((stdev#11329 / mean#11330) > 1.0) END
                  +- *(10) HashAggregate(keys=[w_warehouse_name#11496, w_warehouse_sk#11494, i_item_sk#11472, d_moy#11516], functions=[stddev_samp(cast(inv_quantity_on_hand#11471 as double)), avg(inv_quantity_on_hand#11471)], output=[w_warehouse_sk#11494, i_item_sk#11472, d_moy#11516, stdev#11329, mean#11330])
                     +- ShuffleQueryStage 9
                        +- Exchange hashpartitioning(w_warehouse_name#11496, w_warehouse_sk#11494, i_item_sk#11472, d_moy#11516, 20), ENSURE_REQUIREMENTS, [plan_id=96689]
                           +- *(8) HashAggregate(keys=[w_warehouse_name#11496, w_warehouse_sk#11494, i_item_sk#11472, d_moy#11516], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#11471 as double)), partial_avg(inv_quantity_on_hand#11471)], output=[w_warehouse_name#11496, w_warehouse_sk#11494, i_item_sk#11472, d_moy#11516, n#11541, avg#11542, m2#11543, sum#11559, count#11560L])
                              +- *(8) Project [inv_quantity_on_hand#11471, i_item_sk#11472, w_warehouse_sk#11494, w_warehouse_name#11496, d_moy#11516]
                                 +- *(8) BroadcastHashJoin [inv_date_sk#11468], [d_date_sk#11508], Inner, BuildRight, false
                                    :- *(8) Project [inv_date_sk#11468, inv_quantity_on_hand#11471, i_item_sk#11472, w_warehouse_sk#11494, w_warehouse_name#11496]
                                    :  +- *(8) BroadcastHashJoin [inv_warehouse_sk#11470], [w_warehouse_sk#11494], Inner, BuildRight, false
                                    :     :- *(8) Project [inv_date_sk#11468, inv_warehouse_sk#11470, inv_quantity_on_hand#11471, i_item_sk#11472]
                                    :     :  +- *(8) BroadcastHashJoin [inv_item_sk#11469], [i_item_sk#11472], Inner, BuildRight, false
                                    :     :     :- *(8) Filter ((isnotnull(inv_item_sk#11469) AND isnotnull(inv_warehouse_sk#11470)) AND isnotnull(inv_date_sk#11468))
                                    :     :     :  +- *(8) ColumnarToRow
                                    :     :     :     +- FileScan parquet default.inventory[inv_date_sk#11468,inv_item_sk#11469,inv_warehouse_sk#11470,inv_quantity_on_hand#11471] Batched: true, DataFilters: [isnotnull(inv_item_sk#11469), isnotnull(inv_warehouse_sk#11470), isnotnull(inv_date_sk#11468)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)], ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
                                    :     :     +- BroadcastQueryStage 4
                                    :     :        +- ReusedExchange [i_item_sk#11472], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=95930]
                                    :     +- BroadcastQueryStage 6
                                    :        +- ReusedExchange [w_warehouse_sk#11494, w_warehouse_name#11496], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=95947]
                                    +- BroadcastQueryStage 7
                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=96032]
                                          +- *(6) Project [d_date_sk#11508, d_moy#11516]
                                             +- *(6) Filter ((((isnotnull(d_year#11514) AND isnotnull(d_moy#11516)) AND (d_year#11514 = 2001)) AND (d_moy#11516 = 2)) AND isnotnull(d_date_sk#11508))
                                                +- *(6) ColumnarToRow
                                                   +- FileScan parquet default.date_dim[d_date_sk#11508,d_year#11514,d_moy#11516] Batched: true, DataFilters: [isnotnull(d_year#11514), isnotnull(d_moy#11516), (d_year#11514 = 2001), (d_moy#11516 = 2), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

==== q40 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[w_state#8019 ASC NULLS FIRST,i_item_id#438 ASC NULLS FIRST], output=[w_state#8019,i_item_id#438,sales_before#11709,sales_after#11710])
   +- *(9) HashAggregate(keys=[w_state#8019, i_item_id#438], functions=[sum(CASE WHEN (d_date#26 < 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#3314 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)) ELSE 0.00 END), sum(CASE WHEN (d_date#26 >= 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#3314 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)) ELSE 0.00 END)], output=[w_state#8019, i_item_id#438, sales_before#11709, sales_after#11710])
      +- ShuffleQueryStage 5
         +- Exchange hashpartitioning(w_state#8019, i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=97438]
            +- *(8) HashAggregate(keys=[w_state#8019, i_item_id#438], functions=[partial_sum(CASE WHEN (d_date#26 < 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#3314 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#26 >= 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#3314 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)) ELSE 0.00 END)], output=[w_state#8019, i_item_id#438, sum#11721, isEmpty#11722, sum#11723, isEmpty#11724])
               +- *(8) Project [cs_sales_price#218, cr_refunded_cash#3314, w_state#8019, i_item_id#438, d_date#26]
                  +- *(8) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                     :- *(8) Project [cs_sold_date_sk#197, cs_sales_price#218, cr_refunded_cash#3314, w_state#8019, i_item_id#438]
                     :  +- *(8) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#437], Inner, BuildRight, false
                     :     :- *(8) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_sales_price#218, cr_refunded_cash#3314, w_state#8019]
                     :     :  +- *(8) BroadcastHashJoin [cs_warehouse_sk#211], [w_warehouse_sk#8009], Inner, BuildRight, false
                     :     :     :- *(8) Project [cs_sold_date_sk#197, cs_warehouse_sk#211, cs_item_sk#212, cs_sales_price#218, cr_refunded_cash#3314]
                     :     :     :  +- *(8) SortMergeJoin [cs_order_number#214, cs_item_sk#212], [cr_order_number#3307, cr_item_sk#3293], LeftOuter
                     :     :     :     :- *(6) Sort [cs_order_number#214 ASC NULLS FIRST, cs_item_sk#212 ASC NULLS FIRST], false, 0
                     :     :     :     :  +- ShuffleQueryStage 0
                     :     :     :     :     +- Exchange hashpartitioning(cs_order_number#214, cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=97025]
                     :     :     :     :        +- *(1) Filter ((isnotnull(cs_warehouse_sk#211) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_date_sk#197))
                     :     :     :     :           +- *(1) ColumnarToRow
                     :     :     :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_warehouse_sk#211,cs_item_sk#212,cs_order_number#214,cs_sales_price#218] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#211), isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:...
                     :     :     :     +- *(7) Sort [cr_order_number#3307 ASC NULLS FIRST, cr_item_sk#3293 ASC NULLS FIRST], false, 0
                     :     :     :        +- ShuffleQueryStage 1
                     :     :     :           +- Exchange hashpartitioning(cr_order_number#3307, cr_item_sk#3293, 20), ENSURE_REQUIREMENTS, [plan_id=97042]
                     :     :     :              +- *(2) Filter (isnotnull(cr_order_number#3307) AND isnotnull(cr_item_sk#3293))
                     :     :     :                 +- *(2) ColumnarToRow
                     :     :     :                    +- FileScan parquet default.catalog_returns[cr_item_sk#3293,cr_order_number#3307,cr_refunded_cash#3314] Batched: true, DataFilters: [isnotnull(cr_order_number#3307), isnotnull(cr_item_sk#3293)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2)>
                     :     :     +- BroadcastQueryStage 2
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=97061]
                     :     :           +- *(3) Filter isnotnull(w_warehouse_sk#8009)
                     :     :              +- *(3) ColumnarToRow
                     :     :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_state#8019] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_state:string>
                     :     +- BroadcastQueryStage 3
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=97080]
                     :           +- *(4) Project [i_item_sk#437, i_item_id#438]
                     :              +- *(4) Filter (((isnotnull(i_current_price#442) AND (i_current_price#442 >= 0.99)) AND (i_current_price#442 <= 1.49)) AND isnotnull(i_item_sk#437))
                     :                 +- *(4) ColumnarToRow
                     :                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_current_price#442] Batched: true, DataFilters: [isnotnull(i_current_price#442), (i_current_price#442 >= 0.99), (i_current_price#442 <= 1.49), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>
                     +- BroadcastQueryStage 4
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=97099]
                           +- *(5) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-02-10)) AND (d_date#26 <= 2000-04-10)) AND isnotnull(d_date_sk#24))
                              +- *(5) ColumnarToRow
                                 +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-02-10), (d_date#26 <= 2000-04-10), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>

==== q41 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_product_name#458 ASC NULLS FIRST], output=[i_product_name#458])
   +- *(5) HashAggregate(keys=[i_product_name#458], functions=[], output=[i_product_name#458])
      +- ShuffleQueryStage 3
         +- Exchange hashpartitioning(i_product_name#458, 20), ENSURE_REQUIREMENTS, [plan_id=97790]
            +- *(4) HashAggregate(keys=[i_product_name#458], functions=[], output=[i_product_name#458])
               +- *(4) Project [i_product_name#458]
                  +- *(4) BroadcastHashJoin [i_manufact#451], [i_manufact#11754], Inner, BuildRight, false
                     :- AQEShuffleRead local
                     :  +- ShuffleQueryStage 0
                     :     +- Exchange hashpartitioning(i_manufact#451, 20), ENSURE_REQUIREMENTS, [plan_id=97591]
                     :        +- *(1) Project [i_manufact#451, i_product_name#458]
                     :           +- *(1) Filter (((isnotnull(i_manufact_id#450) AND (i_manufact_id#450 >= 738)) AND (i_manufact_id#450 <= 778)) AND isnotnull(i_manufact#451))
                     :              +- *(1) ColumnarToRow
                     :                 +- FileScan parquet default.item[i_manufact_id#450,i_manufact#451,i_product_name#458] Batched: true, DataFilters: [isnotnull(i_manufact_id#450), (i_manufact_id#450 >= 738), (i_manufact_id#450 <= 778), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), GreaterThanOrEqual(i_manufact_id,738), LessThanOrEqual(i_manufact_id,7..., ReadSchema: struct<i_manufact_id:int,i_manufact:string,i_product_name:string>
                     +- BroadcastQueryStage 2
                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=97735]
                           +- *(3) Project [i_manufact#11754]
                              +- *(3) Filter (item_cnt#11737L > 0)
                                 +- *(3) HashAggregate(keys=[i_manufact#11754], functions=[count(1)], output=[item_cnt#11737L, i_manufact#11754])
                                    +- ShuffleQueryStage 1
                                       +- Exchange hashpartitioning(i_manufact#11754, 20), ENSURE_REQUIREMENTS, [plan_id=97614]
                                          +- *(2) HashAggregate(keys=[i_manufact#11754], functions=[partial_count(1)], output=[i_manufact#11754, count#11766L])
                                             +- *(2) Project [i_manufact#11754]
                                                +- *(2) Filter (((((i_category#11752 = Women                                             ) AND (((((i_color#11757 = powder              ) OR (i_color#11757 = khaki               )) AND ((i_units#11758 = Ounce     ) OR (i_units#11758 = Oz        ))) AND ((i_size#11755 = medium              ) OR (i_size#11755 = extra large         ))) OR ((((i_color#11757 = brown               ) OR (i_color#11757 = honeydew            )) AND ((i_units#11758 = Bunch     ) OR (i_units#11758 = Ton       ))) AND ((i_size#11755 = N/A                 ) OR (i_size#11755 = small               ))))) OR ((i_category#11752 = Men                                               ) AND (((((i_color#11757 = floral              ) OR (i_color#11757 = deep                )) AND ((i_units#11758 = N/A       ) OR (i_units#11758 = Dozen     ))) AND ((i_size#11755 = petite              ) OR (i_size#11755 = large               ))) OR ((((i_color#11757 = light               ) OR (i_color#11757 = cornflower          )) AND ((i_units#11758 = Box       ) OR (i_units#11758 = Pound     ))) AND ((i_size#11755 = medium              ) OR (i_size#11755 = extra large         )))))) OR (((i_category#11752 = Women                                             ) AND (((((i_color#11757 = midnight            ) OR (i_color#11757 = snow                )) AND ((i_units#11758 = Pallet    ) OR (i_units#11758 = Gross     ))) AND ((i_size#11755 = medium              ) OR (i_size#11755 = extra large         ))) OR ((((i_color#11757 = cyan                ) OR (i_color#11757 = papaya              )) AND ((i_units#11758 = Cup       ) OR (i_units#11758 = Dram      ))) AND ((i_size#11755 = N/A                 ) OR (i_size#11755 = small               ))))) OR ((i_category#11752 = Men                                               ) AND (((((i_color#11757 = orange              ) OR (i_color#11757 = frosted             )) AND ((i_units#11758 = Each      ) OR (i_units#11758 = Tbl       ))) AND ((i_size#11755 = petite              ) OR (i_size#11755 = large               ))) OR ((((i_color#11757 = forest              ) OR (i_color#11757 = ghost               )) AND ((i_units#11758 = Lb        ) OR (i_units#11758 = Bundle    ))) AND ((i_size#11755 = medium              ) OR (i_size#11755 = extra large         ))))))) AND isnotnull(i_manufact#11754))
                                                   +- *(2) ColumnarToRow
                                                      +- FileScan parquet default.item[i_category#11752,i_manufact#11754,i_size#11755,i_color#11757,i_units#11758] Batched: true, DataFilters: [((((i_category#11752 = Women                                             ) AND (((((i_color#1175..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [Or(Or(And(EqualTo(i_category,Women                                             ),Or(And(And(Or(E..., ReadSchema: struct<i_category:string,i_manufact:string,i_size:string,i_color:string,i_units:string>

==== q42 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[sum(ss_ext_sales_price)#11768 DESC NULLS LAST,d_year#30 ASC NULLS FIRST,i_category_id#448 ASC NULLS FIRST,i_category#449 ASC NULLS FIRST], output=[d_year#30,i_category_id#448,i_category#449,sum(ss_ext_sales_price)#11768])
   +- *(4) HashAggregate(keys=[d_year#30, i_category_id#448, i_category#449], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[d_year#30, i_category_id#448, i_category#449, sum(ss_ext_sales_price)#11768])
      +- ShuffleQueryStage 2
         +- Exchange hashpartitioning(d_year#30, i_category_id#448, i_category#449, 20), ENSURE_REQUIREMENTS, [plan_id=98063]
            +- *(3) HashAggregate(keys=[d_year#30, i_category_id#448, i_category#449], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[d_year#30, i_category_id#448, i_category#449, sum#11775L])
               +- *(3) Project [d_year#30, ss_ext_sales_price#429, i_category_id#448, i_category#449]
                  +- *(3) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :- *(3) Project [d_year#30, ss_item_sk#416, ss_ext_sales_price#429]
                     :  +- *(3) BroadcastHashJoin [d_date_sk#24], [ss_sold_date_sk#414], Inner, BuildLeft, false
                     :     :- BroadcastQueryStage 0
                     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=97921]
                     :     :     +- *(1) Project [d_date_sk#24, d_year#30]
                     :     :        +- *(1) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 11)) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
                     :     :           +- *(1) ColumnarToRow
                     :     :              +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 11), (d_year#30 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :     +- *(3) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416))
                     :        +- *(3) ColumnarToRow
                     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
                     +- BroadcastQueryStage 1
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=97942]
                           +- *(2) Project [i_item_sk#437, i_category_id#448, i_category#449]
                              +- *(2) Filter ((isnotnull(i_manager_id#457) AND (i_manager_id#457 = 1)) AND isnotnull(i_item_sk#437))
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet default.item[i_item_sk#437,i_category_id#448,i_category#449,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_manager_id#457), (i_manager_id#457 = 1), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_category_id:int,i_category:string,i_manager_id:int>

==== q43 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#57 ASC NULLS FIRST,s_store_id#53 ASC NULLS FIRST,sun_sales#11779 ASC NULLS FIRST,mon_sales#11780 ASC NULLS FIRST,tue_sales#11781 ASC NULLS FIRST,wed_sales#11782 ASC NULLS FIRST,thu_sales#11783 ASC NULLS FIRST,fri_sales#11784 ASC NULLS FIRST,sat_sales#11785 ASC NULLS FIRST], output=[s_store_name#57,s_store_id#53,sun_sales#11779,mon_sales#11780,tue_sales#11781,wed_sales#11782,thu_sales#11783,fri_sales#11784,sat_sales#11785])
   +- *(4) HashAggregate(keys=[s_store_name#57, s_store_id#53], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN ss_sales_price#427 END))], output=[s_store_name#57, s_store_id#53, sun_sales#11779, mon_sales#11780, tue_sales#11781, wed_sales#11782, thu_sales#11783, fri_sales#11784, sat_sales#11785])
      +- ShuffleQueryStage 2
         +- Exchange hashpartitioning(s_store_name#57, s_store_id#53, 20), ENSURE_REQUIREMENTS, [plan_id=98340]
            +- *(3) HashAggregate(keys=[s_store_name#57, s_store_id#53], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN ss_sales_price#427 END))], output=[s_store_name#57, s_store_id#53, sum#11809L, sum#11810L, sum#11811L, sum#11812L, sum#11813L, sum#11814L, sum#11815L])
               +- *(3) Project [d_day_name#38, ss_sales_price#427, s_store_id#53, s_store_name#57]
                  +- *(3) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                     :- *(3) Project [d_day_name#38, ss_store_sk#421, ss_sales_price#427]
                     :  +- *(3) BroadcastHashJoin [d_date_sk#24], [ss_sold_date_sk#414], Inner, BuildLeft, false
                     :     :- BroadcastQueryStage 0
                     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=98198]
                     :     :     +- *(1) Project [d_date_sk#24, d_day_name#38]
                     :     :        +- *(1) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
                     :     :           +- *(1) ColumnarToRow
                     :     :              +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_day_name#38] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_day_name:string>
                     :     +- *(3) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
                     :        +- *(3) ColumnarToRow
                     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                     +- BroadcastQueryStage 1
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=98219]
                           +- *(2) Project [s_store_sk#52, s_store_id#53, s_store_name#57]
                              +- *(2) Filter ((isnotnull(s_gmt_offset#79) AND (s_gmt_offset#79 = -5.00)) AND isnotnull(s_store_sk#52))
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet default.store[s_store_sk#52,s_store_id#53,s_store_name#57,s_gmt_offset#79] Batched: true, DataFilters: [isnotnull(s_gmt_offset#79), (s_gmt_offset#79 = -5.00), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string,s_gmt_offset:decimal(5,2)>


==== q44 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[rnk#11841 ASC NULLS FIRST], output=[rnk#11841,best_performing#11847,worst_performing#11848])
   +- *(11) Project [rnk#11841, i_product_name#458 AS best_performing#11847, i_product_name#11897 AS worst_performing#11848]
      +- *(11) BroadcastHashJoin [item_sk#11842], [i_item_sk#11876], Inner, BuildRight, false
         :- *(11) Project [rnk#11841, item_sk#11842, i_product_name#458]
         :  +- *(11) BroadcastHashJoin [item_sk#11837], [i_item_sk#437], Inner, BuildRight, false
         :     :- *(11) Project [item_sk#11837, rnk#11841, item_sk#11842]
         :     :  +- *(11) SortMergeJoin [rnk#11841], [rnk#11846], Inner
         :     :     :- *(8) Sort [rnk#11841 ASC NULLS FIRST], false, 0
         :     :     :  +- *(8) Project [item_sk#11837, rnk#11841]
         :     :     :     +- *(8) Filter ((rnk#11841 < 11) AND isnotnull(item_sk#11837))
         :     :     :        +- Window [rank(rank_col#11838) windowspecdefinition(rank_col#11838 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#11841], [rank_col#11838 ASC NULLS FIRST]
         :     :     :           +- *(7) Sort [rank_col#11838 ASC NULLS FIRST], false, 0
         :     :     :              +- ShuffleQueryStage 6
         :     :     :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=98903]
         :     :     :                    +- *(5) Filter (isnotnull(rank_col#11838) AND (cast(rank_col#11838 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(Subquery subquery#11840, [id=#98486])), DecimalType(13,7))))
         :     :     :                       :  +- Subquery subquery#11840, [id=#98486]
         :     :     :                       :     +- AdaptiveSparkPlan isFinalPlan=true
                                                   +- == Final Plan ==
                                                      *(2) HashAggregate(keys=[ss_store_sk#11912], functions=[avg(UnscaledValue(ss_net_profit#11927))], output=[rank_col#11839])
                                                      +- ShuffleQueryStage 0
                                                         +- Exchange hashpartitioning(ss_store_sk#11912, 20), ENSURE_REQUIREMENTS, [plan_id=98960]
                                                            +- *(1) HashAggregate(keys=[ss_store_sk#11912], functions=[partial_avg(UnscaledValue(ss_net_profit#11927))], output=[ss_store_sk#11912, sum#11985, count#11986L])
                                                               +- *(1) Project [ss_store_sk#11912, ss_net_profit#11927]
                                                                  +- *(1) Filter ((isnotnull(ss_store_sk#11912) AND (ss_store_sk#11912 = 4)) AND isnull(ss_addr_sk#11911))
                                                                     +- *(1) ColumnarToRow
                                                                        +- FileScan parquet default.store_sales[ss_addr_sk#11911,ss_store_sk#11912,ss_net_profit#11927] Batched: true, DataFilters: [isnotnull(ss_store_sk#11912), (ss_store_sk#11912 = 4), isnull(ss_addr_sk#11911)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)], ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                                                   +- == Initial Plan ==
                                                      HashAggregate(keys=[ss_store_sk#11912], functions=[avg(UnscaledValue(ss_net_profit#11927))], output=[rank_col#11839])
                                                      +- Exchange hashpartitioning(ss_store_sk#11912, 20), ENSURE_REQUIREMENTS, [plan_id=98484]
                                                         +- HashAggregate(keys=[ss_store_sk#11912], functions=[partial_avg(UnscaledValue(ss_net_profit#11927))], output=[ss_store_sk#11912, sum#11985, count#11986L])
                                                            +- Project [ss_store_sk#11912, ss_net_profit#11927]
                                                               +- Filter ((isnotnull(ss_store_sk#11912) AND (ss_store_sk#11912 = 4)) AND isnull(ss_addr_sk#11911))
                                                                  +- FileScan parquet default.store_sales[ss_addr_sk#11911,ss_store_sk#11912,ss_net_profit#11927] Batched: true, DataFilters: [isnotnull(ss_store_sk#11912), (ss_store_sk#11912 = 4), isnull(ss_addr_sk#11911)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)], ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
         :     :     :                       +- *(5) HashAggregate(keys=[ss_item_sk#416], functions=[avg(UnscaledValue(ss_net_profit#436))], output=[item_sk#11837, rank_col#11838])
         :     :     :                          +- ShuffleQueryStage 0
         :     :     :                             +- Exchange hashpartitioning(ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=98589]
         :     :     :                                +- *(1) HashAggregate(keys=[ss_item_sk#416], functions=[partial_avg(UnscaledValue(ss_net_profit#436))], output=[ss_item_sk#416, sum#11977, count#11978L])
         :     :     :                                   +- *(1) Project [ss_item_sk#416, ss_net_profit#436]
         :     :     :                                      +- *(1) Filter (isnotnull(ss_store_sk#421) AND (ss_store_sk#421 = 4))
         :     :     :                                         +- *(1) ColumnarToRow
         :     :     :                                            +- FileScan parquet default.store_sales[ss_item_sk#416,ss_store_sk#421,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_store_sk#421), (ss_store_sk#421 = 4)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
         :     :     +- *(10) Sort [rnk#11846 ASC NULLS FIRST], false, 0
         :     :        +- *(10) Project [item_sk#11842, rnk#11846]
         :     :           +- *(10) Filter ((rnk#11846 < 11) AND isnotnull(item_sk#11842))
         :     :              +- Window [rank(rank_col#11843) windowspecdefinition(rank_col#11843 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#11846], [rank_col#11843 DESC NULLS LAST]
         :     :                 +- *(9) Sort [rank_col#11843 DESC NULLS LAST], false, 0
         :     :                    +- ShuffleQueryStage 8
         :     :                       +- ReusedExchange [item_sk#11842, rank_col#11843], Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=98903]
         :     +- BroadcastQueryStage 3
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=98681]
         :           +- *(3) Filter isnotnull(i_item_sk#437)
         :              +- *(3) ColumnarToRow
         :                 +- FileScan parquet default.item[i_item_sk#437,i_product_name#458] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>
         +- BroadcastQueryStage 5
            +- ReusedExchange [i_item_sk#11876, i_product_name#11897], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=98681]

==== q45 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ca_zip#3726 ASC NULLS FIRST,ca_city#3723 ASC NULLS FIRST], output=[ca_zip#3726,ca_city#3723,sum(ws_sales_price)#12041])
   +- *(10) HashAggregate(keys=[ca_zip#3726, ca_city#3723], functions=[sum(UnscaledValue(ws_sales_price#184))], output=[ca_zip#3726, ca_city#3723, sum(ws_sales_price)#12041])
      +- ShuffleQueryStage 6
         +- Exchange hashpartitioning(ca_zip#3726, ca_city#3723, 20), ENSURE_REQUIREMENTS, [plan_id=99886]
            +- *(9) HashAggregate(keys=[ca_zip#3726, ca_city#3723], functions=[partial_sum(UnscaledValue(ws_sales_price#184))], output=[ca_zip#3726, ca_city#3723, sum#12047L])
               +- *(9) Project [ws_sales_price#184, ca_city#3723, ca_zip#3726]
                  +- *(9) Filter (substr(ca_zip#3726, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#12045)
                     +- *(9) BroadcastHashJoin [i_item_id#438], [i_item_id#12019], ExistenceJoin(exists#12045), BuildRight, false
                        :- *(9) Project [ws_sales_price#184, ca_city#3723, ca_zip#3726, i_item_id#438]
                        :  +- *(9) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#437], Inner, BuildRight, false
                        :     :- *(9) Project [ws_item_sk#166, ws_sales_price#184, ca_city#3723, ca_zip#3726]
                        :     :  +- *(9) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :- *(9) Project [ws_sold_date_sk#163, ws_item_sk#166, ws_sales_price#184, ca_city#3723, ca_zip#3726]
                        :     :     :  +- *(9) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
                        :     :     :     :- *(9) Project [ws_sold_date_sk#163, ws_item_sk#166, ws_sales_price#184, c_current_addr_sk#85]
                        :     :     :     :  +- *(9) SortMergeJoin [ws_bill_customer_sk#167], [c_customer_sk#81], Inner
                        :     :     :     :     :- *(7) Sort [ws_bill_customer_sk#167 ASC NULLS FIRST], false, 0
                        :     :     :     :     :  +- ShuffleQueryStage 0
                        :     :     :     :     :     +- Exchange hashpartitioning(ws_bill_customer_sk#167, 20), ENSURE_REQUIREMENTS, [plan_id=99284]
                        :     :     :     :     :        +- *(1) Filter ((isnotnull(ws_bill_customer_sk#167) AND isnotnull(ws_sold_date_sk#163)) AND isnotnull(ws_item_sk#166))
                        :     :     :     :     :           +- *(1) ColumnarToRow
                        :     :     :     :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_customer_sk#167,ws_sales_price#184] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#167), isnotnull(ws_sold_date_sk#163), isnotnull(ws_item_sk#166)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_sales_price:decimal(7,2)>
                        :     :     :     :     +- *(8) Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0
                        :     :     :     :        +- ShuffleQueryStage 1
                        :     :     :     :           +- Exchange hashpartitioning(c_customer_sk#81, 20), ENSURE_REQUIREMENTS, [plan_id=99301]
                        :     :     :     :              +- *(2) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
                        :     :     :     :                 +- *(2) ColumnarToRow
                        :     :     :     :                    +- FileScan parquet default.customer[c_customer_sk#81,c_current_addr_sk#85] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
                        :     :     :     +- BroadcastQueryStage 2
                        :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=99320]
                        :     :     :           +- *(3) Filter isnotnull(ca_address_sk#3717)
                        :     :     :              +- *(3) ColumnarToRow
                        :     :     :                 +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_city#3723,ca_zip#3726] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_city:string,ca_zip:string>
                        :     :     +- BroadcastQueryStage 3
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=99339]
                        :     :           +- *(4) Project [d_date_sk#24]
                        :     :              +- *(4) Filter ((((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND (d_qoy#34 = 2)) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                        :     :                 +- *(4) ColumnarToRow
                        :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_qoy#34), isnotnull(d_year#30), (d_qoy#34 = 2), (d_year#30 = 2001), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                        :     +- BroadcastQueryStage 4
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=99358]
                        :           +- *(5) Filter isnotnull(i_item_sk#437)
                        :              +- *(5) ColumnarToRow
                        :                 +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                        +- BroadcastQueryStage 5
                           +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=99377]
                              +- *(6) Project [i_item_id#12019]
                                 +- *(6) Filter i_item_sk#12018 IN (2,3,5,7,11,13,17,19,23,29)
                                    +- *(6) ColumnarToRow
                                       +- FileScan parquet default.item[i_item_sk#12018,i_item_id#12019] Batched: true, DataFilters: [i_item_sk#12018 IN (2,3,5,7,11,13,17,19,23,29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [In(i_item_sk, [11,13,17,19,2,23,29,3,5,7])], ReadSchema: struct<i_item_sk:int,i_item_id:string>

==== q47 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[CheckOverflow((promote_precision(cast(sum_sales#12088 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#12089 as decimal(22,6)))), DecimalType(22,6)) ASC NULLS FIRST,s_store_name#57 ASC NULLS FIRST], output=[i_category#449,i_brand#445,s_store_name#57,s_company_name#69,d_year#30,d_moy#32,avg_monthly_sales#12089,sum_sales#12088,psum#12091,nsum#12092])
   +- *(27) Project [i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, avg_monthly_sales#12089, sum_sales#12088, sum_sales#12113 AS psum#12091, sum_sales#12122 AS nsum#12092]
      +- *(27) SortMergeJoin [i_category#449, i_brand#445, s_store_name#57, s_company_name#69, rn#12090], [i_category#12468, i_brand#12464, s_store_name#12534, s_company_name#12546, (rn#12562 - 1)], Inner
         :- *(25) Project [i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, sum_sales#12088, avg_monthly_sales#12089, rn#12090, sum_sales#12113]
         :  +- *(25) SortMergeJoin [i_category#449, i_brand#445, s_store_name#57, s_company_name#69, rn#12090], [i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, (rn#12455 + 1)], Inner
         :     :- *(23) Sort [i_category#449 ASC NULLS FIRST, i_brand#445 ASC NULLS FIRST, s_store_name#57 ASC NULLS FIRST, s_company_name#69 ASC NULLS FIRST, rn#12090 ASC NULLS FIRST], false, 0
         :     :  +- ShuffleQueryStage 24
         :     :     +- Exchange hashpartitioning(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, rn#12090, 20), ENSURE_REQUIREMENTS, [plan_id=102691]
         :     :        +- *(18) Project [i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, sum_sales#12088, avg_monthly_sales#12089, rn#12090]
         :     :           +- *(18) Filter ((isnotnull(avg_monthly_sales#12089) AND (avg_monthly_sales#12089 > 0.000000)) AND CASE WHEN (avg_monthly_sales#12089 > 0.000000) THEN (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#12088 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#12089 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#12089 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000) END)
         :     :              +- Window [avg(_w0#12106) windowspecdefinition(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#12089], [i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30]
         :     :                 +- *(17) Filter (isnotnull(d_year#30) AND (d_year#30 = 1999))
         :     :                    +- Window [rank(d_year#30, d_moy#32) windowspecdefinition(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#12090], [i_category#449, i_brand#445, s_store_name#57, s_company_name#69], [d_year#30 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST]
         :     :                       +- *(16) Sort [i_category#449 ASC NULLS FIRST, i_brand#445 ASC NULLS FIRST, s_store_name#57 ASC NULLS FIRST, s_company_name#69 ASC NULLS FIRST, d_year#30 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST], false, 0
         :     :                          +- ShuffleQueryStage 20
         :     :                             +- Exchange hashpartitioning(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, 20), ENSURE_REQUIREMENTS, [plan_id=102513]
         :     :                                +- *(13) HashAggregate(keys=[i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32], functions=[sum(UnscaledValue(ss_sales_price#427))], output=[i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, sum_sales#12088, _w0#12106])
         :     :                                   +- ShuffleQueryStage 15
         :     :                                      +- Exchange hashpartitioning(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=102257]
         :     :                                         +- *(10) HashAggregate(keys=[i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32], functions=[partial_sum(UnscaledValue(ss_sales_price#427))], output=[i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, sum#12564L])
         :     :                                            +- *(10) Project [i_brand#445, i_category#449, ss_sales_price#427, d_year#30, d_moy#32, s_store_name#57, s_company_name#69]
         :     :                                               +- *(10) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
         :     :                                                  :- *(10) Project [i_brand#445, i_category#449, ss_store_sk#421, ss_sales_price#427, d_year#30, d_moy#32]
         :     :                                                  :  +- *(10) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :     :                                                  :     :- *(10) Project [i_brand#445, i_category#449, ss_sold_date_sk#414, ss_store_sk#421, ss_sales_price#427]
         :     :                                                  :     :  +- *(10) BroadcastHashJoin [i_item_sk#437], [ss_item_sk#416], Inner, BuildLeft, false
         :     :                                                  :     :     :- BroadcastQueryStage 0
         :     :                                                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=101207]
         :     :                                                  :     :     :     +- *(1) Filter ((isnotnull(i_item_sk#437) AND isnotnull(i_category#449)) AND isnotnull(i_brand#445))
         :     :                                                  :     :     :        +- *(1) ColumnarToRow
         :     :                                                  :     :     :           +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_category#449] Batched: true, DataFilters: [isnotnull(i_item_sk#437), isnotnull(i_category#449), isnotnull(i_brand#445)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>
         :     :                                                  :     :     +- *(10) Filter ((isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
         :     :                                                  :     :        +- *(10) ColumnarToRow
         :     :                                                  :     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :     :                                                  :     +- BroadcastQueryStage 1
         :     :                                                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=101224]
         :     :                                                  :           +- *(2) Filter ((((d_year#30 = 1999) OR ((d_year#30 = 1998) AND (d_moy#32 = 12))) OR ((d_year#30 = 2000) AND (d_moy#32 = 1))) AND isnotnull(d_date_sk#24))
         :     :                                                  :              +- *(2) ColumnarToRow
         :     :                                                  :                 +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [(((d_year#30 = 1999) OR ((d_year#30 = 1998) AND (d_moy#32 = 12))) OR ((d_year#30 = 2000) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
         :     :                                                  +- BroadcastQueryStage 2
         :     :                                                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=101241]
         :     :                                                        +- *(3) Filter ((isnotnull(s_store_sk#52) AND isnotnull(s_store_name#57)) AND isnotnull(s_company_name#69))
         :     :                                                           +- *(3) ColumnarToRow
         :     :                                                              +- FileScan parquet default.store[s_store_sk#52,s_store_name#57,s_company_name#69] Batched: true, DataFilters: [isnotnull(s_store_sk#52), isnotnull(s_store_name#57), isnotnull(s_company_name#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_company_name)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>
         :     +- *(24) Sort [i_category#12361 ASC NULLS FIRST, i_brand#12357 ASC NULLS FIRST, s_store_name#12427 ASC NULLS FIRST, s_company_name#12439 ASC NULLS FIRST, (rn#12455 + 1) ASC NULLS FIRST], false, 0
         :        +- ShuffleQueryStage 25
         :           +- Exchange hashpartitioning(i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, (rn#12455 + 1), 20), ENSURE_REQUIREMENTS, [plan_id=102793]
         :              +- *(20) Project [i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, sum_sales#12088 AS sum_sales#12113, rn#12455]
         :                 +- Window [rank(d_year#12400, d_moy#12402) windowspecdefinition(i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, d_year#12400 ASC NULLS FIRST, d_moy#12402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#12455], [i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439], [d_year#12400 ASC NULLS FIRST, d_moy#12402 ASC NULLS FIRST]
         :                    +- *(19) Sort [i_category#12361 ASC NULLS FIRST, i_brand#12357 ASC NULLS FIRST, s_store_name#12427 ASC NULLS FIRST, s_company_name#12439 ASC NULLS FIRST, d_year#12400 ASC NULLS FIRST, d_moy#12402 ASC NULLS FIRST], false, 0
         :                       +- ShuffleQueryStage 21
         :                          +- Exchange hashpartitioning(i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, 20), ENSURE_REQUIREMENTS, [plan_id=102544]
         :                             +- *(14) HashAggregate(keys=[i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, d_year#12400, d_moy#12402], functions=[sum(UnscaledValue(ss_sales_price#12384))], output=[i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, d_year#12400, d_moy#12402, sum_sales#12088])
         :                                +- ShuffleQueryStage 17
         :                                   +- ReusedExchange [i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, d_year#12400, d_moy#12402, sum#12566L], Exchange hashpartitioning(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, d_year#30, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=102257]
         +- *(26) Sort [i_category#12468 ASC NULLS FIRST, i_brand#12464 ASC NULLS FIRST, s_store_name#12534 ASC NULLS FIRST, s_company_name#12546 ASC NULLS FIRST, (rn#12562 - 1) ASC NULLS FIRST], false, 0
            +- ShuffleQueryStage 26
               +- Exchange hashpartitioning(i_category#12468, i_brand#12464, s_store_name#12534, s_company_name#12546, (rn#12562 - 1), 20), ENSURE_REQUIREMENTS, [plan_id=102817]
                  +- *(22) Project [i_category#12468, i_brand#12464, s_store_name#12534, s_company_name#12546, sum_sales#12088 AS sum_sales#12122, rn#12562]
                     +- Window [rank(d_year#12507, d_moy#12509) windowspecdefinition(i_category#12468, i_brand#12464, s_store_name#12534, s_company_name#12546, d_year#12507 ASC NULLS FIRST, d_moy#12509 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#12562], [i_category#12468, i_brand#12464, s_store_name#12534, s_company_name#12546], [d_year#12507 ASC NULLS FIRST, d_moy#12509 ASC NULLS FIRST]
                        +- *(21) Sort [i_category#12468 ASC NULLS FIRST, i_brand#12464 ASC NULLS FIRST, s_store_name#12534 ASC NULLS FIRST, s_company_name#12546 ASC NULLS FIRST, d_year#12507 ASC NULLS FIRST, d_moy#12509 ASC NULLS FIRST], false, 0
                           +- ShuffleQueryStage 23
                              +- ReusedExchange [i_category#12468, i_brand#12464, s_store_name#12534, s_company_name#12546, d_year#12507, d_moy#12509, sum_sales#12088], Exchange hashpartitioning(i_category#12361, i_brand#12357, s_store_name#12427, s_company_name#12439, 20), ENSURE_REQUIREMENTS, [plan_id=102544]

==== q48 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(6) HashAggregate(keys=[], functions=[sum(ss_quantity#424)], output=[sum(ss_quantity)#12705L])
   +- ShuffleQueryStage 4
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=103434]
         +- *(5) HashAggregate(keys=[], functions=[partial_sum(ss_quantity#424)], output=[sum#12708L])
            +- *(5) Project [ss_quantity#424]
               +- *(5) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :- *(5) Project [ss_sold_date_sk#414, ss_quantity#424]
                  :  +- *(5) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, ((((ca_state#3725 IN (CO,OH,TX) AND (ss_net_profit#436 >= 0.00)) AND (ss_net_profit#436 <= 2000.00)) OR ((ca_state#3725 IN (OR,MN,KY) AND (ss_net_profit#436 >= 150.00)) AND (ss_net_profit#436 <= 3000.00))) OR ((ca_state#3725 IN (VA,CA,MS) AND (ss_net_profit#436 >= 50.00)) AND (ss_net_profit#436 <= 25000.00))), false
                  :     :- *(5) Project [ss_sold_date_sk#414, ss_addr_sk#420, ss_quantity#424, ss_net_profit#436]
                  :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#418], [cd_demo_sk#3633], Inner, BuildRight, ((((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = 4 yr Degree         )) AND (ss_sales_price#427 >= 100.00)) AND (ss_sales_price#427 <= 150.00)) OR ((((cd_marital_status#3635 = D) AND (cd_education_status#3636 = 2 yr Degree         )) AND (ss_sales_price#427 >= 50.00)) AND (ss_sales_price#427 <= 100.00))) OR ((((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             )) AND (ss_sales_price#427 >= 150.00)) AND (ss_sales_price#427 <= 200.00))), false
                  :     :     :- *(5) Project [ss_sold_date_sk#414, ss_cdemo_sk#418, ss_addr_sk#420, ss_quantity#424, ss_sales_price#427, ss_net_profit#436]
                  :     :     :  +- *(5) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                  :     :     :     :- *(5) Filter (((((isnotnull(ss_store_sk#421) AND isnotnull(ss_cdemo_sk#418)) AND isnotnull(ss_addr_sk#420)) AND isnotnull(ss_sold_date_sk#414)) AND ((((ss_sales_price#427 >= 100.00) AND (ss_sales_price#427 <= 150.00)) OR ((ss_sales_price#427 >= 50.00) AND (ss_sales_price#427 <= 100.00))) OR ((ss_sales_price#427 >= 150.00) AND (ss_sales_price#427 <= 200.00)))) AND ((((ss_net_profit#436 >= 0.00) AND (ss_net_profit#436 <= 2000.00)) OR ((ss_net_profit#436 >= 150.00) AND (ss_net_profit#436 <= 3000.00))) OR ((ss_net_profit#436 >= 50.00) AND (ss_net_profit#436 <= 25000.00))))
                  :     :     :     :  +- *(5) ColumnarToRow
                  :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_cdemo_sk#418,ss_addr_sk#420,ss_store_sk#421,ss_quantity#424,ss_sales_price#427,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_store_sk#421), isnotnull(ss_cdemo_sk#418), isnotnull(ss_addr_sk#420), isnotnull(ss_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_sold_date_sk..., ReadSchema: struct<ss_sold_date_sk:int,ss_cdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sale...
                  :     :     :     +- BroadcastQueryStage 0
                  :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=103102]
                  :     :     :           +- *(1) Filter isnotnull(s_store_sk#52)
                  :     :     :              +- *(1) ColumnarToRow
                  :     :     :                 +- FileScan parquet default.store[s_store_sk#52] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>
                  :     :     +- BroadcastQueryStage 1
                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=103119]
                  :     :           +- *(2) Filter (isnotnull(cd_demo_sk#3633) AND ((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = 4 yr Degree         )) OR ((cd_marital_status#3635 = D) AND (cd_education_status#3636 = 2 yr Degree         ))) OR ((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             ))))
                  :     :              +- *(2) ColumnarToRow
                  :     :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [isnotnull(cd_demo_sk#3633), ((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = 4 yr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,4 yr D..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>
                  :     +- BroadcastQueryStage 2
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=103138]
                  :           +- *(3) Project [ca_address_sk#3717, ca_state#3725]
                  :              +- *(3) Filter (((isnotnull(ca_country#3727) AND (ca_country#3727 = United States)) AND isnotnull(ca_address_sk#3717)) AND ((ca_state#3725 IN (CO,OH,TX) OR ca_state#3725 IN (OR,MN,KY)) OR ca_state#3725 IN (VA,CA,MS)))
                  :                 +- *(3) ColumnarToRow
                  :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725,ca_country#3727] Batched: true, DataFilters: [isnotnull(ca_country#3727), (ca_country#3727 = United States), isnotnull(ca_address_sk#3717), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>
                  +- BroadcastQueryStage 3
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=103159]
                        +- *(4) Project [d_date_sk#24]
                           +- *(4) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                              +- *(4) ColumnarToRow
                                 +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>

==== q49 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#12717 ASC NULLS FIRST,return_rank#12715 ASC NULLS FIRST,currency_rank#12716 ASC NULLS FIRST], output=[channel#12717,item#12712,return_ratio#12713,return_rank#12715,currency_rank#12716])
   +- *(26) HashAggregate(keys=[channel#12717, item#12712, return_ratio#12713, return_rank#12715, currency_rank#12716], functions=[], output=[channel#12717, item#12712, return_ratio#12713, return_rank#12715, currency_rank#12716])
      +- ShuffleQueryStage 20
         +- Exchange hashpartitioning(channel#12717, item#12712, return_ratio#12713, return_rank#12715, currency_rank#12716, 20), ENSURE_REQUIREMENTS, [plan_id=107094]
            +- *(25) HashAggregate(keys=[channel#12717, item#12712, return_ratio#12713, return_rank#12715, currency_rank#12716], functions=[], output=[channel#12717, item#12712, return_ratio#12713, return_rank#12715, currency_rank#12716])
               +- Union
                  :- *(18) Project [web AS channel#12717, item#12712, return_ratio#12713, return_rank#12715, currency_rank#12716]
                  :  +- *(18) Filter ((return_rank#12715 <= 10) OR (currency_rank#12716 <= 10))
                  :     +- Window [rank(currency_ratio#12714) windowspecdefinition(currency_ratio#12714 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#12716], [currency_ratio#12714 ASC NULLS FIRST]
                  :        +- *(17) Sort [currency_ratio#12714 ASC NULLS FIRST], false, 0
                  :           +- Window [rank(return_ratio#12713) windowspecdefinition(return_ratio#12713 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#12715], [return_ratio#12713 ASC NULLS FIRST]
                  :              +- *(16) Sort [return_ratio#12713 ASC NULLS FIRST], false, 0
                  :                 +- ShuffleQueryStage 17
                  :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=106489]
                  :                       +- *(13) HashAggregate(keys=[ws_item_sk#166], functions=[sum(coalesce(wr_return_quantity#3341, 0)), sum(coalesce(ws_quantity#181, 0)), sum(coalesce(cast(wr_return_amt#3342 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#192 as decimal(12,2)), 0.00))], output=[item#12712, return_ratio#12713, currency_ratio#12714])
                  :                          +- ShuffleQueryStage 14
                  :                             +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=105978]
                  :                                +- *(11) HashAggregate(keys=[ws_item_sk#166], functions=[partial_sum(coalesce(wr_return_quantity#3341, 0)), partial_sum(coalesce(ws_quantity#181, 0)), partial_sum(coalesce(cast(wr_return_amt#3342 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#192 as decimal(12,2)), 0.00))], output=[ws_item_sk#166, sum#12895L, sum#12896L, sum#12897, isEmpty#12898, sum#12899, isEmpty#12900])
                  :                                   +- *(11) Project [ws_item_sk#166, ws_quantity#181, ws_net_paid#192, wr_return_quantity#3341, wr_return_amt#3342]
                  :                                      +- *(11) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                  :                                         :- *(11) Project [ws_sold_date_sk#163, ws_item_sk#166, ws_quantity#181, ws_net_paid#192, wr_return_quantity#3341, wr_return_amt#3342]
                  :                                         :  +- *(11) BroadcastHashJoin [ws_order_number#180, ws_item_sk#166], [wr_order_number#3340, wr_item_sk#3329], Inner, BuildRight, false
                  :                                         :     :- AQEShuffleRead local
                  :                                         :     :  +- ShuffleQueryStage 0
                  :                                         :     :     +- Exchange hashpartitioning(ws_order_number#180, ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=103945]
                  :                                         :     :        +- *(1) Project [ws_sold_date_sk#163, ws_item_sk#166, ws_order_number#180, ws_quantity#181, ws_net_paid#192]
                  :                                         :     :           +- *(1) Filter ((((((((isnotnull(ws_net_profit#196) AND isnotnull(ws_net_paid#192)) AND isnotnull(ws_quantity#181)) AND (ws_net_profit#196 > 1.00)) AND (ws_net_paid#192 > 0.00)) AND (ws_quantity#181 > 0)) AND isnotnull(ws_order_number#180)) AND isnotnull(ws_item_sk#166)) AND isnotnull(ws_sold_date_sk#163))
                  :                                         :     :              +- *(1) ColumnarToRow
                  :                                         :     :                 +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_order_number#180,ws_quantity#181,ws_net_paid#192,ws_net_profit#196] Batched: true, DataFilters: [isnotnull(ws_net_profit#196), isnotnull(ws_net_paid#192), isnotnull(ws_quantity#181), (ws_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_net_paid:decimal...
                  :                                         :     +- BroadcastQueryStage 11
                  :                                         :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=104890]
                  :                                         :           +- AQEShuffleRead local
                  :                                         :              +- ShuffleQueryStage 1
                  :                                         :                 +- Exchange hashpartitioning(wr_order_number#3340, wr_item_sk#3329, 20), ENSURE_REQUIREMENTS, [plan_id=103964]
                  :                                         :                    +- *(2) Filter (((isnotnull(wr_return_amt#3342) AND (wr_return_amt#3342 > 10000.00)) AND isnotnull(wr_order_number#3340)) AND isnotnull(wr_item_sk#3329))
                  :                                         :                       +- *(2) ColumnarToRow
                  :                                         :                          +- FileScan parquet default.web_returns[wr_item_sk#3329,wr_order_number#3340,wr_return_quantity#3341,wr_return_amt#3342] Batched: true, DataFilters: [isnotnull(wr_return_amt#3342), (wr_return_amt#3342 > 10000.00), isnotnull(wr_order_number#3340),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>
                  :                                         +- BroadcastQueryStage 2
                  :                                            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=103985]
                  :                                               +- *(3) Project [d_date_sk#24]
                  :                                                  +- *(3) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 2001)) AND (d_moy#32 = 12)) AND isnotnull(d_date_sk#24))
                  :                                                     +- *(3) ColumnarToRow
                  :                                                        +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 2001), (d_moy#32 = 12), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :- *(21) Project [catalog AS channel#12723, item#12718, return_ratio#12719, return_rank#12721, currency_rank#12722]
                  :  +- *(21) Filter ((return_rank#12721 <= 10) OR (currency_rank#12722 <= 10))
                  :     +- Window [rank(currency_ratio#12720) windowspecdefinition(currency_ratio#12720 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#12722], [currency_ratio#12720 ASC NULLS FIRST]
                  :        +- *(20) Sort [currency_ratio#12720 ASC NULLS FIRST], false, 0
                  :           +- Window [rank(return_ratio#12719) windowspecdefinition(return_ratio#12719 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#12721], [return_ratio#12719 ASC NULLS FIRST]
                  :              +- *(19) Sort [return_ratio#12719 ASC NULLS FIRST], false, 0
                  :                 +- ShuffleQueryStage 16
                  :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=106347]
                  :                       +- *(12) HashAggregate(keys=[cs_item_sk#212], functions=[sum(coalesce(cr_return_quantity#3308, 0)), sum(coalesce(cs_quantity#215, 0)), sum(coalesce(cast(cr_return_amount#3309 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#226 as decimal(12,2)), 0.00))], output=[item#12718, return_ratio#12719, currency_ratio#12720])
                  :                          +- ShuffleQueryStage 13
                  :                             +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=105772]
                  :                                +- *(10) HashAggregate(keys=[cs_item_sk#212], functions=[partial_sum(coalesce(cr_return_quantity#3308, 0)), partial_sum(coalesce(cs_quantity#215, 0)), partial_sum(coalesce(cast(cr_return_amount#3309 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#226 as decimal(12,2)), 0.00))], output=[cs_item_sk#212, sum#12907L, sum#12908L, sum#12909, isEmpty#12910, sum#12911, isEmpty#12912])
                  :                                   +- *(10) Project [cs_item_sk#212, cs_quantity#215, cs_net_paid#226, cr_return_quantity#3308, cr_return_amount#3309]
                  :                                      +- *(10) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#12742], Inner, BuildRight, false
                  :                                         :- *(10) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_quantity#215, cs_net_paid#226, cr_return_quantity#3308, cr_return_amount#3309]
                  :                                         :  +- *(10) BroadcastHashJoin [cs_order_number#214, cs_item_sk#212], [cr_order_number#3307, cr_item_sk#3293], Inner, BuildRight, false
                  :                                         :     :- AQEShuffleRead local
                  :                                         :     :  +- ShuffleQueryStage 3
                  :                                         :     :     +- Exchange hashpartitioning(cs_order_number#214, cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=104016]
                  :                                         :     :        +- *(4) Project [cs_sold_date_sk#197, cs_item_sk#212, cs_order_number#214, cs_quantity#215, cs_net_paid#226]
                  :                                         :     :           +- *(4) Filter ((((((((isnotnull(cs_net_profit#230) AND isnotnull(cs_net_paid#226)) AND isnotnull(cs_quantity#215)) AND (cs_net_profit#230 > 1.00)) AND (cs_net_paid#226 > 0.00)) AND (cs_quantity#215 > 0)) AND isnotnull(cs_order_number#214)) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_date_sk#197))
                  :                                         :     :              +- *(4) ColumnarToRow
                  :                                         :     :                 +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_item_sk#212,cs_order_number#214,cs_quantity#215,cs_net_paid#226,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_net_profit#230), isnotnull(cs_net_paid#226), isnotnull(cs_quantity#215), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_net_paid:decimal...
                  :                                         :     +- BroadcastQueryStage 12
                  :                                         :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=105377]
                  :                                         :           +- AQEShuffleRead local
                  :                                         :              +- ShuffleQueryStage 4
                  :                                         :                 +- Exchange hashpartitioning(cr_order_number#3307, cr_item_sk#3293, 20), ENSURE_REQUIREMENTS, [plan_id=104035]
                  :                                         :                    +- *(5) Filter (((isnotnull(cr_return_amount#3309) AND (cr_return_amount#3309 > 10000.00)) AND isnotnull(cr_order_number#3307)) AND isnotnull(cr_item_sk#3293))
                  :                                         :                       +- *(5) ColumnarToRow
                  :                                         :                          +- FileScan parquet default.catalog_returns[cr_item_sk#3293,cr_order_number#3307,cr_return_quantity#3308,cr_return_amount#3309] Batched: true, DataFilters: [isnotnull(cr_return_amount#3309), (cr_return_amount#3309 > 10000.00), isnotnull(cr_order_number#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>
                  :                                         +- BroadcastQueryStage 6
                  :                                            +- ReusedExchange [d_date_sk#12742], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=103985]
                  +- *(24) Project [store AS channel#12729, item#12724, return_ratio#12725, return_rank#12727, currency_rank#12728]
                     +- *(24) Filter ((return_rank#12727 <= 10) OR (currency_rank#12728 <= 10))
                        +- Window [rank(currency_ratio#12726) windowspecdefinition(currency_ratio#12726 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#12728], [currency_ratio#12726 ASC NULLS FIRST]
                           +- *(23) Sort [currency_ratio#12726 ASC NULLS FIRST], false, 0
                              +- Window [rank(return_ratio#12725) windowspecdefinition(return_ratio#12725 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#12727], [return_ratio#12725 ASC NULLS FIRST]
                                 +- *(22) Sort [return_ratio#12725 ASC NULLS FIRST], false, 0
                                    +- ShuffleQueryStage 19
                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=106938]
                                          +- *(15) HashAggregate(keys=[ss_item_sk#416], functions=[sum(coalesce(sr_return_quantity#14, 0)), sum(coalesce(ss_quantity#424, 0)), sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#434 as decimal(12,2)), 0.00))], output=[item#12724, return_ratio#12725, currency_ratio#12726])
                                             +- ShuffleQueryStage 18
                                                +- Exchange hashpartitioning(ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=106643]
                                                   +- *(14) HashAggregate(keys=[ss_item_sk#416], functions=[partial_sum(coalesce(sr_return_quantity#14, 0)), partial_sum(coalesce(ss_quantity#424, 0)), partial_sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#434 as decimal(12,2)), 0.00))], output=[ss_item_sk#416, sum#12919L, sum#12920L, sum#12921, isEmpty#12922, sum#12923, isEmpty#12924])
                                                      +- *(14) Project [ss_item_sk#416, ss_quantity#424, ss_net_paid#434, sr_return_quantity#14, sr_return_amt#15]
                                                         +- *(14) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#12770], Inner, BuildRight, false
                                                            :- *(14) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_quantity#424, ss_net_paid#434, sr_return_quantity#14, sr_return_amt#15]
                                                            :  +- *(14) BroadcastHashJoin [ss_ticket_number#423, ss_item_sk#416], [sr_ticket_number#13, sr_item_sk#6], Inner, BuildRight, false
                                                            :     :- AQEShuffleRead local
                                                            :     :  +- ShuffleQueryStage 7
                                                            :     :     +- Exchange hashpartitioning(ss_ticket_number#423, ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=104089]
                                                            :     :        +- *(7) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_ticket_number#423, ss_quantity#424, ss_net_paid#434]
                                                            :     :           +- *(7) Filter ((((((((isnotnull(ss_net_profit#436) AND isnotnull(ss_net_paid#434)) AND isnotnull(ss_quantity#424)) AND (ss_net_profit#436 > 1.00)) AND (ss_net_paid#434 > 0.00)) AND (ss_quantity#424 > 0)) AND isnotnull(ss_ticket_number#423)) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_sold_date_sk#414))
                                                            :     :              +- *(7) ColumnarToRow
                                                            :     :                 +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ticket_number#423,ss_quantity#424,ss_net_paid#434,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_net_profit#436), isnotnull(ss_net_paid#434), isnotnull(ss_quantity#424), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_net_paid:decima...
                                                            :     +- BroadcastQueryStage 15
                                                            :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=106184]
                                                            :           +- AQEShuffleRead local
                                                            :              +- ShuffleQueryStage 8
                                                            :                 +- Exchange hashpartitioning(sr_ticket_number#13, sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=104108]
                                                            :                    +- *(8) Filter (((isnotnull(sr_return_amt#15) AND (sr_return_amt#15 > 10000.00)) AND isnotnull(sr_ticket_number#13)) AND isnotnull(sr_item_sk#6))
                                                            :                       +- *(8) ColumnarToRow
                                                            :                          +- FileScan parquet default.store_returns[sr_item_sk#6,sr_ticket_number#13,sr_return_quantity#14,sr_return_amt#15] Batched: true, DataFilters: [isnotnull(sr_return_amt#15), (sr_return_amt#15 > 10000.00), isnotnull(sr_ticket_number#13), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>
                                                            +- BroadcastQueryStage 10
                                                               +- ReusedExchange [d_date_sk#12770], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=103985]

==== q50 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#57 ASC NULLS FIRST,s_company_id#68 ASC NULLS FIRST,s_street_number#70 ASC NULLS FIRST,s_street_name#71 ASC NULLS FIRST,s_street_type#72 ASC NULLS FIRST,s_suite_number#73 ASC NULLS FIRST,s_city#74 ASC NULLS FIRST,s_county#75 ASC NULLS FIRST,s_state#76 ASC NULLS FIRST,s_zip#77 ASC NULLS FIRST], output=[s_store_name#57,s_company_id#68,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,s_state#76,s_zip#77,30 days #13471L,31 - 60 days #13472L,61 - 90 days #13473L,91 - 120 days #13474L,>120 days #13475L])
   +- *(9) HashAggregate(keys=[s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77], functions=[sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 30) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 30) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 60)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 60) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 90)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 90) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 120)) THEN 1 ELSE 0 END), sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 120) THEN 1 ELSE 0 END)], output=[s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77, 30 days #13471L, 31 - 60 days #13472L, 61 - 90 days #13473L, 91 - 120 days #13474L, >120 days #13475L])
      +- ShuffleQueryStage 5
         +- Exchange hashpartitioning(s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77, 20), ENSURE_REQUIREMENTS, [plan_id=107754]
            +- *(8) HashAggregate(keys=[s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77], functions=[partial_sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 30) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 30) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 60)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 60) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 90)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 90) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#414) <= 120)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#414) > 120) THEN 1 ELSE 0 END)], output=[s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77, sum#13530L, sum#13531L, sum#13532L, sum#13533L, sum#13534L])
               +- *(8) Project [ss_sold_date_sk#414, sr_returned_date_sk#4, s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77]
                  +- *(8) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#13476], Inner, BuildRight, false
                     :- *(8) Project [ss_sold_date_sk#414, sr_returned_date_sk#4, s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77]
                     :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                     :     :- *(8) Project [ss_sold_date_sk#414, sr_returned_date_sk#4, s_store_name#57, s_company_id#68, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, s_state#76, s_zip#77]
                     :     :  +- *(8) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                     :     :     :- *(8) Project [ss_sold_date_sk#414, ss_store_sk#421, sr_returned_date_sk#4]
                     :     :     :  +- *(8) SortMergeJoin [ss_ticket_number#423, ss_item_sk#416, ss_customer_sk#417], [sr_ticket_number#13, sr_item_sk#6, sr_customer_sk#7], Inner
                     :     :     :     :- *(6) Sort [ss_ticket_number#423 ASC NULLS FIRST, ss_item_sk#416 ASC NULLS FIRST, ss_customer_sk#417 ASC NULLS FIRST], false, 0
                     :     :     :     :  +- ShuffleQueryStage 0
                     :     :     :     :     +- Exchange hashpartitioning(ss_ticket_number#423, ss_item_sk#416, ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=107341]
                     :     :     :     :        +- *(1) Filter ((((isnotnull(ss_ticket_number#423) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_customer_sk#417)) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_sold_date_sk#414))
                     :     :     :     :           +- *(1) ColumnarToRow
                     :     :     :     :              +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_ticket_number#423] Batched: true, DataFilters: [isnotnull(ss_ticket_number#423), isnotnull(ss_item_sk#416), isnotnull(ss_customer_sk#417), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_stor..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int>
                     :     :     :     +- *(7) Sort [sr_ticket_number#13 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST, sr_customer_sk#7 ASC NULLS FIRST], false, 0
                     :     :     :        +- ShuffleQueryStage 1
                     :     :     :           +- Exchange hashpartitioning(sr_ticket_number#13, sr_item_sk#6, sr_customer_sk#7, 20), ENSURE_REQUIREMENTS, [plan_id=107358]
                     :     :     :              +- *(2) Filter (((isnotnull(sr_ticket_number#13) AND isnotnull(sr_item_sk#6)) AND isnotnull(sr_customer_sk#7)) AND isnotnull(sr_returned_date_sk#4))
                     :     :     :                 +- *(2) ColumnarToRow
                     :     :     :                    +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_item_sk#6,sr_customer_sk#7,sr_ticket_number#13] Batched: true, DataFilters: [isnotnull(sr_ticket_number#13), isnotnull(sr_item_sk#6), isnotnull(sr_customer_sk#7), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk), IsNotNull(sr_customer_sk), IsNotNull(sr_retu..., ReadSchema: struct<sr_returned_date_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int>
                     :     :     +- BroadcastQueryStage 2
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=107377]
                     :     :           +- *(3) Filter isnotnull(s_store_sk#52)
                     :     :              +- *(3) ColumnarToRow
                     :     :                 +- FileScan parquet default.store[s_store_sk#52,s_store_name#57,s_company_id#68,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,s_state#76,s_zip#77] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_id:int,s_street_number:string,s_street_name:s...
                     :     +- BroadcastQueryStage 3
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=107394]
                     :           +- *(4) Filter isnotnull(d_date_sk#24)
                     :              +- *(4) ColumnarToRow
                     :                 +- FileScan parquet default.date_dim[d_date_sk#24] Batched: true, DataFilters: [isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int>
                     +- BroadcastQueryStage 4
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=107413]
                           +- *(5) Project [d_date_sk#13476]
                              +- *(5) Filter ((((isnotnull(d_year#13482) AND isnotnull(d_moy#13484)) AND (d_year#13482 = 2001)) AND (d_moy#13484 = 8)) AND isnotnull(d_date_sk#13476))
                                 +- *(5) ColumnarToRow
                                    +- FileScan parquet default.date_dim[d_date_sk#13476,d_year#13482,d_moy#13484] Batched: true, DataFilters: [isnotnull(d_year#13482), isnotnull(d_moy#13484), (d_year#13482 = 2001), (d_moy#13484 = 8), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,8), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>


==== q51 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_sk#13550 ASC NULLS FIRST,d_date#13551 ASC NULLS FIRST], output=[item_sk#13550,d_date#13551,web_sales#13552,store_sales#13553,web_cumulative#13554,store_cumulative#13555])
   +- *(15) Filter ((isnotnull(web_cumulative#13554) AND isnotnull(store_cumulative#13555)) AND (web_cumulative#13554 > store_cumulative#13555))
      +- Window [max(web_sales#13552) windowspecdefinition(item_sk#13550, d_date#13551 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#13554, max(store_sales#13553) windowspecdefinition(item_sk#13550, d_date#13551 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#13555], [item_sk#13550], [d_date#13551 ASC NULLS FIRST]
         +- *(14) Sort [item_sk#13550 ASC NULLS FIRST, d_date#13551 ASC NULLS FIRST], false, 0
            +- ShuffleQueryStage 9
               +- Exchange hashpartitioning(item_sk#13550, 20), ENSURE_REQUIREMENTS, [plan_id=108769]
                  +- *(13) Project [CASE WHEN isnotnull(item_sk#13556) THEN item_sk#13556 ELSE item_sk#13558 END AS item_sk#13550, CASE WHEN isnotnull(d_date#26) THEN d_date#26 ELSE d_date#13562 END AS d_date#13551, cume_sales#13557 AS web_sales#13552, cume_sales#13559 AS store_sales#13553]
                     +- *(13) SortMergeJoin [item_sk#13556, d_date#26], [item_sk#13558, d_date#13562], FullOuter
                        :- *(11) Sort [item_sk#13556 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST], false, 0
                        :  +- ShuffleQueryStage 6
                        :     +- Exchange hashpartitioning(item_sk#13556, d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=108506]
                        :        +- *(7) Project [item_sk#13556, d_date#26, cume_sales#13557]
                        :           +- Window [sum(_w0#13593) windowspecdefinition(ws_item_sk#166, d_date#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#13557], [ws_item_sk#166], [d_date#26 ASC NULLS FIRST]
                        :              +- *(6) Sort [ws_item_sk#166 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST], false, 0
                        :                 +- ShuffleQueryStage 5
                        :                    +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=108413]
                        :                       +- *(5) HashAggregate(keys=[ws_item_sk#166, d_date#26], functions=[sum(UnscaledValue(ws_sales_price#184))], output=[item_sk#13556, d_date#26, _w0#13593, ws_item_sk#166])
                        :                          +- ShuffleQueryStage 3
                        :                             +- Exchange hashpartitioning(ws_item_sk#166, d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=108258]
                        :                                +- *(3) HashAggregate(keys=[ws_item_sk#166, d_date#26], functions=[partial_sum(UnscaledValue(ws_sales_price#184))], output=[ws_item_sk#166, d_date#26, sum#13604L])
                        :                                   +- *(3) Project [ws_item_sk#166, ws_sales_price#184, d_date#26]
                        :                                      +- *(3) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                        :                                         :- *(3) Filter (isnotnull(ws_item_sk#166) AND isnotnull(ws_sold_date_sk#163))
                        :                                         :  +- *(3) ColumnarToRow
                        :                                         :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_sales_price#184] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_sales_price:decimal(7,2)>
                        :                                         +- BroadcastQueryStage 0
                        :                                            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=108028]
                        :                                               +- *(1) Project [d_date_sk#24, d_date#26]
                        :                                                  +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                        :                                                     +- *(1) ColumnarToRow
                        :                                                        +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                        +- *(12) Sort [item_sk#13558 ASC NULLS FIRST, d_date#13562 ASC NULLS FIRST], false, 0
                           +- ShuffleQueryStage 8
                              +- Exchange hashpartitioning(item_sk#13558, d_date#13562, 20), ENSURE_REQUIREMENTS, [plan_id=108700]
                                 +- *(10) Project [item_sk#13558, d_date#13562, cume_sales#13559]
                                    +- Window [sum(_w0#13594) windowspecdefinition(ss_item_sk#416, d_date#13562 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#13559], [ss_item_sk#416], [d_date#13562 ASC NULLS FIRST]
                                       +- *(9) Sort [ss_item_sk#416 ASC NULLS FIRST, d_date#13562 ASC NULLS FIRST], false, 0
                                          +- ShuffleQueryStage 7
                                             +- Exchange hashpartitioning(ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=108579]
                                                +- *(8) HashAggregate(keys=[ss_item_sk#416, d_date#13562], functions=[sum(UnscaledValue(ss_sales_price#427))], output=[item_sk#13558, d_date#13562, _w0#13594, ss_item_sk#416])
                                                   +- ShuffleQueryStage 4
                                                      +- Exchange hashpartitioning(ss_item_sk#416, d_date#13562, 20), ENSURE_REQUIREMENTS, [plan_id=108295]
                                                         +- *(4) HashAggregate(keys=[ss_item_sk#416, d_date#13562], functions=[partial_sum(UnscaledValue(ss_sales_price#427))], output=[ss_item_sk#416, d_date#13562, sum#13606L])
                                                            +- *(4) Project [ss_item_sk#416, ss_sales_price#427, d_date#13562]
                                                               +- *(4) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#13560], Inner, BuildRight, false
                                                                  :- *(4) Filter (isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414))
                                                                  :  +- *(4) ColumnarToRow
                                                                  :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_sales_price:decimal(7,2)>
                                                                  +- BroadcastQueryStage 2
                                                                     +- ReusedExchange [d_date_sk#13560, d_date#13562], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=108028]

==== q52 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[d_year#30 ASC NULLS FIRST,ext_price#13619 DESC NULLS LAST,brand_id#13617 ASC NULLS FIRST], output=[d_year#30,brand_id#13617,brand#13618,ext_price#13619])
   +- *(4) HashAggregate(keys=[d_year#30, i_brand#445, i_brand_id#444], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[d_year#30, brand_id#13617, brand#13618, ext_price#13619])
      +- ShuffleQueryStage 2
         +- Exchange hashpartitioning(d_year#30, i_brand#445, i_brand_id#444, 20), ENSURE_REQUIREMENTS, [plan_id=109060]
            +- *(3) HashAggregate(keys=[d_year#30, i_brand#445, i_brand_id#444], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[d_year#30, i_brand#445, i_brand_id#444, sum#13626L])
               +- *(3) Project [d_year#30, ss_ext_sales_price#429, i_brand_id#444, i_brand#445]
                  +- *(3) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :- *(3) Project [d_year#30, ss_item_sk#416, ss_ext_sales_price#429]
                     :  +- *(3) BroadcastHashJoin [d_date_sk#24], [ss_sold_date_sk#414], Inner, BuildLeft, false
                     :     :- BroadcastQueryStage 0
                     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=108918]
                     :     :     +- *(1) Project [d_date_sk#24, d_year#30]
                     :     :        +- *(1) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 11)) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
                     :     :           +- *(1) ColumnarToRow
                     :     :              +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 11), (d_year#30 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :     +- *(3) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416))
                     :        +- *(3) ColumnarToRow
                     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
                     +- BroadcastQueryStage 1
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=108939]
                           +- *(2) Project [i_item_sk#437, i_brand_id#444, i_brand#445]
                              +- *(2) Filter ((isnotnull(i_manager_id#457) AND (i_manager_id#457 = 1)) AND isnotnull(i_item_sk#437))
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_brand#445,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_manager_id#457), (i_manager_id#457 = 1), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

==== q53 ==== 
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[avg_quarterly_sales#13631 ASC NULLS FIRST,sum_sales#13630 ASC NULLS FIRST,i_manufact_id#450 ASC NULLS FIRST], output=[i_manufact_id#450,sum_sales#13630,avg_quarterly_sales#13631])
   +- *(7) Project [i_manufact_id#450, sum_sales#13630, avg_quarterly_sales#13631]
      +- *(7) Filter CASE WHEN (avg_quarterly_sales#13631 > 0.000000) THEN (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#13630 as decimal(22,6))) - promote_precision(cast(avg_quarterly_sales#13631 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_quarterly_sales#13631 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000) ELSE false END
         +- Window [avg(_w0#13635) windowspecdefinition(i_manufact_id#450, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_quarterly_sales#13631], [i_manufact_id#450]
            +- *(6) Sort [i_manufact_id#450 ASC NULLS FIRST], false, 0
               +- ShuffleQueryStage 4
                  +- Exchange hashpartitioning(i_manufact_id#450, 20), ENSURE_REQUIREMENTS, [plan_id=109606]
                     +- *(5) HashAggregate(keys=[i_manufact_id#450, d_qoy#34], functions=[sum(UnscaledValue(ss_sales_price#427))], output=[i_manufact_id#450, sum_sales#13630, _w0#13635])
                        +- ShuffleQueryStage 3
                           +- Exchange hashpartitioning(i_manufact_id#450, d_qoy#34, 20), ENSURE_REQUIREMENTS, [plan_id=109548]
                              +- *(4) HashAggregate(keys=[i_manufact_id#450, d_qoy#34], functions=[partial_sum(UnscaledValue(ss_sales_price#427))], output=[i_manufact_id#450, d_qoy#34, sum#13640L])
                                 +- *(4) Project [i_manufact_id#450, ss_sales_price#427, d_qoy#34]
                                    +- *(4) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :- *(4) Project [i_manufact_id#450, ss_store_sk#421, ss_sales_price#427, d_qoy#34]
                                       :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                       :     :- *(4) Project [i_manufact_id#450, ss_sold_date_sk#414, ss_store_sk#421, ss_sales_price#427]
                                       :     :  +- *(4) BroadcastHashJoin [i_item_sk#437], [ss_item_sk#416], Inner, BuildLeft, false
                                       :     :     :- BroadcastQueryStage 0
                                       :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=109250]
                                       :     :     :     +- *(1) Project [i_item_sk#437, i_manufact_id#450]
                                       :     :     :        +- *(1) Filter ((((i_category#449 IN (Books                                             ,Children                                          ,Electronics                                       ) AND i_class#447 IN (personal                                          ,portable                                          ,reference                                         ,self-help                                         )) AND i_brand#445 IN (scholaramalgamalg #14                             ,scholaramalgamalg #7                              ,exportiunivamalg #9                               ,scholaramalgamalg #9                              )) OR ((i_category#449 IN (Women                                             ,Music                                             ,Men                                               ) AND i_class#447 IN (accessories                                       ,classical                                         ,fragrances                                        ,pants                                             )) AND i_brand#445 IN (amalgimporto #1                                   ,edu packscholar #1                                ,exportiimporto #1                                 ,importoamalg #1                                   ))) AND isnotnull(i_item_sk#437))
                                       :     :     :           +- *(1) ColumnarToRow
                                       :     :     :              +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_class#447,i_category#449,i_manufact_id#450] Batched: true, DataFilters: [(((i_category#449 IN (Books                                             ,Children               ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [Or(And(And(In(i_category, [Books                                             ,Children          ..., ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_manufact_id:int>
                                       :     :     +- *(4) Filter ((isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
                                       :     :        +- *(4) ColumnarToRow
                                       :     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                                       :     +- BroadcastQueryStage 1
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=109271]
                                       :           +- *(2) Project [d_date_sk#24, d_qoy#34]
                                       :              +- *(2) Filter (d_month_seq#27 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211 AND isnotnull(d_date_sk#24))
                                       :                 +- *(2) ColumnarToRow
                                       :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27,d_qoy#34] Batched: true, DataFilters: [d_month_seq#27 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_month_seq, [1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211]), IsNotNull(d_date..., ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_qoy:int>
                                       +- BroadcastQueryStage 2
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=109290]
                                             +- *(3) Filter isnotnull(s_store_sk#52)
                                                +- *(3) ColumnarToRow
                                                   +- FileScan parquet default.store[s_store_sk#52] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>


==== q54 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(13) HashAggregate(keys=[segment#13657], functions=[count(1)], output=[segment#13657, num_customers#13646L, segment_base#13647])
   +- ShuffleQueryStage 9
      +- Exchange hashpartitioning(segment#13657, 20), ENSURE_REQUIREMENTS, [plan_id=111259]
         +- *(12) HashAggregate(keys=[segment#13657], functions=[partial_count(1)], output=[segment#13657, count#13751L])
            +- *(12) HashAggregate(keys=[c_customer_sk#81], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[segment#13657])
               +- *(12) HashAggregate(keys=[c_customer_sk#81], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[c_customer_sk#81, sum#13753L])
                  +- *(12) Project [c_customer_sk#81, ss_ext_sales_price#429]
                     +- *(12) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#13659], Inner, BuildRight, false
                        :- *(12) Project [c_customer_sk#81, ss_sold_date_sk#414, ss_ext_sales_price#429]
                        :  +- *(12) BroadcastHashJoin [ca_county#3724, ca_state#3725], [s_county#75, s_state#76], Inner, BuildRight, false
                        :     :- *(12) Project [c_customer_sk#81, ss_sold_date_sk#414, ss_ext_sales_price#429, ca_county#3724, ca_state#3725]
                        :     :  +- *(12) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
                        :     :     :- *(12) Project [c_customer_sk#81, c_current_addr_sk#85, ss_sold_date_sk#414, ss_ext_sales_price#429]
                        :     :     :  +- *(12) BroadcastHashJoin [c_customer_sk#81], [ss_customer_sk#417], Inner, BuildLeft, false
                        :     :     :     :- BroadcastQueryStage 8
                        :     :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=111089]
                        :     :     :     :     +- *(11) HashAggregate(keys=[c_customer_sk#81, c_current_addr_sk#85], functions=[], output=[c_customer_sk#81, c_current_addr_sk#85])
                        :     :     :     :        +- ShuffleQueryStage 7
                        :     :     :     :           +- Exchange hashpartitioning(c_customer_sk#81, c_current_addr_sk#85, 20), ENSURE_REQUIREMENTS, [plan_id=110935]
                        :     :     :     :              +- *(10) HashAggregate(keys=[c_customer_sk#81, c_current_addr_sk#85], functions=[], output=[c_customer_sk#81, c_current_addr_sk#85])
                        :     :     :     :                 +- *(10) Project [c_customer_sk#81, c_current_addr_sk#85]
                        :     :     :     :                    +- *(10) BroadcastHashJoin [customer_sk#13649], [c_customer_sk#81], Inner, BuildRight, false
                        :     :     :     :                       :- *(10) Project [customer_sk#13649]
                        :     :     :     :                       :  +- *(10) BroadcastHashJoin [sold_date_sk#13648], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :     :                       :     :- *(10) Project [sold_date_sk#13648, customer_sk#13649]
                        :     :     :     :                       :     :  +- *(10) BroadcastHashJoin [item_sk#13650], [i_item_sk#437], Inner, BuildRight, false
                        :     :     :     :                       :     :     :- Union
                        :     :     :     :                       :     :     :  :- *(8) Project [cs_sold_date_sk#197 AS sold_date_sk#13648, cs_bill_customer_sk#200 AS customer_sk#13649, cs_item_sk#212 AS item_sk#13650]
                        :     :     :     :                       :     :     :  :  +- *(8) Filter ((isnotnull(cs_item_sk#212) AND isnotnull(cs_sold_date_sk#197)) AND isnotnull(cs_bill_customer_sk#200))
                        :     :     :     :                       :     :     :  :     +- *(8) ColumnarToRow
                        :     :     :     :                       :     :     :  :        +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197), isnotnull(cs_bill_customer_sk#200)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>
                        :     :     :     :                       :     :     :  +- *(9) Project [ws_sold_date_sk#163 AS sold_date_sk#13651, ws_bill_customer_sk#167 AS customer_sk#13652, ws_item_sk#166 AS item_sk#13653]
                        :     :     :     :                       :     :     :     +- *(9) Filter ((isnotnull(ws_item_sk#166) AND isnotnull(ws_sold_date_sk#163)) AND isnotnull(ws_bill_customer_sk#167))
                        :     :     :     :                       :     :     :        +- *(9) ColumnarToRow
                        :     :     :     :                       :     :     :           +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_customer_sk#167] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_customer_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int>
                        :     :     :     :                       :     :     +- BroadcastQueryStage 0
                        :     :     :     :                       :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=110018]
                        :     :     :     :                       :     :           +- *(1) Project [i_item_sk#437]
                        :     :     :     :                       :     :              +- *(1) Filter ((((isnotnull(i_category#449) AND isnotnull(i_class#447)) AND (i_category#449 = Women                                             )) AND (i_class#447 = maternity                                         )) AND isnotnull(i_item_sk#437))
                        :     :     :     :                       :     :                 +- *(1) ColumnarToRow
                        :     :     :     :                       :     :                    +- FileScan parquet default.item[i_item_sk#437,i_class#447,i_category#449] Batched: true, DataFilters: [isnotnull(i_category#449), isnotnull(i_class#447), (i_category#449 = Women                      ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women                             ..., ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>
                        :     :     :     :                       :     +- BroadcastQueryStage 1
                        :     :     :     :                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=110039]
                        :     :     :     :                       :           +- *(2) Project [d_date_sk#24]
                        :     :     :     :                       :              +- *(2) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 12)) AND (d_year#30 = 1998)) AND isnotnull(d_date_sk#24))
                        :     :     :     :                       :                 +- *(2) ColumnarToRow
                        :     :     :     :                       :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 12), (d_year#30 = 1998), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                        :     :     :     :                       +- BroadcastQueryStage 2
                        :     :     :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=110058]
                        :     :     :     :                             +- *(3) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
                        :     :     :     :                                +- *(3) ColumnarToRow
                        :     :     :     :                                   +- FileScan parquet default.customer[c_customer_sk#81,c_current_addr_sk#85] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
                        :     :     :     +- ShuffleQueryStage 3
                        :     :     :        +- Exchange hashpartitioning(ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=110080]
                        :     :     :           +- *(4) Filter (isnotnull(ss_customer_sk#417) AND isnotnull(ss_sold_date_sk#414))
                        :     :     :              +- *(4) ColumnarToRow
                        :     :     :                 +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_customer_sk#417), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>
                        :     :     +- BroadcastQueryStage 4
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=110099]
                        :     :           +- *(5) Filter ((isnotnull(ca_address_sk#3717) AND isnotnull(ca_county#3724)) AND isnotnull(ca_state#3725))
                        :     :              +- *(5) ColumnarToRow
                        :     :                 +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_county#3724,ca_state#3725] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717), isnotnull(ca_county#3724), isnotnull(ca_state#3725)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)], ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>
                        :     +- BroadcastQueryStage 5
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [plan_id=110116]
                        :           +- *(6) Filter (isnotnull(s_county#75) AND isnotnull(s_state#76))
                        :              +- *(6) ColumnarToRow
                        :                 +- FileScan parquet default.store[s_county#75,s_state#76] Batched: true, DataFilters: [isnotnull(s_county#75), isnotnull(s_state#76)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)], ReadSchema: struct<s_county:string,s_state:string>
                        +- BroadcastQueryStage 6
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=110135]
                              +- *(7) Project [d_date_sk#13659]
                                 +- *(7) Filter (((isnotnull(d_month_seq#13662) AND (d_month_seq#13662 >= Subquery subquery#13655, [id=#109812])) AND (d_month_seq#13662 <= Subquery subquery#13656, [id=#109825])) AND isnotnull(d_date_sk#13659))
                                    :  :- Subquery subquery#13655, [id=#109812]
                                    :  :  +- AdaptiveSparkPlan isFinalPlan=true
                                          +- == Final Plan ==
                                             *(2) HashAggregate(keys=[(d_month_seq + 1)#13687], functions=[], output=[(d_month_seq + 1)#13687])
                                             +- ShuffleQueryStage 0
                                                +- Exchange hashpartitioning((d_month_seq + 1)#13687, 20), ENSURE_REQUIREMENTS, [plan_id=110179]
                                                   +- *(1) HashAggregate(keys=[(d_month_seq + 1)#13687], functions=[], output=[(d_month_seq + 1)#13687])
                                                      +- *(1) Project [(d_month_seq#13693 + 1) AS (d_month_seq + 1)#13687]
                                                         +- *(1) Filter (((isnotnull(d_year#13696) AND isnotnull(d_moy#13698)) AND (d_year#13696 = 1998)) AND (d_moy#13698 = 12))
                                                            +- *(1) ColumnarToRow
                                                               +- FileScan parquet default.date_dim[d_month_seq#13693,d_year#13696,d_moy#13698] Batched: true, DataFilters: [isnotnull(d_year#13696), isnotnull(d_moy#13698), (d_year#13696 = 1998), (d_moy#13698 = 12)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                                          +- == Initial Plan ==
                                             HashAggregate(keys=[(d_month_seq + 1)#13687], functions=[], output=[(d_month_seq + 1)#13687])
                                             +- Exchange hashpartitioning((d_month_seq + 1)#13687, 20), ENSURE_REQUIREMENTS, [plan_id=109810]
                                                +- HashAggregate(keys=[(d_month_seq + 1)#13687], functions=[], output=[(d_month_seq + 1)#13687])
                                                   +- Project [(d_month_seq#13693 + 1) AS (d_month_seq + 1)#13687]
                                                      +- Filter (((isnotnull(d_year#13696) AND isnotnull(d_moy#13698)) AND (d_year#13696 = 1998)) AND (d_moy#13698 = 12))
                                                         +- FileScan parquet default.date_dim[d_month_seq#13693,d_year#13696,d_moy#13698] Batched: true, DataFilters: [isnotnull(d_year#13696), isnotnull(d_moy#13698), (d_year#13696 = 1998), (d_moy#13698 = 12)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                                    :  +- Subquery subquery#13656, [id=#109825]
                                    :     +- AdaptiveSparkPlan isFinalPlan=true
                                          +- == Final Plan ==
                                             *(2) HashAggregate(keys=[(d_month_seq + 3)#13688], functions=[], output=[(d_month_seq + 3)#13688])
                                             +- ShuffleQueryStage 0
                                                +- Exchange hashpartitioning((d_month_seq + 3)#13688, 20), ENSURE_REQUIREMENTS, [plan_id=110181]
                                                   +- *(1) HashAggregate(keys=[(d_month_seq + 3)#13688], functions=[], output=[(d_month_seq + 3)#13688])
                                                      +- *(1) Project [(d_month_seq#13721 + 3) AS (d_month_seq + 3)#13688]
                                                         +- *(1) Filter (((isnotnull(d_year#13724) AND isnotnull(d_moy#13726)) AND (d_year#13724 = 1998)) AND (d_moy#13726 = 12))
                                                            +- *(1) ColumnarToRow
                                                               +- FileScan parquet default.date_dim[d_month_seq#13721,d_year#13724,d_moy#13726] Batched: true, DataFilters: [isnotnull(d_year#13724), isnotnull(d_moy#13726), (d_year#13724 = 1998), (d_moy#13726 = 12)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                                          +- == Initial Plan ==
                                             HashAggregate(keys=[(d_month_seq + 3)#13688], functions=[], output=[(d_month_seq + 3)#13688])
                                             +- Exchange hashpartitioning((d_month_seq + 3)#13688, 20), ENSURE_REQUIREMENTS, [plan_id=109823]
                                                +- HashAggregate(keys=[(d_month_seq + 3)#13688], functions=[], output=[(d_month_seq + 3)#13688])
                                                   +- Project [(d_month_seq#13721 + 3) AS (d_month_seq + 3)#13688]
                                                      +- Filter (((isnotnull(d_year#13724) AND isnotnull(d_moy#13726)) AND (d_year#13724 = 1998)) AND (d_moy#13726 = 12))
                                                         +- FileScan parquet default.date_dim[d_month_seq#13721,d_year#13724,d_moy#13726] Batched: true, DataFilters: [isnotnull(d_year#13724), isnotnull(d_moy#13726), (d_year#13724 = 1998), (d_moy#13726 = 12)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>
                                    +- *(7) ColumnarToRow
                                       +- FileScan parquet default.date_dim[d_date_sk#13659,d_month_seq#13662] Batched: true, DataFilters: [isnotnull(d_month_seq#13662), isnotnull(d_date_sk#13659)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>

==== q55 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[ext_price#13765 DESC NULLS LAST,brand_id#13763 ASC NULLS FIRST], output=[brand_id#13763,brand#13764,ext_price#13765])
   +- *(4) HashAggregate(keys=[i_brand#445, i_brand_id#444], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[brand_id#13763, brand#13764, ext_price#13765])
      +- ShuffleQueryStage 2
         +- Exchange hashpartitioning(i_brand#445, i_brand_id#444, 20), ENSURE_REQUIREMENTS, [plan_id=111544]
            +- *(3) HashAggregate(keys=[i_brand#445, i_brand_id#444], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_brand#445, i_brand_id#444, sum#13771L])
               +- *(3) Project [ss_ext_sales_price#429, i_brand_id#444, i_brand#445]
                  +- *(3) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :- *(3) Project [ss_item_sk#416, ss_ext_sales_price#429]
                     :  +- *(3) BroadcastHashJoin [d_date_sk#24], [ss_sold_date_sk#414], Inner, BuildLeft, false
                     :     :- BroadcastQueryStage 0
                     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=111402]
                     :     :     +- *(1) Project [d_date_sk#24]
                     :     :        +- *(1) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 11)) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#24))
                     :     :           +- *(1) ColumnarToRow
                     :     :              +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 11), (d_year#30 = 1999), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                     :     +- *(3) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416))
                     :        +- *(3) ColumnarToRow
                     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
                     +- BroadcastQueryStage 1
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=111423]
                           +- *(2) Project [i_item_sk#437, i_brand_id#444, i_brand#445]
                              +- *(2) Filter ((isnotnull(i_manager_id#457) AND (i_manager_id#457 = 28)) AND isnotnull(i_item_sk#437))
                                 +- *(2) ColumnarToRow
                                    +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_brand#445,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_manager_id#457), (i_manager_id#457 = 28), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,28), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

==== q56 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[total_sales#13775 ASC NULLS FIRST], output=[i_item_id#438,total_sales#13775])
   +- *(23) HashAggregate(keys=[i_item_id#438], functions=[sum(total_sales#13776)], output=[i_item_id#438, total_sales#13775])
      +- ShuffleQueryStage 33
         +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=114058]
            +- *(22) HashAggregate(keys=[i_item_id#438], functions=[partial_sum(total_sales#13776)], output=[i_item_id#438, sum#13988, isEmpty#13989])
               +- Union
                  :- *(19) HashAggregate(keys=[i_item_id#438], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_id#438, total_sales#13776])
                  :  +- ShuffleQueryStage 30
                  :     +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=113846]
                  :        +- *(16) HashAggregate(keys=[i_item_id#438], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_id#438, sum#13991L])
                  :           +- *(16) Project [ss_ext_sales_price#429, i_item_id#438]
                  :              +- *(16) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :                 :- *(16) Project [ss_item_sk#416, ss_ext_sales_price#429]
                  :                 :  +- *(16) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, false
                  :                 :     :- *(16) Project [ss_item_sk#416, ss_addr_sk#420, ss_ext_sales_price#429]
                  :                 :     :  +- *(16) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :                 :     :     :- *(16) Filter ((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_addr_sk#420)) AND isnotnull(ss_item_sk#416))
                  :                 :     :     :  +- *(16) ColumnarToRow
                  :                 :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_addr_sk#420,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_addr_sk#420), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>
                  :                 :     :     +- BroadcastQueryStage 0
                  :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=112083]
                  :                 :     :           +- *(1) Project [d_date_sk#24]
                  :                 :     :              +- *(1) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 2001)) AND (d_moy#32 = 2)) AND isnotnull(d_date_sk#24))
                  :                 :     :                 +- *(1) ColumnarToRow
                  :                 :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 2001), (d_moy#32 = 2), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :                 :     +- BroadcastQueryStage 1
                  :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=112104]
                  :                 :           +- *(2) Project [ca_address_sk#3717]
                  :                 :              +- *(2) Filter ((isnotnull(ca_gmt_offset#3728) AND (ca_gmt_offset#3728 = -5.00)) AND isnotnull(ca_address_sk#3717))
                  :                 :                 +- *(2) ColumnarToRow
                  :                 :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_gmt_offset#3728] Batched: true, DataFilters: [isnotnull(ca_gmt_offset#3728), (ca_gmt_offset#3728 = -5.00), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>
                  :                 +- BroadcastQueryStage 25
                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=113571]
                  :                       +- *(13) BroadcastHashJoin [i_item_id#438], [i_item_id#13909], LeftSemi, BuildRight, false
                  :                          :- AQEShuffleRead local
                  :                          :  +- ShuffleQueryStage 2
                  :                          :     +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=112123]
                  :                          :        +- *(3) Filter isnotnull(i_item_sk#437)
                  :                          :           +- *(3) ColumnarToRow
                  :                          :              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                  :                          +- BroadcastQueryStage 20
                  :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=113295]
                  :                                +- AQEShuffleRead local
                  :                                   +- ShuffleQueryStage 3
                  :                                      +- Exchange hashpartitioning(i_item_id#13909, 20), ENSURE_REQUIREMENTS, [plan_id=112142]
                  :                                         +- *(4) Project [i_item_id#13909]
                  :                                            +- *(4) Filter i_color#13925 IN (slate               ,blanched            ,burnished           )
                  :                                               +- *(4) ColumnarToRow
                  :                                                  +- FileScan parquet default.item[i_item_id#13909,i_color#13925] Batched: true, DataFilters: [i_color#13925 IN (slate               ,blanched            ,burnished           )], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [In(i_color, [blanched            ,burnished           ,slate               ])], ReadSchema: struct<i_item_id:string,i_color:string>
                  :- *(20) HashAggregate(keys=[i_item_id#13824], functions=[sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_id#13824, total_sales#13778])
                  :  +- ShuffleQueryStage 31
                  :     +- Exchange hashpartitioning(i_item_id#13824, 20), ENSURE_REQUIREMENTS, [plan_id=113897]
                  :        +- *(17) HashAggregate(keys=[i_item_id#13824], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_id#13824, sum#13993L])
                  :           +- *(17) Project [cs_ext_sales_price#220, i_item_id#13824]
                  :              +- *(17) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#13823], Inner, BuildRight, false
                  :                 :- *(17) Project [cs_item_sk#212, cs_ext_sales_price#220]
                  :                 :  +- *(17) BroadcastHashJoin [cs_bill_addr_sk#203], [ca_address_sk#13810], Inner, BuildRight, false
                  :                 :     :- *(17) Project [cs_bill_addr_sk#203, cs_item_sk#212, cs_ext_sales_price#220]
                  :                 :     :  +- *(17) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#13782], Inner, BuildRight, false
                  :                 :     :     :- *(17) Filter ((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_bill_addr_sk#203)) AND isnotnull(cs_item_sk#212))
                  :                 :     :     :  +- *(17) ColumnarToRow
                  :                 :     :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_addr_sk#203,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_bill_addr_sk#203), isnotnull(cs_item_sk#212)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
                  :                 :     :     +- BroadcastQueryStage 5
                  :                 :     :        +- ReusedExchange [d_date_sk#13782], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=112083]
                  :                 :     +- BroadcastQueryStage 7
                  :                 :        +- ReusedExchange [ca_address_sk#13810], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=112104]
                  :                 +- BroadcastQueryStage 27
                  :                    +- ReusedExchange [i_item_sk#13823, i_item_id#13824], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=113571]
                  +- *(21) HashAggregate(keys=[i_item_id#13887], functions=[sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_id#13887, total_sales#13780])
                     +- ShuffleQueryStage 32
                        +- Exchange hashpartitioning(i_item_id#13887, 20), ENSURE_REQUIREMENTS, [plan_id=113948]
                           +- *(18) HashAggregate(keys=[i_item_id#13887], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_id#13887, sum#13995L])
                              +- *(18) Project [ws_ext_sales_price#186, i_item_id#13887]
                                 +- *(18) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#13886], Inner, BuildRight, false
                                    :- *(18) Project [ws_item_sk#166, ws_ext_sales_price#186]
                                    :  +- *(18) BroadcastHashJoin [ws_bill_addr_sk#170], [ca_address_sk#13873], Inner, BuildRight, false
                                    :     :- *(18) Project [ws_item_sk#166, ws_bill_addr_sk#170, ws_ext_sales_price#186]
                                    :     :  +- *(18) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#13845], Inner, BuildRight, false
                                    :     :     :- *(18) Filter ((isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_bill_addr_sk#170)) AND isnotnull(ws_item_sk#166))
                                    :     :     :  +- *(18) ColumnarToRow
                                    :     :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_addr_sk#170,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_addr_sk#170), isnotnull(ws_item_sk#166)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>
                                    :     :     +- BroadcastQueryStage 13
                                    :     :        +- ReusedExchange [d_date_sk#13845], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=112083]
                                    :     +- BroadcastQueryStage 15
                                    :        +- ReusedExchange [ca_address_sk#13873], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=112104]
                                    +- BroadcastQueryStage 29
                                       +- ReusedExchange [i_item_sk#13886, i_item_id#13887], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=113571]

==== q57 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[CheckOverflow((promote_precision(cast(sum_sales#14040 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#14041 as decimal(22,6)))), DecimalType(22,6)) ASC NULLS FIRST,cc_name#7114 ASC NULLS FIRST], output=[i_category#449,i_brand#445,cc_name#7114,d_year#30,d_moy#32,avg_monthly_sales#14041,sum_sales#14040,psum#14043,nsum#14044])
   +- *(31) Project [i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, avg_monthly_sales#14041, sum_sales#14040, sum_sales#14064 AS psum#14043, sum_sales#14072 AS nsum#14044]
      +- *(31) BroadcastHashJoin [i_category#449, i_brand#445, cc_name#7114, rn#14042], [i_category#14456, i_brand#14452, cc_name#14534, (rn#14563 - 1)], Inner, BuildRight, false
         :- *(31) Project [i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, sum_sales#14040, avg_monthly_sales#14041, rn#14042, sum_sales#14064]
         :  +- *(31) BroadcastHashJoin [i_category#449, i_brand#445, cc_name#7114, rn#14042], [i_category#14336, i_brand#14332, cc_name#14414, (rn#14443 + 1)], Inner, BuildLeft, false
         :     :- BroadcastQueryStage 29
         :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[7, int, false]),false), [plan_id=116339]
         :     :     +- *(27) Project [i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, sum_sales#14040, avg_monthly_sales#14041, rn#14042]
         :     :        +- *(27) Filter ((isnotnull(avg_monthly_sales#14041) AND (avg_monthly_sales#14041 > 0.000000)) AND CASE WHEN (avg_monthly_sales#14041 > 0.000000) THEN (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#14040 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#14041 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#14041 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000) END)
         :     :           +- Window [avg(_w0#14058) windowspecdefinition(i_category#449, i_brand#445, cc_name#7114, d_year#30, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#14041], [i_category#449, i_brand#445, cc_name#7114, d_year#30]
         :     :              +- *(26) Filter (isnotnull(d_year#30) AND (d_year#30 = 1999))
         :     :                 +- Window [rank(d_year#30, d_moy#32) windowspecdefinition(i_category#449, i_brand#445, cc_name#7114, d_year#30 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#14042], [i_category#449, i_brand#445, cc_name#7114], [d_year#30 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST]
         :     :                    +- *(25) Sort [i_category#449 ASC NULLS FIRST, i_brand#445 ASC NULLS FIRST, cc_name#7114 ASC NULLS FIRST, d_year#30 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST], false, 0
         :     :                       +- ShuffleQueryStage 25
         :     :                          +- Exchange hashpartitioning(i_category#449, i_brand#445, cc_name#7114, 20), ENSURE_REQUIREMENTS, [plan_id=116176]
         :     :                             +- *(22) HashAggregate(keys=[i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32], functions=[sum(UnscaledValue(cs_sales_price#218))], output=[i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, sum_sales#14040, _w0#14058])
         :     :                                +- ShuffleQueryStage 20
         :     :                                   +- Exchange hashpartitioning(i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=115817]
         :     :                                      +- *(15) HashAggregate(keys=[i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32], functions=[partial_sum(UnscaledValue(cs_sales_price#218))], output=[i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, sum#14565L])
         :     :                                         +- *(15) Project [i_brand#445, i_category#449, cs_sales_price#218, d_year#30, d_moy#32, cc_name#7114]
         :     :                                            +- *(15) BroadcastHashJoin [cs_call_center_sk#208], [cc_call_center_sk#7108], Inner, BuildRight, false
         :     :                                               :- *(15) Project [i_brand#445, i_category#449, cs_call_center_sk#208, cs_sales_price#218, d_year#30, d_moy#32]
         :     :                                               :  +- *(15) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
         :     :                                               :     :- *(15) Project [i_brand#445, i_category#449, cs_sold_date_sk#197, cs_call_center_sk#208, cs_sales_price#218]
         :     :                                               :     :  +- *(15) SortMergeJoin [i_item_sk#437], [cs_item_sk#212], Inner
         :     :                                               :     :     :- *(13) Sort [i_item_sk#437 ASC NULLS FIRST], false, 0
         :     :                                               :     :     :  +- ShuffleQueryStage 0
         :     :                                               :     :     :     +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=114523]
         :     :                                               :     :     :        +- *(1) Filter ((isnotnull(i_item_sk#437) AND isnotnull(i_category#449)) AND isnotnull(i_brand#445))
         :     :                                               :     :     :           +- *(1) ColumnarToRow
         :     :                                               :     :     :              +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_category#449] Batched: true, DataFilters: [isnotnull(i_item_sk#437), isnotnull(i_category#449), isnotnull(i_brand#445)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>
         :     :                                               :     :     +- *(14) Sort [cs_item_sk#212 ASC NULLS FIRST], false, 0
         :     :                                               :     :        +- ShuffleQueryStage 1
         :     :                                               :     :           +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=114540]
         :     :                                               :     :              +- *(2) Filter ((isnotnull(cs_item_sk#212) AND isnotnull(cs_sold_date_sk#197)) AND isnotnull(cs_call_center_sk#208))
         :     :                                               :     :                 +- *(2) ColumnarToRow
         :     :                                               :     :                    +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_call_center_sk#208,cs_item_sk#212,cs_sales_price#218] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197), isnotnull(cs_call_center_sk#208)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>
         :     :                                               :     +- BroadcastQueryStage 2
         :     :                                               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=114559]
         :     :                                               :           +- *(3) Filter ((((d_year#30 = 1999) OR ((d_year#30 = 1998) AND (d_moy#32 = 12))) OR ((d_year#30 = 2000) AND (d_moy#32 = 1))) AND isnotnull(d_date_sk#24))
         :     :                                               :              +- *(3) ColumnarToRow
         :     :                                               :                 +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [(((d_year#30 = 1999) OR ((d_year#30 = 1998) AND (d_moy#32 = 12))) OR ((d_year#30 = 2000) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
         :     :                                               +- BroadcastQueryStage 3
         :     :                                                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=114576]
         :     :                                                     +- *(4) Filter (isnotnull(cc_call_center_sk#7108) AND isnotnull(cc_name#7114))
         :     :                                                        +- *(4) ColumnarToRow
         :     :                                                           +- FileScan parquet default.call_center[cc_call_center_sk#7108,cc_name#7114] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#7108), isnotnull(cc_name#7114)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>
         :     +- *(31) Project [i_category#14336, i_brand#14332, cc_name#14414, sum_sales#14040 AS sum_sales#14064, rn#14443]
         :        +- Window [rank(d_year#14386, d_moy#14388) windowspecdefinition(i_category#14336, i_brand#14332, cc_name#14414, d_year#14386 ASC NULLS FIRST, d_moy#14388 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#14443], [i_category#14336, i_brand#14332, cc_name#14414], [d_year#14386 ASC NULLS FIRST, d_moy#14388 ASC NULLS FIRST]
         :           +- *(30) Sort [i_category#14336 ASC NULLS FIRST, i_brand#14332 ASC NULLS FIRST, cc_name#14414 ASC NULLS FIRST, d_year#14386 ASC NULLS FIRST, d_moy#14388 ASC NULLS FIRST], false, 0
         :              +- ShuffleQueryStage 26
         :                 +- Exchange hashpartitioning(i_category#14336, i_brand#14332, cc_name#14414, 20), ENSURE_REQUIREMENTS, [plan_id=116195]
         :                    +- *(23) HashAggregate(keys=[i_category#14336, i_brand#14332, cc_name#14414, d_year#14386, d_moy#14388], functions=[sum(UnscaledValue(cs_sales_price#14367))], output=[i_category#14336, i_brand#14332, cc_name#14414, d_year#14386, d_moy#14388, sum_sales#14040])
         :                       +- ShuffleQueryStage 22
         :                          +- ReusedExchange [i_category#14336, i_brand#14332, cc_name#14414, d_year#14386, d_moy#14388, sum#14567L], Exchange hashpartitioning(i_category#449, i_brand#445, cc_name#7114, d_year#30, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=115817]
         +- BroadcastQueryStage 30
            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] - 1)),false), [plan_id=116433]
               +- *(29) Project [i_category#14456, i_brand#14452, cc_name#14534, sum_sales#14040 AS sum_sales#14072, rn#14563]
                  +- Window [rank(d_year#14506, d_moy#14508) windowspecdefinition(i_category#14456, i_brand#14452, cc_name#14534, d_year#14506 ASC NULLS FIRST, d_moy#14508 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#14563], [i_category#14456, i_brand#14452, cc_name#14534], [d_year#14506 ASC NULLS FIRST, d_moy#14508 ASC NULLS FIRST]
                     +- *(28) Sort [i_category#14456 ASC NULLS FIRST, i_brand#14452 ASC NULLS FIRST, cc_name#14534 ASC NULLS FIRST, d_year#14506 ASC NULLS FIRST, d_moy#14508 ASC NULLS FIRST], false, 0
                        +- ShuffleQueryStage 28
                           +- ReusedExchange [i_category#14456, i_brand#14452, cc_name#14534, d_year#14506, d_moy#14508, sum_sales#14040], Exchange hashpartitioning(i_category#14336, i_brand#14332, cc_name#14414, 20), ENSURE_REQUIREMENTS, [plan_id=116195]

==== q58 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_id#14709 ASC NULLS FIRST,ss_item_rev#14710 ASC NULLS FIRST], output=[item_id#14709,ss_item_rev#14710,ss_dev#14705,cs_item_rev#14714,cs_dev#14706,ws_item_rev#14718,ws_dev#14707,average#14708])
   +- *(22) Project [item_id#14709, ss_item_rev#14710, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#14710 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14710 as decimal(18,2))) + promote_precision(cast(cs_item_rev#14714 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#14718 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ss_dev#14705, cs_item_rev#14714, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#14714 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14710 as decimal(18,2))) + promote_precision(cast(cs_item_rev#14714 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#14718 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS cs_dev#14706, ws_item_rev#14718, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#14718 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14710 as decimal(18,2))) + promote_precision(cast(cs_item_rev#14714 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#14718 as decimal(19,2)))), DecimalType(19,2)))), DecimalType(38,21))) / 3.000000000000000000000), DecimalType(38,21))) * 100.000000000000000000000), DecimalType(38,17)) AS ws_dev#14707, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14710 as decimal(18,2))) + promote_precision(cast(cs_item_rev#14714 as decimal(18,2)))), DecimalType(18,2)) as decimal(19,2))) + promote_precision(cast(ws_item_rev#14718 as decimal(19,2)))), DecimalType(19,2))) / 3.00), DecimalType(23,6)) AS average#14708]
      +- *(22) BroadcastHashJoin [item_id#14709], [item_id#14717], Inner, BuildRight, ((((((((cast(ss_item_rev#14710 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#14718)), DecimalType(19,3))) AND (cast(ss_item_rev#14710 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#14718)), DecimalType(20,3)))) AND (cast(cs_item_rev#14714 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#14718)), DecimalType(19,3)))) AND (cast(cs_item_rev#14714 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#14718)), DecimalType(20,3)))) AND (cast(ws_item_rev#14718 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#14710)), DecimalType(19,3)))) AND (cast(ws_item_rev#14718 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#14710)), DecimalType(20,3)))) AND (cast(ws_item_rev#14718 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#14714)), DecimalType(19,3)))) AND (cast(ws_item_rev#14718 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#14714)), DecimalType(20,3)))), false
         :- *(22) Project [item_id#14709, ss_item_rev#14710, cs_item_rev#14714]
         :  +- *(22) BroadcastHashJoin [item_id#14709], [item_id#14713], Inner, BuildRight, ((((cast(ss_item_rev#14710 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#14714)), DecimalType(19,3))) AND (cast(ss_item_rev#14710 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#14714)), DecimalType(20,3)))) AND (cast(cs_item_rev#14714 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#14710)), DecimalType(19,3)))) AND (cast(cs_item_rev#14714 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#14710)), DecimalType(20,3)))), false
         :     :- *(22) Filter isnotnull(ss_item_rev#14710)
         :     :  +- *(22) HashAggregate(keys=[i_item_id#438], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[item_id#14709, ss_item_rev#14710])
         :     :     +- ShuffleQueryStage 27
         :     :        +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=119051]
         :     :           +- *(15) HashAggregate(keys=[i_item_id#438], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_id#438, sum#15005L])
         :     :              +- *(15) Project [ss_ext_sales_price#429, i_item_id#438]
         :     :                 +- *(15) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :     :                    :- *(15) Project [ss_sold_date_sk#414, ss_ext_sales_price#429, i_item_id#438]
         :     :                    :  +- *(15) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
         :     :                    :     :- *(15) Filter (isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414))
         :     :                    :     :  +- *(15) ColumnarToRow
         :     :                    :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
         :     :                    :     +- BroadcastQueryStage 0
         :     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=116961]
         :     :                    :           +- *(1) Filter (isnotnull(i_item_sk#437) AND isnotnull(i_item_id#438))
         :     :                    :              +- *(1) ColumnarToRow
         :     :                    :                 +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437), isnotnull(i_item_id#438)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :     :                    +- BroadcastQueryStage 22
         :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=118507]
         :     :                          +- *(12) Project [d_date_sk#24]
         :     :                             +- *(12) BroadcastHashJoin [d_date#26], [d_date#14911], LeftSemi, BuildRight, false
         :     :                                :- AQEShuffleRead local
         :     :                                :  +- ShuffleQueryStage 1
         :     :                                :     +- Exchange hashpartitioning(d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=116978]
         :     :                                :        +- *(2) Filter isnotnull(d_date_sk#24)
         :     :                                :           +- *(2) ColumnarToRow
         :     :                                :              +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :     :                                +- BroadcastQueryStage 16
         :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [plan_id=117799]
         :     :                                      +- AQEShuffleRead local
         :     :                                         +- ShuffleQueryStage 2
         :     :                                            +- Exchange hashpartitioning(d_date#14911, 20), ENSURE_REQUIREMENTS, [plan_id=116997]
         :     :                                               +- *(3) Project [d_date#14911]
         :     :                                                  +- *(3) Filter (isnotnull(d_week_seq#14913) AND (d_week_seq#14913 = Subquery subquery#14711, [id=#116753]))
         :     :                                                     :  +- Subquery subquery#14711, [id=#116753]
         :     :                                                     :     +- AdaptiveSparkPlan isFinalPlan=true
                                                                           +- == Final Plan ==
                                                                              *(1) Project [d_week_seq#14825]
                                                                              +- *(1) Filter (isnotnull(d_date#14823) AND (d_date#14823 = 2000-01-03))
                                                                                 +- *(1) ColumnarToRow
                                                                                    +- FileScan parquet default.date_dim[d_date#14823,d_week_seq#14825] Batched: true, DataFilters: [isnotnull(d_date#14823), (d_date#14823 = 2000-01-03)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)], ReadSchema: struct<d_date:date,d_week_seq:int>
                                                                           +- == Initial Plan ==
                                                                              Project [d_week_seq#14825]
                                                                              +- Filter (isnotnull(d_date#14823) AND (d_date#14823 = 2000-01-03))
                                                                                 +- FileScan parquet default.date_dim[d_date#14823,d_week_seq#14825] Batched: true, DataFilters: [isnotnull(d_date#14823), (d_date#14823 = 2000-01-03)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     :                                                     +- *(3) ColumnarToRow
         :     :                                                        +- FileScan parquet default.date_dim[d_date#14911,d_week_seq#14913] Batched: true, DataFilters: [isnotnull(d_week_seq#14913)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq)], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     +- BroadcastQueryStage 30
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=119209]
         :           +- *(20) Filter isnotnull(cs_item_rev#14714)
         :              +- *(20) HashAggregate(keys=[i_item_id#14722], functions=[sum(UnscaledValue(cs_ext_sales_price#220))], output=[item_id#14713, cs_item_rev#14714])
         :                 +- ShuffleQueryStage 28
         :                    +- Exchange hashpartitioning(i_item_id#14722, 20), ENSURE_REQUIREMENTS, [plan_id=119091]
         :                       +- *(16) HashAggregate(keys=[i_item_id#14722], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_id#14722, sum#15007L])
         :                          +- *(16) Project [cs_ext_sales_price#220, i_item_id#14722]
         :                             +- *(16) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#14743], Inner, BuildRight, false
         :                                :- *(16) Project [cs_sold_date_sk#197, cs_ext_sales_price#220, i_item_id#14722]
         :                                :  +- *(16) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#14721], Inner, BuildRight, false
         :                                :     :- AQEShuffleRead local
         :                                :     :  +- ShuffleQueryStage 3
         :                                :     :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=117079]
         :                                :     :        +- *(4) Filter (isnotnull(cs_item_sk#212) AND isnotnull(cs_sold_date_sk#197))
         :                                :     :           +- *(4) ColumnarToRow
         :                                :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
         :                                :     +- BroadcastQueryStage 21
         :                                :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=118308]
         :                                :           +- AQEShuffleRead local
         :                                :              +- ShuffleQueryStage 4
         :                                :                 +- Exchange hashpartitioning(i_item_sk#14721, 20), ENSURE_REQUIREMENTS, [plan_id=117096]
         :                                :                    +- *(5) Filter (isnotnull(i_item_sk#14721) AND isnotnull(i_item_id#14722))
         :                                :                       +- *(5) ColumnarToRow
         :                                :                          +- FileScan parquet default.item[i_item_sk#14721,i_item_id#14722] Batched: true, DataFilters: [isnotnull(i_item_sk#14721), isnotnull(i_item_id#14722)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :                                +- BroadcastQueryStage 24
         :                                   +- ReusedExchange [d_date_sk#14743], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=118507]
         +- BroadcastQueryStage 31
            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=119262]
               +- *(21) Filter isnotnull(ws_item_rev#14718)
                  +- *(21) HashAggregate(keys=[i_item_id#14772], functions=[sum(UnscaledValue(ws_ext_sales_price#186))], output=[item_id#14717, ws_item_rev#14718])
                     +- ShuffleQueryStage 29
                        +- Exchange hashpartitioning(i_item_id#14772, 20), ENSURE_REQUIREMENTS, [plan_id=119130]
                           +- *(19) HashAggregate(keys=[i_item_id#14772], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_id#14772, sum#15009L])
                              +- *(19) Project [ws_ext_sales_price#186, i_item_id#14772]
                                 +- *(19) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#14793], Inner, BuildRight, false
                                    :- *(19) Project [ws_sold_date_sk#163, ws_ext_sales_price#186, i_item_id#14772]
                                    :  +- *(19) SortMergeJoin [ws_item_sk#166], [i_item_sk#14771], Inner
                                    :     :- *(17) Sort [ws_item_sk#166 ASC NULLS FIRST], false, 0
                                    :     :  +- ShuffleQueryStage 9
                                    :     :     +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=117226]
                                    :     :        +- *(8) Filter (isnotnull(ws_item_sk#166) AND isnotnull(ws_sold_date_sk#163))
                                    :     :           +- *(8) ColumnarToRow
                                    :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                                    :     +- *(18) Sort [i_item_sk#14771 ASC NULLS FIRST], false, 0
                                    :        +- ShuffleQueryStage 11
                                    :           +- ReusedExchange [i_item_sk#14771, i_item_id#14772], Exchange hashpartitioning(i_item_sk#14721, 20), ENSURE_REQUIREMENTS, [plan_id=117096]
                                    +- BroadcastQueryStage 26
                                       +- ReusedExchange [d_date_sk#14793], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=118507]


==== q59 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name1#15033 ASC NULLS FIRST,s_store_id1#15035 ASC NULLS FIRST,d_week_seq1#15034 ASC NULLS FIRST], output=[s_store_name1#15033,s_store_id1#15035,d_week_seq1#15034,(sun_sales1 / sun_sales2)#15152,(mon_sales1 / mon_sales2)#15153,(tue_sales1 / tue_sales2)#15154,(wed_sales1 / wed_sales2)#15155,(thu_sales1 / thu_sales2)#15156,(fri_sales1 / fri_sales2)#15157,(sat_sales1 / sat_sales2)#15158])
   +- *(11) Project [s_store_name1#15033, s_store_id1#15035, d_week_seq1#15034, CheckOverflow((promote_precision(sun_sales1#15036) / promote_precision(sun_sales2#15046)), DecimalType(37,20)) AS (sun_sales1 / sun_sales2)#15152, CheckOverflow((promote_precision(mon_sales1#15037) / promote_precision(mon_sales2#15047)), DecimalType(37,20)) AS (mon_sales1 / mon_sales2)#15153, CheckOverflow((promote_precision(tue_sales1#15038) / promote_precision(tue_sales2#15048)), DecimalType(37,20)) AS (tue_sales1 / tue_sales2)#15154, CheckOverflow((promote_precision(wed_sales1#15039) / promote_precision(wed_sales2#15049)), DecimalType(37,20)) AS (wed_sales1 / wed_sales2)#15155, CheckOverflow((promote_precision(thu_sales1#15040) / promote_precision(thu_sales2#15050)), DecimalType(37,20)) AS (thu_sales1 / thu_sales2)#15156, CheckOverflow((promote_precision(fri_sales1#15041) / promote_precision(fri_sales2#15051)), DecimalType(37,20)) AS (fri_sales1 / fri_sales2)#15157, CheckOverflow((promote_precision(sat_sales1#15042) / promote_precision(sat_sales2#15052)), DecimalType(37,20)) AS (sat_sales1 / sat_sales2)#15158]
      +- *(11) BroadcastHashJoin [s_store_id1#15035, d_week_seq1#15034], [s_store_id2#15045, (d_week_seq2#15044 - 52)], Inner, BuildLeft, false
         :- BroadcastQueryStage 12
         :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, string, true], input[1, int, true]),false), [plan_id=120526]
         :     +- AQEShuffleRead local
         :        +- ShuffleQueryStage 10
         :           +- Exchange hashpartitioning(s_store_id1#15035, d_week_seq1#15034, 20), ENSURE_REQUIREMENTS, [plan_id=120459]
         :              +- *(9) Project [s_store_name#57 AS s_store_name1#15033, d_week_seq#28 AS d_week_seq1#15034, s_store_id#53 AS s_store_id1#15035, sun_sales#15053 AS sun_sales1#15036, mon_sales#15054 AS mon_sales1#15037, tue_sales#15055 AS tue_sales1#15038, wed_sales#15056 AS wed_sales1#15039, thu_sales#15057 AS thu_sales1#15040, fri_sales#15058 AS fri_sales1#15041, sat_sales#15059 AS sat_sales1#15042]
         :                 +- *(9) BroadcastHashJoin [d_week_seq#28], [d_week_seq#15064], Inner, BuildRight, false
         :                    :- *(9) Project [d_week_seq#28, sun_sales#15053, mon_sales#15054, tue_sales#15055, wed_sales#15056, thu_sales#15057, fri_sales#15058, sat_sales#15059, s_store_id#53, s_store_name#57]
         :                    :  +- *(9) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
         :                    :     :- *(9) HashAggregate(keys=[d_week_seq#28, ss_store_sk#421], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN ss_sales_price#427 END))], output=[d_week_seq#28, ss_store_sk#421, sun_sales#15053, mon_sales#15054, tue_sales#15055, wed_sales#15056, thu_sales#15057, fri_sales#15058, sat_sales#15059])
         :                    :     :  +- ShuffleQueryStage 7
         :                    :     :     +- Exchange hashpartitioning(d_week_seq#28, ss_store_sk#421, 20), ENSURE_REQUIREMENTS, [plan_id=120259]
         :                    :     :        +- *(7) HashAggregate(keys=[d_week_seq#28, ss_store_sk#421], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN ss_sales_price#427 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN ss_sales_price#427 END))], output=[d_week_seq#28, ss_store_sk#421, sum#15179L, sum#15180L, sum#15181L, sum#15182L, sum#15183L, sum#15184L, sum#15185L])
         :                    :     :           +- *(7) Project [ss_store_sk#421, ss_sales_price#427, d_week_seq#28, d_day_name#38]
         :                    :     :              +- *(7) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :                    :     :                 :- *(7) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
         :                    :     :                 :  +- *(7) ColumnarToRow
         :                    :     :                 :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :                    :     :                 +- BroadcastQueryStage 0
         :                    :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=119590]
         :                    :     :                       +- *(1) Filter (isnotnull(d_date_sk#24) AND isnotnull(d_week_seq#28))
         :                    :     :                          +- *(1) ColumnarToRow
         :                    :     :                             +- FileScan parquet default.date_dim[d_date_sk#24,d_week_seq#28,d_day_name#38] Batched: true, DataFilters: [isnotnull(d_date_sk#24), isnotnull(d_week_seq#28)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)], ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>
         :                    :     +- BroadcastQueryStage 1
         :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=119610]
         :                    :           +- *(2) Filter (isnotnull(s_store_sk#52) AND isnotnull(s_store_id#53))
         :                    :              +- *(2) ColumnarToRow
         :                    :                 +- FileScan parquet default.store[s_store_sk#52,s_store_id#53,s_store_name#57] Batched: true, DataFilters: [isnotnull(s_store_sk#52), isnotnull(s_store_id#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>
         :                    +- BroadcastQueryStage 2
         :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=119629]
         :                          +- *(3) Project [d_week_seq#15064]
         :                             +- *(3) Filter (((isnotnull(d_month_seq#15063) AND (d_month_seq#15063 >= 1212)) AND (d_month_seq#15063 <= 1223)) AND isnotnull(d_week_seq#15064))
         :                                +- *(3) ColumnarToRow
         :                                   +- FileScan parquet default.date_dim[d_month_seq#15063,d_week_seq#15064] Batched: true, DataFilters: [isnotnull(d_month_seq#15063), (d_month_seq#15063 >= 1212), (d_month_seq#15063 <= 1223), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>
         +- AQEShuffleRead local
            +- ShuffleQueryStage 11
               +- Exchange hashpartitioning(s_store_id2#15045, (d_week_seq2#15044 - 52), 20), ENSURE_REQUIREMENTS, [plan_id=120487]
                  +- *(10) Project [d_week_seq#28 AS d_week_seq2#15044, s_store_id#15089 AS s_store_id2#15045, sun_sales#15053 AS sun_sales2#15046, mon_sales#15054 AS mon_sales2#15047, tue_sales#15055 AS tue_sales2#15048, wed_sales#15056 AS wed_sales2#15049, thu_sales#15057 AS thu_sales2#15050, fri_sales#15058 AS fri_sales2#15051, sat_sales#15059 AS sat_sales2#15052]
                     +- *(10) BroadcastHashJoin [d_week_seq#28], [d_week_seq#15121], Inner, BuildRight, false
                        :- *(10) Project [d_week_seq#28, sun_sales#15053, mon_sales#15054, tue_sales#15055, wed_sales#15056, thu_sales#15057, fri_sales#15058, sat_sales#15059, s_store_id#15089]
                        :  +- *(10) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#15088], Inner, BuildRight, false
                        :     :- *(10) HashAggregate(keys=[d_week_seq#28, ss_store_sk#421], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#38 = Sunday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Monday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Tuesday  ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Wednesday) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Thursday ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Friday   ) THEN ss_sales_price#427 END)), sum(UnscaledValue(CASE WHEN (d_day_name#38 = Saturday ) THEN ss_sales_price#427 END))], output=[d_week_seq#28, ss_store_sk#421, sun_sales#15053, mon_sales#15054, tue_sales#15055, wed_sales#15056, thu_sales#15057, fri_sales#15058, sat_sales#15059])
                        :     :  +- ShuffleQueryStage 9
                        :     :     +- ReusedExchange [d_week_seq#28, ss_store_sk#421, sum#15193L, sum#15194L, sum#15195L, sum#15196L, sum#15197L, sum#15198L, sum#15199L], Exchange hashpartitioning(d_week_seq#28, ss_store_sk#421, 20), ENSURE_REQUIREMENTS, [plan_id=120259]
                        :     +- BroadcastQueryStage 5
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=119709]
                        :           +- *(5) Filter (isnotnull(s_store_sk#15088) AND isnotnull(s_store_id#15089))
                        :              +- *(5) ColumnarToRow
                        :                 +- FileScan parquet default.store[s_store_sk#15088,s_store_id#15089] Batched: true, DataFilters: [isnotnull(s_store_sk#15088), isnotnull(s_store_id#15089)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                        +- BroadcastQueryStage 6
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=119728]
                              +- *(6) Project [d_week_seq#15121]
                                 +- *(6) Filter (((isnotnull(d_month_seq#15120) AND (d_month_seq#15120 >= 1224)) AND (d_month_seq#15120 <= 1235)) AND isnotnull(d_week_seq#15121))
                                    +- *(6) ColumnarToRow
                                       +- FileScan parquet default.date_dim[d_month_seq#15120,d_week_seq#15121] Batched: true, DataFilters: [isnotnull(d_month_seq#15120), (d_month_seq#15120 >= 1224), (d_month_seq#15120 <= 1235), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1224), LessThanOrEqual(d_month_seq,1235),..., ReadSchema: struct<d_month_seq:int,d_week_seq:int>


==== q60 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#438 ASC NULLS FIRST,total_sales#15270 ASC NULLS FIRST], output=[i_item_id#438,total_sales#15270])
   +- *(29) HashAggregate(keys=[i_item_id#438], functions=[sum(total_sales#15271)], output=[i_item_id#438, total_sales#15270])
      +- ShuffleQueryStage 28
         +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=122735]
            +- *(28) HashAggregate(keys=[i_item_id#438], functions=[partial_sum(total_sales#15271)], output=[i_item_id#438, sum#15483, isEmpty#15484])
               +- Union
                  :- *(25) HashAggregate(keys=[i_item_id#438], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_id#438, total_sales#15271])
                  :  +- ShuffleQueryStage 25
                  :     +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=122523]
                  :        +- *(22) HashAggregate(keys=[i_item_id#438], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_id#438, sum#15486L])
                  :           +- *(22) Project [ss_ext_sales_price#429, i_item_id#438]
                  :              +- *(22) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :                 :- *(22) Project [ss_item_sk#416, ss_ext_sales_price#429]
                  :                 :  +- *(22) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, false
                  :                 :     :- *(22) Project [ss_item_sk#416, ss_addr_sk#420, ss_ext_sales_price#429]
                  :                 :     :  +- *(22) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :                 :     :     :- *(22) Filter ((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_addr_sk#420)) AND isnotnull(ss_item_sk#416))
                  :                 :     :     :  +- *(22) ColumnarToRow
                  :                 :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_addr_sk#420,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_addr_sk#420), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>
                  :                 :     :     +- BroadcastQueryStage 0
                  :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=121074]
                  :                 :     :           +- *(1) Project [d_date_sk#24]
                  :                 :     :              +- *(1) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 1998)) AND (d_moy#32 = 9)) AND isnotnull(d_date_sk#24))
                  :                 :     :                 +- *(1) ColumnarToRow
                  :                 :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 1998), (d_moy#32 = 9), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,9), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :                 :     +- BroadcastQueryStage 1
                  :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=121095]
                  :                 :           +- *(2) Project [ca_address_sk#3717]
                  :                 :              +- *(2) Filter ((isnotnull(ca_gmt_offset#3728) AND (ca_gmt_offset#3728 = -5.00)) AND isnotnull(ca_address_sk#3717))
                  :                 :                 +- *(2) ColumnarToRow
                  :                 :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_gmt_offset#3728] Batched: true, DataFilters: [isnotnull(ca_gmt_offset#3728), (ca_gmt_offset#3728 = -5.00), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>
                  :                 +- BroadcastQueryStage 20
                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=122221]
                  :                       +- *(15) SortMergeJoin [i_item_id#438], [i_item_id#15404], LeftSemi
                  :                          :- *(13) Sort [i_item_id#438 ASC NULLS FIRST], false, 0
                  :                          :  +- ShuffleQueryStage 2
                  :                          :     +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=121114]
                  :                          :        +- *(3) Filter isnotnull(i_item_sk#437)
                  :                          :           +- *(3) ColumnarToRow
                  :                          :              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
                  :                          +- *(14) Sort [i_item_id#15404 ASC NULLS FIRST], false, 0
                  :                             +- ShuffleQueryStage 3
                  :                                +- Exchange hashpartitioning(i_item_id#15404, 20), ENSURE_REQUIREMENTS, [plan_id=121133]
                  :                                   +- *(4) Project [i_item_id#15404]
                  :                                      +- *(4) Filter (isnotnull(i_category#15415) AND (i_category#15415 = Music                                             ))
                  :                                         +- *(4) ColumnarToRow
                  :                                            +- FileScan parquet default.item[i_item_id#15404,i_category#15415] Batched: true, DataFilters: [isnotnull(i_category#15415), (i_category#15415 = Music                                          ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Music                                             )], ReadSchema: struct<i_item_id:string,i_category:string>
                  :- *(26) HashAggregate(keys=[i_item_id#15319], functions=[sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_id#15319, total_sales#15273])
                  :  +- ShuffleQueryStage 26
                  :     +- Exchange hashpartitioning(i_item_id#15319, 20), ENSURE_REQUIREMENTS, [plan_id=122574]
                  :        +- *(23) HashAggregate(keys=[i_item_id#15319], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220))], output=[i_item_id#15319, sum#15488L])
                  :           +- *(23) Project [cs_ext_sales_price#220, i_item_id#15319]
                  :              +- *(23) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#15318], Inner, BuildRight, false
                  :                 :- *(23) Project [cs_item_sk#212, cs_ext_sales_price#220]
                  :                 :  +- *(23) BroadcastHashJoin [cs_bill_addr_sk#203], [ca_address_sk#15305], Inner, BuildRight, false
                  :                 :     :- *(23) Project [cs_bill_addr_sk#203, cs_item_sk#212, cs_ext_sales_price#220]
                  :                 :     :  +- *(23) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#15277], Inner, BuildRight, false
                  :                 :     :     :- *(23) Filter ((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_bill_addr_sk#203)) AND isnotnull(cs_item_sk#212))
                  :                 :     :     :  +- *(23) ColumnarToRow
                  :                 :     :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_addr_sk#203,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_bill_addr_sk#203), isnotnull(cs_item_sk#212)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
                  :                 :     :     +- BroadcastQueryStage 5
                  :                 :     :        +- ReusedExchange [d_date_sk#15277], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=121074]
                  :                 :     +- BroadcastQueryStage 7
                  :                 :        +- ReusedExchange [ca_address_sk#15305], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=121095]
                  :                 +- BroadcastQueryStage 22
                  :                    +- ReusedExchange [i_item_sk#15318, i_item_id#15319], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=122221]
                  +- *(27) HashAggregate(keys=[i_item_id#15382], functions=[sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_id#15382, total_sales#15275])
                     +- ShuffleQueryStage 27
                        +- Exchange hashpartitioning(i_item_id#15382, 20), ENSURE_REQUIREMENTS, [plan_id=122625]
                           +- *(24) HashAggregate(keys=[i_item_id#15382], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186))], output=[i_item_id#15382, sum#15490L])
                              +- *(24) Project [ws_ext_sales_price#186, i_item_id#15382]
                                 +- *(24) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#15381], Inner, BuildRight, false
                                    :- *(24) Project [ws_item_sk#166, ws_ext_sales_price#186]
                                    :  +- *(24) BroadcastHashJoin [ws_bill_addr_sk#170], [ca_address_sk#15368], Inner, BuildRight, false
                                    :     :- *(24) Project [ws_item_sk#166, ws_bill_addr_sk#170, ws_ext_sales_price#186]
                                    :     :  +- *(24) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#15340], Inner, BuildRight, false
                                    :     :     :- *(24) Filter ((isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_bill_addr_sk#170)) AND isnotnull(ws_item_sk#166))
                                    :     :     :  +- *(24) ColumnarToRow
                                    :     :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_bill_addr_sk#170,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_addr_sk#170), isnotnull(ws_item_sk#166)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>
                                    :     :     +- BroadcastQueryStage 13
                                    :     :        +- ReusedExchange [d_date_sk#15340], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=121074]
                                    :     +- BroadcastQueryStage 15
                                    :        +- ReusedExchange [ca_address_sk#15368], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=121095]
                                    +- BroadcastQueryStage 24
                                       +- ReusedExchange [i_item_sk#15381, i_item_id#15382], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=122221]

==== q61 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(16) Project [promotions#15519, total#15520, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(promotions#15519 as decimal(15,4))) / promote_precision(cast(total#15520 as decimal(15,4)))), DecimalType(35,20))) * 100.00000000000000000000), DecimalType(38,19)) AS ((CAST(promotions AS DECIMAL(15,4)) / CAST(total AS DECIMAL(15,4))) * 100)#15662]
   +- CartesianProduct
      :- *(14) HashAggregate(keys=[], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[promotions#15519])
      :  +- ShuffleQueryStage 16
      :     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=124389]
      :        +- *(12) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[sum#15667L])
      :           +- *(12) Project [ss_ext_sales_price#429]
      :              +- *(12) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
      :                 :- *(12) Project [ss_item_sk#416, ss_ext_sales_price#429]
      :                 :  +- *(12) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
      :                 :     :- *(12) Project [ss_item_sk#416, ss_ext_sales_price#429, c_current_addr_sk#85]
      :                 :     :  +- *(12) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
      :                 :     :     :- *(12) Project [ss_item_sk#416, ss_customer_sk#417, ss_ext_sales_price#429]
      :                 :     :     :  +- *(12) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
      :                 :     :     :     :- *(12) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_customer_sk#417, ss_ext_sales_price#429]
      :                 :     :     :     :  +- *(12) BroadcastHashJoin [ss_promo_sk#422], [p_promo_sk#3642], Inner, BuildRight, false
      :                 :     :     :     :     :- *(12) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_customer_sk#417, ss_promo_sk#422, ss_ext_sales_price#429]
      :                 :     :     :     :     :  +- *(12) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
      :                 :     :     :     :     :     :- *(12) Filter ((((isnotnull(ss_store_sk#421) AND isnotnull(ss_promo_sk#422)) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_customer_sk#417)) AND isnotnull(ss_item_sk#416))
      :                 :     :     :     :     :     :  +- *(12) ColumnarToRow
      :                 :     :     :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417,ss_store_sk#421,ss_promo_sk#422,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_store_sk#421), isnotnull(ss_promo_sk#422), isnotnull(ss_sold_date_sk#414), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_e...
      :                 :     :     :     :     :     +- BroadcastQueryStage 0
      :                 :     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123132]
      :                 :     :     :     :     :           +- *(1) Project [s_store_sk#52]
      :                 :     :     :     :     :              +- *(1) Filter ((isnotnull(s_gmt_offset#79) AND (s_gmt_offset#79 = -5.00)) AND isnotnull(s_store_sk#52))
      :                 :     :     :     :     :                 +- *(1) ColumnarToRow
      :                 :     :     :     :     :                    +- FileScan parquet default.store[s_store_sk#52,s_gmt_offset#79] Batched: true, DataFilters: [isnotnull(s_gmt_offset#79), (s_gmt_offset#79 = -5.00), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_gmt_offset:decimal(5,2)>
      :                 :     :     :     :     +- BroadcastQueryStage 1
      :                 :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123153]
      :                 :     :     :     :           +- *(2) Project [p_promo_sk#3642]
      :                 :     :     :     :              +- *(2) Filter ((((p_channel_dmail#3650 = Y) OR (p_channel_email#3651 = Y)) OR (p_channel_tv#3653 = Y)) AND isnotnull(p_promo_sk#3642))
      :                 :     :     :     :                 +- *(2) ColumnarToRow
      :                 :     :     :     :                    +- FileScan parquet default.promotion[p_promo_sk#3642,p_channel_dmail#3650,p_channel_email#3651,p_channel_tv#3653] Batched: true, DataFilters: [(((p_channel_dmail#3650 = Y) OR (p_channel_email#3651 = Y)) OR (p_channel_tv#3653 = Y)), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/promotion], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(p_channel_dmail,Y),EqualTo(p_channel_email,Y)),EqualTo(p_channel_tv,Y)), IsNotNull..., ReadSchema: struct<p_promo_sk:int,p_channel_dmail:string,p_channel_email:string,p_channel_tv:string>
      :                 :     :     :     +- BroadcastQueryStage 2
      :                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123174]
      :                 :     :     :           +- *(3) Project [d_date_sk#24]
      :                 :     :     :              +- *(3) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 1998)) AND (d_moy#32 = 11)) AND isnotnull(d_date_sk#24))
      :                 :     :     :                 +- *(3) ColumnarToRow
      :                 :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 1998), (d_moy#32 = 11), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
      :                 :     :     +- BroadcastQueryStage 3
      :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=123193]
      :                 :     :           +- *(4) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
      :                 :     :              +- *(4) ColumnarToRow
      :                 :     :                 +- FileScan parquet default.customer[c_customer_sk#81,c_current_addr_sk#85] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>
      :                 :     +- BroadcastQueryStage 4
      :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123212]
      :                 :           +- *(5) Project [ca_address_sk#3717]
      :                 :              +- *(5) Filter ((isnotnull(ca_gmt_offset#3728) AND (ca_gmt_offset#3728 = -5.00)) AND isnotnull(ca_address_sk#3717))
      :                 :                 +- *(5) ColumnarToRow
      :                 :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_gmt_offset#3728] Batched: true, DataFilters: [isnotnull(ca_gmt_offset#3728), (ca_gmt_offset#3728 = -5.00), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>
      :                 +- BroadcastQueryStage 5
      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123233]
      :                       +- *(6) Project [i_item_sk#437]
      :                          +- *(6) Filter ((isnotnull(i_category#449) AND (i_category#449 = Jewelry                                           )) AND isnotnull(i_item_sk#437))
      :                             +- *(6) ColumnarToRow
      :                                +- FileScan parquet default.item[i_item_sk#437,i_category#449] Batched: true, DataFilters: [isnotnull(i_category#449), (i_category#449 = Jewelry                                           )..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry                                           ), I..., ReadSchema: struct<i_item_sk:int,i_category:string>
      +- *(15) HashAggregate(keys=[], functions=[sum(UnscaledValue(ss_ext_sales_price#15536))], output=[total#15520])
         +- ShuffleQueryStage 17
            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=124464]
               +- *(13) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#15536))], output=[sum#15669L])
                  +- *(13) Project [ss_ext_sales_price#15536]
                     +- *(13) BroadcastHashJoin [ss_item_sk#15523], [i_item_sk#15632], Inner, BuildRight, false
                        :- *(13) Project [ss_item_sk#15523, ss_ext_sales_price#15536]
                        :  +- *(13) BroadcastHashJoin [c_current_addr_sk#15605], [ca_address_sk#15619], Inner, BuildRight, false
                        :     :- *(13) Project [ss_item_sk#15523, ss_ext_sales_price#15536, c_current_addr_sk#15605]
                        :     :  +- *(13) BroadcastHashJoin [ss_customer_sk#15524], [c_customer_sk#15601], Inner, BuildRight, false
                        :     :     :- *(13) Project [ss_item_sk#15523, ss_customer_sk#15524, ss_ext_sales_price#15536]
                        :     :     :  +- *(13) BroadcastHashJoin [ss_sold_date_sk#15521], [d_date_sk#15573], Inner, BuildRight, false
                        :     :     :     :- *(13) Project [ss_sold_date_sk#15521, ss_item_sk#15523, ss_customer_sk#15524, ss_ext_sales_price#15536]
                        :     :     :     :  +- *(13) BroadcastHashJoin [ss_store_sk#15528], [s_store_sk#15544], Inner, BuildRight, false
                        :     :     :     :     :- *(13) Filter (((isnotnull(ss_store_sk#15528) AND isnotnull(ss_sold_date_sk#15521)) AND isnotnull(ss_customer_sk#15524)) AND isnotnull(ss_item_sk#15523))
                        :     :     :     :     :  +- *(13) ColumnarToRow
                        :     :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#15521,ss_item_sk#15523,ss_customer_sk#15524,ss_store_sk#15528,ss_ext_sales_price#15536] Batched: true, DataFilters: [isnotnull(ss_store_sk#15528), isnotnull(ss_sold_date_sk#15521), isnotnull(ss_customer_sk#15524),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:d...
                        :     :     :     :     +- BroadcastQueryStage 7
                        :     :     :     :        +- ReusedExchange [s_store_sk#15544], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123132]
                        :     :     :     +- BroadcastQueryStage 9
                        :     :     :        +- ReusedExchange [d_date_sk#15573], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123174]
                        :     :     +- BroadcastQueryStage 11
                        :     :        +- ReusedExchange [c_customer_sk#15601, c_current_addr_sk#15605], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=123193]
                        :     +- BroadcastQueryStage 13
                        :        +- ReusedExchange [ca_address_sk#15619], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123212]
                        +- BroadcastQueryStage 15
                           +- ReusedExchange [i_item_sk#15632], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=123233]


==== q62 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[substr(w_warehouse_name, 1, 20)#15692 ASC NULLS FIRST,sm_type#15683 ASC NULLS FIRST,web_name#3355 ASC NULLS FIRST], output=[substr(w_warehouse_name, 1, 20)#15692,sm_type#15683,web_name#3355,30 days #15676L,31 - 60 days #15677L,61 - 90 days #15678L,91 - 120 days #15679L,>120 days #15680L])
   +- *(6) HashAggregate(keys=[_groupingexpression#15702, sm_type#15683, web_name#3355], functions=[sum(CASE WHEN ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 30) THEN 1 ELSE 0 END), sum(CASE WHEN (((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 30) AND ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 60)) THEN 1 ELSE 0 END), sum(CASE WHEN (((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 60) AND ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 90)) THEN 1 ELSE 0 END), sum(CASE WHEN (((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 90) AND ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 120)) THEN 1 ELSE 0 END), sum(CASE WHEN ((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 120) THEN 1 ELSE 0 END)], output=[substr(w_warehouse_name, 1, 20)#15692, sm_type#15683, web_name#3355, 30 days #15676L, 31 - 60 days #15677L, 61 - 90 days #15678L, 91 - 120 days #15679L, >120 days #15680L])
      +- ShuffleQueryStage 4
         +- Exchange hashpartitioning(_groupingexpression#15702, sm_type#15683, web_name#3355, 20), ENSURE_REQUIREMENTS, [plan_id=125037]
            +- *(5) HashAggregate(keys=[_groupingexpression#15702, sm_type#15683, web_name#3355], functions=[partial_sum(CASE WHEN ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 30) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 30) AND ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 60)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 60) AND ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 90)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 90) AND ((ws_ship_date_sk#165 - ws_sold_date_sk#163) <= 120)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN ((ws_ship_date_sk#165 - ws_sold_date_sk#163) > 120) THEN 1 ELSE 0 END)], output=[_groupingexpression#15702, sm_type#15683, web_name#3355, sum#15708L, sum#15709L, sum#15710L, sum#15711L, sum#15712L])
               +- *(5) Project [ws_sold_date_sk#163, ws_ship_date_sk#165, sm_type#15683, web_name#3355, substr(w_warehouse_name#8011, 1, 20) AS _groupingexpression#15702]
                  +- *(5) BroadcastHashJoin [ws_ship_date_sk#165], [d_date_sk#24], Inner, BuildRight, false
                     :- *(5) Project [ws_sold_date_sk#163, ws_ship_date_sk#165, w_warehouse_name#8011, sm_type#15683, web_name#3355]
                     :  +- *(5) BroadcastHashJoin [ws_web_site_sk#176], [web_site_sk#3351], Inner, BuildRight, false
                     :     :- *(5) Project [ws_sold_date_sk#163, ws_ship_date_sk#165, ws_web_site_sk#176, w_warehouse_name#8011, sm_type#15683]
                     :     :  +- *(5) BroadcastHashJoin [ws_ship_mode_sk#177], [sm_ship_mode_sk#15681], Inner, BuildRight, false
                     :     :     :- *(5) Project [ws_sold_date_sk#163, ws_ship_date_sk#165, ws_web_site_sk#176, ws_ship_mode_sk#177, w_warehouse_name#8011]
                     :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#178], [w_warehouse_sk#8009], Inner, BuildRight, false
                     :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#178) AND isnotnull(ws_ship_mode_sk#177)) AND isnotnull(ws_web_site_sk#176)) AND isnotnull(ws_ship_date_sk#165))
                     :     :     :     :  +- *(5) ColumnarToRow
                     :     :     :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_ship_date_sk#165,ws_web_site_sk#176,ws_ship_mode_sk#177,ws_warehouse_sk#178] Batched: true, DataFilters: [isnotnull(ws_warehouse_sk#178), isnotnull(ws_ship_mode_sk#177), isnotnull(ws_web_site_sk#176), i..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_ship_mode_sk), IsNotNull(ws_web_site_sk), IsNotNull(ws_..., ReadSchema: struct<ws_sold_date_sk:int,ws_ship_date_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehous...
                     :     :     :     +- BroadcastQueryStage 0
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=124691]
                     :     :     :           +- *(1) Filter isnotnull(w_warehouse_sk#8009)
                     :     :     :              +- *(1) ColumnarToRow
                     :     :     :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
                     :     :     +- BroadcastQueryStage 1
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=124708]
                     :     :           +- *(2) Filter isnotnull(sm_ship_mode_sk#15681)
                     :     :              +- *(2) ColumnarToRow
                     :     :                 +- FileScan parquet default.ship_mode[sm_ship_mode_sk#15681,sm_type#15683] Batched: true, DataFilters: [isnotnull(sm_ship_mode_sk#15681)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/ship_mode], PartitionFilters: [], PushedFilters: [IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_type:string>
                     :     +- BroadcastQueryStage 2
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=124725]
                     :           +- *(3) Filter isnotnull(web_site_sk#3351)
                     :              +- *(3) ColumnarToRow
                     :                 +- FileScan parquet default.web_site[web_site_sk#3351,web_name#3355] Batched: true, DataFilters: [isnotnull(web_site_sk#3351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_name:string>
                     +- BroadcastQueryStage 3
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=124744]
                           +- *(4) Project [d_date_sk#24]
                              +- *(4) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                                 +- *(4) ColumnarToRow
                                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>


==== q63 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_manager_id#457 ASC NULLS FIRST,avg_monthly_sales#15729 ASC NULLS FIRST,sum_sales#15728 ASC NULLS FIRST], output=[i_manager_id#457,sum_sales#15728,avg_monthly_sales#15729])
   +- *(7) Project [i_manager_id#457, sum_sales#15728, avg_monthly_sales#15729]
      +- *(7) Filter CASE WHEN (avg_monthly_sales#15729 > 0.000000) THEN (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#15728 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#15729 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#15729 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000) ELSE false END
         +- Window [avg(_w0#15733) windowspecdefinition(i_manager_id#457, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#15729], [i_manager_id#457]
            +- *(6) Sort [i_manager_id#457 ASC NULLS FIRST], false, 0
               +- ShuffleQueryStage 4
                  +- Exchange hashpartitioning(i_manager_id#457, 20), ENSURE_REQUIREMENTS, [plan_id=125593]
                     +- *(5) HashAggregate(keys=[i_manager_id#457, d_moy#32], functions=[sum(UnscaledValue(ss_sales_price#427))], output=[i_manager_id#457, sum_sales#15728, _w0#15733])
                        +- ShuffleQueryStage 3
                           +- Exchange hashpartitioning(i_manager_id#457, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=125535]
                              +- *(4) HashAggregate(keys=[i_manager_id#457, d_moy#32], functions=[partial_sum(UnscaledValue(ss_sales_price#427))], output=[i_manager_id#457, d_moy#32, sum#15738L])
                                 +- *(4) Project [i_manager_id#457, ss_sales_price#427, d_moy#32]
                                    +- *(4) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :- *(4) Project [i_manager_id#457, ss_store_sk#421, ss_sales_price#427, d_moy#32]
                                       :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                       :     :- *(4) Project [i_manager_id#457, ss_sold_date_sk#414, ss_store_sk#421, ss_sales_price#427]
                                       :     :  +- *(4) BroadcastHashJoin [i_item_sk#437], [ss_item_sk#416], Inner, BuildLeft, false
                                       :     :     :- BroadcastQueryStage 0
                                       :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=125237]
                                       :     :     :     +- *(1) Project [i_item_sk#437, i_manager_id#457]
                                       :     :     :        +- *(1) Filter ((((i_category#449 IN (Books                                             ,Children                                          ,Electronics                                       ) AND i_class#447 IN (personal                                          ,portable                                          ,refernece                                         ,self-help                                         )) AND i_brand#445 IN (scholaramalgamalg #14                             ,scholaramalgamalg #7                              ,exportiunivamalg #9                               ,scholaramalgamalg #9                              )) OR ((i_category#449 IN (Women                                             ,Music                                             ,Men                                               ) AND i_class#447 IN (accessories                                       ,classical                                         ,fragrances                                        ,pants                                             )) AND i_brand#445 IN (amalgimporto #1                                   ,edu packscholar #1                                ,exportiimporto #1                                 ,importoamalg #1                                   ))) AND isnotnull(i_item_sk#437))
                                       :     :     :           +- *(1) ColumnarToRow
                                       :     :     :              +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_class#447,i_category#449,i_manager_id#457] Batched: true, DataFilters: [(((i_category#449 IN (Books                                             ,Children               ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [Or(And(And(In(i_category, [Books                                             ,Children          ..., ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_manager_id:int>
                                       :     :     +- *(4) Filter ((isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
                                       :     :        +- *(4) ColumnarToRow
                                       :     :           +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                                       :     +- BroadcastQueryStage 1
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=125258]
                                       :           +- *(2) Project [d_date_sk#24, d_moy#32]
                                       :              +- *(2) Filter (d_month_seq#27 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211 AND isnotnull(d_date_sk#24))
                                       :                 +- *(2) ColumnarToRow
                                       :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27,d_moy#32] Batched: true, DataFilters: [d_month_seq#27 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [In(d_month_seq, [1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211]), IsNotNull(d_date..., ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_moy:int>
                                       +- BroadcastQueryStage 2
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=125277]
                                             +- *(3) Filter isnotnull(s_store_sk#52)
                                                +- *(3) ColumnarToRow
                                                   +- FileScan parquet default.store[s_store_sk#52] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>


==== q65 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[s_store_name#57 ASC NULLS FIRST,i_item_desc#441 ASC NULLS FIRST], output=[s_store_name#57,i_item_desc#441,revenue#15746,i_current_price#442,i_wholesale_cost#443,i_brand#445])
   +- *(10) Project [s_store_name#57, i_item_desc#441, revenue#15746, i_current_price#442, i_wholesale_cost#443, i_brand#445]
      +- *(10) BroadcastHashJoin [ss_store_sk#15754], [ss_store_sk#421], Inner, BuildRight, (cast(revenue#15746 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#15745)), DecimalType(23,7))), false
         :- AQEShuffleRead local
         :  +- ShuffleQueryStage 7
         :     +- Exchange hashpartitioning(ss_store_sk#15754, 20), ENSURE_REQUIREMENTS, [plan_id=126401]
         :        +- *(7) Project [s_store_name#57, ss_store_sk#15754, revenue#15746, i_item_desc#441, i_current_price#442, i_wholesale_cost#443, i_brand#445]
         :           +- *(7) BroadcastHashJoin [ss_item_sk#15749], [i_item_sk#437], Inner, BuildRight, false
         :              :- *(7) Project [s_store_name#57, ss_store_sk#15754, ss_item_sk#15749, revenue#15746]
         :              :  +- *(7) BroadcastHashJoin [s_store_sk#52], [ss_store_sk#15754], Inner, BuildLeft, false
         :              :     :- BroadcastQueryStage 0
         :              :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=125847]
         :              :     :     +- *(1) Filter isnotnull(s_store_sk#52)
         :              :     :        +- *(1) ColumnarToRow
         :              :     :           +- FileScan parquet default.store[s_store_sk#52,s_store_name#57] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string>
         :              :     +- *(7) Filter isnotnull(revenue#15746)
         :              :        +- *(7) HashAggregate(keys=[ss_store_sk#15754, ss_item_sk#15749], functions=[sum(UnscaledValue(ss_sales_price#15760))], output=[ss_store_sk#15754, ss_item_sk#15749, revenue#15746])
         :              :           +- ShuffleQueryStage 5
         :              :              +- Exchange hashpartitioning(ss_store_sk#15754, ss_item_sk#15749, 20), ENSURE_REQUIREMENTS, [plan_id=126219]
         :              :                 +- *(5) HashAggregate(keys=[ss_store_sk#15754, ss_item_sk#15749], functions=[partial_sum(UnscaledValue(ss_sales_price#15760))], output=[ss_store_sk#15754, ss_item_sk#15749, sum#15810L])
         :              :                    +- *(5) Project [ss_item_sk#15749, ss_store_sk#15754, ss_sales_price#15760]
         :              :                       +- *(5) BroadcastHashJoin [ss_sold_date_sk#15747], [d_date_sk#15770], Inner, BuildRight, false
         :              :                          :- *(5) Filter ((isnotnull(ss_sold_date_sk#15747) AND isnotnull(ss_store_sk#15754)) AND isnotnull(ss_item_sk#15749))
         :              :                          :  +- *(5) ColumnarToRow
         :              :                          :     +- FileScan parquet default.store_sales[ss_sold_date_sk#15747,ss_item_sk#15749,ss_store_sk#15754,ss_sales_price#15760] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#15747), isnotnull(ss_store_sk#15754), isnotnull(ss_item_sk#15749)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
         :              :                          +- BroadcastQueryStage 1
         :              :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=125864]
         :              :                                +- *(2) Project [d_date_sk#15770]
         :              :                                   +- *(2) Filter (((isnotnull(d_month_seq#15773) AND (d_month_seq#15773 >= 1176)) AND (d_month_seq#15773 <= 1187)) AND isnotnull(d_date_sk#15770))
         :              :                                      +- *(2) ColumnarToRow
         :              :                                         +- FileScan parquet default.date_dim[d_date_sk#15770,d_month_seq#15773] Batched: true, DataFilters: [isnotnull(d_month_seq#15773), (d_month_seq#15773 >= 1176), (d_month_seq#15773 <= 1187), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
         :              +- BroadcastQueryStage 2
         :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=125889]
         :                    +- *(3) Filter isnotnull(i_item_sk#437)
         :                       +- *(3) ColumnarToRow
         :                          +- FileScan parquet default.item[i_item_sk#437,i_item_desc#441,i_current_price#442,i_wholesale_cost#443,i_brand#445] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2...
         +- BroadcastQueryStage 9
            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=126515]
               +- *(9) HashAggregate(keys=[ss_store_sk#421], functions=[avg(revenue#15744)], output=[ss_store_sk#421, ave#15745])
                  +- ShuffleQueryStage 8
                     +- Exchange hashpartitioning(ss_store_sk#421, 20), ENSURE_REQUIREMENTS, [plan_id=126479]
                        +- *(8) HashAggregate(keys=[ss_store_sk#421], functions=[partial_avg(revenue#15744)], output=[ss_store_sk#421, sum#15813, count#15814L])
                           +- *(8) HashAggregate(keys=[ss_store_sk#421, ss_item_sk#416], functions=[sum(UnscaledValue(ss_sales_price#427))], output=[ss_store_sk#421, revenue#15744])
                              +- ShuffleQueryStage 6
                                 +- Exchange hashpartitioning(ss_store_sk#421, ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=126257]
                                    +- *(6) HashAggregate(keys=[ss_store_sk#421, ss_item_sk#416], functions=[partial_sum(UnscaledValue(ss_sales_price#427))], output=[ss_store_sk#421, ss_item_sk#416, sum#15816L])
                                       +- *(6) Project [ss_item_sk#416, ss_store_sk#421, ss_sales_price#427]
                                          +- *(6) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                             :- *(6) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
                                             :  +- *(6) ColumnarToRow
                                             :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                                             +- BroadcastQueryStage 4
                                                +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=125864]


==== q66 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[w_warehouse_name#8011 ASC NULLS FIRST], output=[w_warehouse_name#8011,w_warehouse_sq_ft#8012,w_city#8017,w_county#8018,w_state#8019,w_country#8021,ship_carriers#15839,year#15840,jan_sales#15891,feb_sales#15892,mar_sales#15893,apr_sales#15894,may_sales#15895,jun_sales#15896,jul_sales#15897,aug_sales#15898,sep_sales#15899,oct_sales#15900,nov_sales#15901,dec_sales#15902,jan_sales_per_sq_foot#15903,feb_sales_per_sq_foot#15904,mar_sales_per_sq_foot#15905,apr_sales_per_sq_foot#15906,may_sales_per_sq_foot#15907,jun_sales_per_sq_foot#15908,jul_sales_per_sq_foot#15909,aug_sales_per_sq_foot#15910,sep_sales_per_sq_foot#15911,oct_sales_per_sq_foot#15912,nov_sales_per_sq_foot#15913,dec_sales_per_sq_foot#15914,jan_net#15915,feb_net#15916,mar_net#15917,apr_net#15918,may_net#15919,jun_net#15920,jul_net#15921,aug_net#15922,sep_net#15923,oct_net#15924,nov_net#15925,dec_net#15926])
   +- *(14) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, ship_carriers#15839, year#15840], functions=[sum(jan_sales#15841), sum(feb_sales#15842), sum(mar_sales#15843), sum(apr_sales#15844), sum(may_sales#15845), sum(jun_sales#15846), sum(jul_sales#15847), sum(aug_sales#15848), sum(sep_sales#15849), sum(oct_sales#15850), sum(nov_sales#15851), sum(dec_sales#15852), sum(CheckOverflow((promote_precision(jan_sales#15841) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(feb_sales#15842) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(mar_sales#15843) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(apr_sales#15844) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(may_sales#15845) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(jun_sales#15846) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(jul_sales#15847) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(aug_sales#15848) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(sep_sales#15849) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(oct_sales#15850) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(nov_sales#15851) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(CheckOverflow((promote_precision(dec_sales#15852) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), sum(jan_net#15853), sum(feb_net#15854), sum(mar_net#15855), sum(apr_net#15856), sum(may_net#15857), sum(jun_net#15858), sum(jul_net#15859), sum(aug_net#15860), sum(sep_net#15861), sum(oct_net#15862), sum(nov_net#15863), sum(dec_net#15864)], output=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, ship_carriers#15839, year#15840, jan_sales#15891, feb_sales#15892, mar_sales#15893, apr_sales#15894, may_sales#15895, jun_sales#15896, jul_sales#15897, aug_sales#15898, sep_sales#15899, oct_sales#15900, nov_sales#15901, dec_sales#15902, jan_sales_per_sq_foot#15903, feb_sales_per_sq_foot#15904, mar_sales_per_sq_foot#15905, apr_sales_per_sq_foot#15906, may_sales_per_sq_foot#15907, jun_sales_per_sq_foot#15908, jul_sales_per_sq_foot#15909, aug_sales_per_sq_foot#15910, sep_sales_per_sq_foot#15911, oct_sales_per_sq_foot#15912, nov_sales_per_sq_foot#15913, dec_sales_per_sq_foot#15914, jan_net#15915, feb_net#15916, mar_net#15917, apr_net#15918, may_net#15919, jun_net#15920, jul_net#15921, aug_net#15922, sep_net#15923, oct_net#15924, nov_net#15925, dec_net#15926])
      +- ShuffleQueryStage 14
         +- Exchange hashpartitioning(w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, ship_carriers#15839, year#15840, 20), ENSURE_REQUIREMENTS, [plan_id=127787]
            +- *(13) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, ship_carriers#15839, year#15840], functions=[partial_sum(jan_sales#15841), partial_sum(feb_sales#15842), partial_sum(mar_sales#15843), partial_sum(apr_sales#15844), partial_sum(may_sales#15845), partial_sum(jun_sales#15846), partial_sum(jul_sales#15847), partial_sum(aug_sales#15848), partial_sum(sep_sales#15849), partial_sum(oct_sales#15850), partial_sum(nov_sales#15851), partial_sum(dec_sales#15852), partial_sum(CheckOverflow((promote_precision(jan_sales#15841) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(feb_sales#15842) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(mar_sales#15843) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(apr_sales#15844) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(may_sales#15845) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(jun_sales#15846) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(jul_sales#15847) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(aug_sales#15848) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(sep_sales#15849) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(oct_sales#15850) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(nov_sales#15851) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(CheckOverflow((promote_precision(dec_sales#15852) / promote_precision(cast(w_warehouse_sq_ft#8012 as decimal(28,2)))), DecimalType(38,12))), partial_sum(jan_net#15853), partial_sum(feb_net#15854), partial_sum(mar_net#15855), partial_sum(apr_net#15856), partial_sum(may_net#15857), partial_sum(jun_net#15858), partial_sum(jul_net#15859), partial_sum(aug_net#15860), partial_sum(sep_net#15861), partial_sum(oct_net#15862), partial_sum(nov_net#15863), partial_sum(dec_net#15864)], output=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, ship_carriers#15839, year#15840, sum#16200, isEmpty#16201, sum#16202, isEmpty#16203, sum#16204, isEmpty#16205, sum#16206, isEmpty#16207, sum#16208, isEmpty#16209, sum#16210, isEmpty#16211, sum#16212, isEmpty#16213, sum#16214, isEmpty#16215, sum#16216, isEmpty#16217, sum#16218, isEmpty#16219, sum#16220, isEmpty#16221, sum#16222, isEmpty#16223, sum#16224, isEmpty#16225, sum#16226, isEmpty#16227, sum#16228, isEmpty#16229, sum#16230, isEmpty#16231, sum#16232, isEmpty#16233, sum#16234, isEmpty#16235, sum#16236, isEmpty#16237, sum#16238, isEmpty#16239, sum#16240, isEmpty#16241, sum#16242, isEmpty#16243, sum#16244, isEmpty#16245, sum#16246, isEmpty#16247, sum#16248, isEmpty#16249, sum#16250, isEmpty#16251, sum#16252, isEmpty#16253, sum#16254, isEmpty#16255, sum#16256, isEmpty#16257, sum#16258, isEmpty#16259, sum#16260, isEmpty#16261, sum#16262, isEmpty#16263, sum#16264, isEmpty#16265, sum#16266, isEmpty#16267, sum#16268, isEmpty#16269, sum#16270, isEmpty#16271])
               +- Union
                  :- *(11) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30], functions=[sum(CASE WHEN (d_moy#32 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#32 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END)], output=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, ship_carriers#15839, year#15840, jan_sales#15841, feb_sales#15842, mar_sales#15843, apr_sales#15844, may_sales#15845, jun_sales#15846, jul_sales#15847, aug_sales#15848, sep_sales#15849, oct_sales#15850, nov_sales#15851, dec_sales#15852, jan_net#15853, feb_net#15854, mar_net#15855, apr_net#15856, may_net#15857, jun_net#15858, jul_net#15859, aug_net#15860, sep_net#15861, oct_net#15862, nov_net#15863, dec_net#15864])
                  :  +- ShuffleQueryStage 12
                  :     +- Exchange hashpartitioning(w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30, 20), ENSURE_REQUIREMENTS, [plan_id=127638]
                  :        +- *(9) HashAggregate(keys=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30], functions=[partial_sum(CASE WHEN (d_moy#32 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_sales_price#186 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#32 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_paid#192 as decimal(12,2))) * promote_precision(cast(ws_quantity#181 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END)], output=[w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30, sum#16320, isEmpty#16321, sum#16322, isEmpty#16323, sum#16324, isEmpty#16325, sum#16326, isEmpty#16327, sum#16328, isEmpty#16329, sum#16330, isEmpty#16331, sum#16332, isEmpty#16333, sum#16334, isEmpty#16335, sum#16336, isEmpty#16337, sum#16338, isEmpty#16339, sum#16340, isEmpty#16341, sum#16342, isEmpty#16343, sum#16344, isEmpty#16345, sum#16346, isEmpty#16347, sum#16348, isEmpty#16349, sum#16350, isEmpty#16351, sum#16352, isEmpty#16353, sum#16354, isEmpty#16355, sum#16356, isEmpty#16357, sum#16358, isEmpty#16359, sum#16360, isEmpty#16361, sum#16362, isEmpty#16363, sum#16364, isEmpty#16365, sum#16366, isEmpty#16367])
                  :           +- *(9) Project [ws_quantity#181, ws_ext_sales_price#186, ws_net_paid#192, w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30, d_moy#32]
                  :              +- *(9) BroadcastHashJoin [ws_ship_mode_sk#177], [sm_ship_mode_sk#15681], Inner, BuildRight, false
                  :                 :- *(9) Project [ws_ship_mode_sk#177, ws_quantity#181, ws_ext_sales_price#186, ws_net_paid#192, w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30, d_moy#32]
                  :                 :  +- *(9) BroadcastHashJoin [ws_sold_time_sk#164], [t_time_sk#15927], Inner, BuildRight, false
                  :                 :     :- *(9) Project [ws_sold_time_sk#164, ws_ship_mode_sk#177, ws_quantity#181, ws_ext_sales_price#186, ws_net_paid#192, w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021, d_year#30, d_moy#32]
                  :                 :     :  +- *(9) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                  :                 :     :     :- *(9) Project [ws_sold_date_sk#163, ws_sold_time_sk#164, ws_ship_mode_sk#177, ws_quantity#181, ws_ext_sales_price#186, ws_net_paid#192, w_warehouse_name#8011, w_warehouse_sq_ft#8012, w_city#8017, w_county#8018, w_state#8019, w_country#8021]
                  :                 :     :     :  +- *(9) BroadcastHashJoin [ws_warehouse_sk#178], [w_warehouse_sk#8009], Inner, BuildRight, false
                  :                 :     :     :     :- *(9) Filter (((isnotnull(ws_warehouse_sk#178) AND isnotnull(ws_sold_date_sk#163)) AND isnotnull(ws_sold_time_sk#164)) AND isnotnull(ws_ship_mode_sk#177))
                  :                 :     :     :     :  +- *(9) ColumnarToRow
                  :                 :     :     :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_sold_time_sk#164,ws_ship_mode_sk#177,ws_warehouse_sk#178,ws_quantity#181,ws_ext_sales_price#186,ws_net_paid#192] Batched: true, DataFilters: [isnotnull(ws_warehouse_sk#178), isnotnull(ws_sold_date_sk#163), isnotnull(ws_sold_time_sk#164), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_sold_date_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws..., ReadSchema: struct<ws_sold_date_sk:int,ws_sold_time_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_quantit...
                  :                 :     :     :     +- BroadcastQueryStage 0
                  :                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=126888]
                  :                 :     :     :           +- *(1) Filter isnotnull(w_warehouse_sk#8009)
                  :                 :     :     :              +- *(1) ColumnarToRow
                  :                 :     :     :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011,w_warehouse_sq_ft#8012,w_city#8017,w_county#8018,w_state#8019,w_country#8021] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:st...
                  :                 :     :     +- BroadcastQueryStage 1
                  :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=126905]
                  :                 :     :           +- *(2) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2001)) AND isnotnull(d_date_sk#24))
                  :                 :     :              +- *(2) ColumnarToRow
                  :                 :     :                 +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :                 :     +- BroadcastQueryStage 2
                  :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=126924]
                  :                 :           +- *(3) Project [t_time_sk#15927]
                  :                 :              +- *(3) Filter (((isnotnull(t_time#15929) AND (t_time#15929 >= 30838)) AND (t_time#15929 <= 59638)) AND isnotnull(t_time_sk#15927))
                  :                 :                 +- *(3) ColumnarToRow
                  :                 :                    +- FileScan parquet default.time_dim[t_time_sk#15927,t_time#15929] Batched: true, DataFilters: [isnotnull(t_time#15929), (t_time#15929 >= 30838), (t_time#15929 <= 59638), isnotnull(t_time_sk#1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,30838), LessThanOrEqual(t_time,59638), IsNotNull(t_..., ReadSchema: struct<t_time_sk:int,t_time:int>
                  :                 +- BroadcastQueryStage 3
                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=126945]
                  :                       +- *(4) Project [sm_ship_mode_sk#15681]
                  :                          +- *(4) Filter (sm_carrier#15685 IN (DHL                 ,BARIAN              ) AND isnotnull(sm_ship_mode_sk#15681))
                  :                             +- *(4) ColumnarToRow
                  :                                +- FileScan parquet default.ship_mode[sm_ship_mode_sk#15681,sm_carrier#15685] Batched: true, DataFilters: [sm_carrier#15685 IN (DHL                 ,BARIAN              ), isnotnull(sm_ship_mode_sk#15681)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/ship_mode], PartitionFilters: [], PushedFilters: [In(sm_carrier, [BARIAN              ,DHL                 ]), IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string>
                  +- *(12) HashAggregate(keys=[w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957], functions=[sum(CASE WHEN (d_moy#15959 = 1) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 2) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 3) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 4) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 5) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 6) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 7) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 8) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 9) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 10) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 12) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), sum(CASE WHEN (d_moy#15959 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END)], output=[w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, ship_carriers#15865, year#15866, jan_sales#15867, feb_sales#15868, mar_sales#15869, apr_sales#15870, may_sales#15871, jun_sales#15872, jul_sales#15873, aug_sales#15874, sep_sales#15875, oct_sales#15876, nov_sales#15877, dec_sales#15878, jan_net#15879, feb_net#15880, mar_net#15881, apr_net#15882, may_net#15883, jun_net#15884, jul_net#15885, aug_net#15886, sep_net#15887, oct_net#15888, nov_net#15889, dec_net#15890])
                     +- ShuffleQueryStage 13
                        +- Exchange hashpartitioning(w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957, 20), ENSURE_REQUIREMENTS, [plan_id=127699]
                           +- *(10) HashAggregate(keys=[w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957], functions=[partial_sum(CASE WHEN (d_moy#15959 = 1) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 2) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 3) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 4) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 5) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 6) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 7) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 8) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 9) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 10) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 12) THEN CheckOverflow((promote_precision(cast(cs_sales_price#218 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#15959 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_paid_inc_tax#227 as decimal(12,2))) * promote_precision(cast(cs_quantity#215 as decimal(12,2)))), DecimalType(18,2)) ELSE 0.00 END)], output=[w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957, sum#16416, isEmpty#16417, sum#16418, isEmpty#16419, sum#16420, isEmpty#16421, sum#16422, isEmpty#16423, sum#16424, isEmpty#16425, sum#16426, isEmpty#16427, sum#16428, isEmpty#16429, sum#16430, isEmpty#16431, sum#16432, isEmpty#16433, sum#16434, isEmpty#16435, sum#16436, isEmpty#16437, sum#16438, isEmpty#16439, sum#16440, isEmpty#16441, sum#16442, isEmpty#16443, sum#16444, isEmpty#16445, sum#16446, isEmpty#16447, sum#16448, isEmpty#16449, sum#16450, isEmpty#16451, sum#16452, isEmpty#16453, sum#16454, isEmpty#16455, sum#16456, isEmpty#16457, sum#16458, isEmpty#16459, sum#16460, isEmpty#16461, sum#16462, isEmpty#16463])
                              +- *(10) Project [cs_quantity#215, cs_sales_price#218, cs_net_paid_inc_tax#227, w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957, d_moy#15959]
                                 +- *(10) BroadcastHashJoin [cs_ship_mode_sk#210], [sm_ship_mode_sk#15989], Inner, BuildRight, false
                                    :- *(10) Project [cs_ship_mode_sk#210, cs_quantity#215, cs_sales_price#218, cs_net_paid_inc_tax#227, w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957, d_moy#15959]
                                    :  +- *(10) BroadcastHashJoin [cs_sold_time_sk#198], [t_time_sk#15979], Inner, BuildRight, false
                                    :     :- *(10) Project [cs_sold_time_sk#198, cs_ship_mode_sk#210, cs_quantity#215, cs_sales_price#218, cs_net_paid_inc_tax#227, w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949, d_year#15957, d_moy#15959]
                                    :     :  +- *(10) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#15951], Inner, BuildRight, false
                                    :     :     :- *(10) Project [cs_sold_date_sk#197, cs_sold_time_sk#198, cs_ship_mode_sk#210, cs_quantity#215, cs_sales_price#218, cs_net_paid_inc_tax#227, w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949]
                                    :     :     :  +- *(10) BroadcastHashJoin [cs_warehouse_sk#211], [w_warehouse_sk#15937], Inner, BuildRight, false
                                    :     :     :     :- *(10) Filter (((isnotnull(cs_warehouse_sk#211) AND isnotnull(cs_sold_date_sk#197)) AND isnotnull(cs_sold_time_sk#198)) AND isnotnull(cs_ship_mode_sk#210))
                                    :     :     :     :  +- *(10) ColumnarToRow
                                    :     :     :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_sold_time_sk#198,cs_ship_mode_sk#210,cs_warehouse_sk#211,cs_quantity#215,cs_sales_price#218,cs_net_paid_inc_tax#227] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#211), isnotnull(cs_sold_date_sk#197), isnotnull(cs_sold_time_sk#198), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_sold_time_sk), IsNotNull(cs..., ReadSchema: struct<cs_sold_date_sk:int,cs_sold_time_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_quantit...
                                    :     :     :     +- BroadcastQueryStage 5
                                    :     :     :        +- ReusedExchange [w_warehouse_sk#15937, w_warehouse_name#15939, w_warehouse_sq_ft#15940, w_city#15945, w_county#15946, w_state#15947, w_country#15949], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=126888]
                                    :     :     +- BroadcastQueryStage 7
                                    :     :        +- ReusedExchange [d_date_sk#15951, d_year#15957, d_moy#15959], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=126905]
                                    :     +- BroadcastQueryStage 9
                                    :        +- ReusedExchange [t_time_sk#15979], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=126924]
                                    +- BroadcastQueryStage 11
                                       +- ReusedExchange [sm_ship_mode_sk#15989], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=126945]


==== q67 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_category#17246 ASC NULLS FIRST,i_class#17247 ASC NULLS FIRST,i_brand#17248 ASC NULLS FIRST,i_product_name#17249 ASC NULLS FIRST,d_year#17250 ASC NULLS FIRST,d_qoy#17251 ASC NULLS FIRST,d_moy#17252 ASC NULLS FIRST,s_store_id#17253 ASC NULLS FIRST,sumsales#17232 ASC NULLS FIRST,rk#17233 ASC NULLS FIRST], output=[i_category#17246,i_class#17247,i_brand#17248,i_product_name#17249,d_year#17250,d_qoy#17251,d_moy#17252,s_store_id#17253,sumsales#17232,rk#17233])
   +- *(7) Filter (rk#17233 <= 100)
      +- Window [rank(sumsales#17232) windowspecdefinition(i_category#17246, sumsales#17232 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#17233], [i_category#17246], [sumsales#17232 DESC NULLS LAST]
         +- *(6) Sort [i_category#17246 ASC NULLS FIRST, sumsales#17232 DESC NULLS LAST], false, 0
            +- ShuffleQueryStage 4
               +- Exchange hashpartitioning(i_category#17246, 20), ENSURE_REQUIREMENTS, [plan_id=128326]
                  +- *(5) HashAggregate(keys=[i_category#17246, i_class#17247, i_brand#17248, i_product_name#17249, d_year#17250, d_qoy#17251, d_moy#17252, s_store_id#17253, spark_grouping_id#17245L], functions=[sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#427 as decimal(12,2))) * promote_precision(cast(ss_quantity#424 as decimal(12,2)))), DecimalType(18,2)), 0.00))], output=[i_category#17246, i_class#17247, i_brand#17248, i_product_name#17249, d_year#17250, d_qoy#17251, d_moy#17252, s_store_id#17253, sumsales#17232])
                     +- ShuffleQueryStage 3
                        +- Exchange hashpartitioning(i_category#17246, i_class#17247, i_brand#17248, i_product_name#17249, d_year#17250, d_qoy#17251, d_moy#17252, s_store_id#17253, spark_grouping_id#17245L, 20), ENSURE_REQUIREMENTS, [plan_id=128271]
                           +- *(4) HashAggregate(keys=[i_category#17246, i_class#17247, i_brand#17248, i_product_name#17249, d_year#17250, d_qoy#17251, d_moy#17252, s_store_id#17253, spark_grouping_id#17245L], functions=[partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#427 as decimal(12,2))) * promote_precision(cast(ss_quantity#424 as decimal(12,2)))), DecimalType(18,2)), 0.00))], output=[i_category#17246, i_class#17247, i_brand#17248, i_product_name#17249, d_year#17250, d_qoy#17251, d_moy#17252, s_store_id#17253, spark_grouping_id#17245L, sum#17272, isEmpty#17273])
                              +- *(4) Expand [[ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, i_product_name#458, d_year#30, d_qoy#34, d_moy#32, s_store_id#53, 0], [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, i_product_name#458, d_year#30, d_qoy#34, d_moy#32, null, 1], [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, i_product_name#458, d_year#30, d_qoy#34, null, null, 3], [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, i_product_name#458, d_year#30, null, null, null, 7], [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, i_product_name#458, null, null, null, null, 15], [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, null, null, null, null, null, 31], [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, null, null, null, null, null, null, 63], [ss_quantity#424, ss_sales_price#427, i_category#449, null, null, null, null, null, null, null, 127], [ss_quantity#424, ss_sales_price#427, null, null, null, null, null, null, null, null, 255]], [ss_quantity#424, ss_sales_price#427, i_category#17246, i_class#17247, i_brand#17248, i_product_name#17249, d_year#17250, d_qoy#17251, d_moy#17252, s_store_id#17253, spark_grouping_id#17245L]
                                 +- *(4) Project [ss_quantity#424, ss_sales_price#427, i_category#449, i_class#447, i_brand#445, i_product_name#458, d_year#30, d_qoy#34, d_moy#32, s_store_id#53]
                                    +- *(4) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                                       :- *(4) Project [ss_item_sk#416, ss_quantity#424, ss_sales_price#427, d_year#30, d_moy#32, d_qoy#34, s_store_id#53]
                                       :  +- *(4) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :     :- *(4) Project [ss_item_sk#416, ss_store_sk#421, ss_quantity#424, ss_sales_price#427, d_year#30, d_moy#32, d_qoy#34]
                                       :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                       :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_item_sk#416))
                                       :     :     :  +- *(4) ColumnarToRow
                                       :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_quantity#424,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421), isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(...
                                       :     :     +- BroadcastQueryStage 0
                                       :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=127976]
                                       :     :           +- *(1) Project [d_date_sk#24, d_year#30, d_moy#32, d_qoy#34]
                                       :     :              +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                                       :     :                 +- *(1) ColumnarToRow
                                       :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27,d_year#30,d_moy#32,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>
                                       :     +- BroadcastQueryStage 1
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=127995]
                                       :           +- *(2) Filter isnotnull(s_store_sk#52)
                                       :              +- *(2) ColumnarToRow
                                       :                 +- FileScan parquet default.store[s_store_sk#52,s_store_id#53] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                                       +- BroadcastQueryStage 2
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=128012]
                                             +- *(3) Filter isnotnull(i_item_sk#437)
                                                +- *(3) ColumnarToRow
                                                   +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_class#447,i_category#449,i_product_name#458] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>


==== q68 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_last_name#90 ASC NULLS FIRST,ss_ticket_number#423 ASC NULLS FIRST], output=[c_last_name#90,c_first_name#89,ca_city#17294,bought_city#17284,ss_ticket_number#423,extended_price#17285,extended_tax#17287,list_price#17286])
   +- *(8) Project [c_last_name#90, c_first_name#89, ca_city#17294, bought_city#17284, ss_ticket_number#423, extended_price#17285, extended_tax#17287, list_price#17286]
      +- *(8) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#17288], Inner, BuildRight, NOT (ca_city#17294 = bought_city#17284), false
         :- *(8) Project [ss_ticket_number#423, bought_city#17284, extended_price#17285, list_price#17286, extended_tax#17287, c_current_addr_sk#85, c_first_name#89, c_last_name#90]
         :  +- *(8) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
         :     :- *(8) HashAggregate(keys=[ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, ca_city#3723], functions=[sum(UnscaledValue(ss_ext_sales_price#429)), sum(UnscaledValue(ss_ext_list_price#431)), sum(UnscaledValue(ss_ext_tax#432))], output=[ss_ticket_number#423, ss_customer_sk#417, bought_city#17284, extended_price#17285, list_price#17286, extended_tax#17287])
         :     :  +- ShuffleQueryStage 7
         :     :     +- Exchange hashpartitioning(ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, ca_city#3723, 20), ENSURE_REQUIREMENTS, [plan_id=129143]
         :     :        +- *(7) HashAggregate(keys=[ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, ca_city#3723], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429)), partial_sum(UnscaledValue(ss_ext_list_price#431)), partial_sum(UnscaledValue(ss_ext_tax#432))], output=[ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, ca_city#3723, sum#17316L, sum#17317L, sum#17318L])
         :     :           +- *(7) Project [ss_customer_sk#417, ss_addr_sk#420, ss_ticket_number#423, ss_ext_sales_price#429, ss_ext_list_price#431, ss_ext_tax#432, ca_city#3723]
         :     :              +- *(7) BroadcastHashJoin [ss_addr_sk#420], [ca_address_sk#3717], Inner, BuildRight, false
         :     :                 :- *(7) Project [ss_customer_sk#417, ss_addr_sk#420, ss_ticket_number#423, ss_ext_sales_price#429, ss_ext_list_price#431, ss_ext_tax#432]
         :     :                 :  +- *(7) BroadcastHashJoin [ss_hdemo_sk#419], [hd_demo_sk#5551], Inner, BuildRight, false
         :     :                 :     :- *(7) Project [ss_customer_sk#417, ss_hdemo_sk#419, ss_addr_sk#420, ss_ticket_number#423, ss_ext_sales_price#429, ss_ext_list_price#431, ss_ext_tax#432]
         :     :                 :     :  +- *(7) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
         :     :                 :     :     :- *(7) Project [ss_customer_sk#417, ss_hdemo_sk#419, ss_addr_sk#420, ss_store_sk#421, ss_ticket_number#423, ss_ext_sales_price#429, ss_ext_list_price#431, ss_ext_tax#432]
         :     :                 :     :     :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :     :                 :     :     :     :- *(7) Filter ((((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_hdemo_sk#419)) AND isnotnull(ss_addr_sk#420)) AND isnotnull(ss_customer_sk#417))
         :     :                 :     :     :     :  +- *(7) ColumnarToRow
         :     :                 :     :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417,ss_hdemo_sk#419,ss_addr_sk#420,ss_store_sk#421,ss_ticket_number#423,ss_ext_sales_price#429,ss_ext_list_price#431,ss_ext_tax#432] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421), isnotnull(ss_hdemo_sk#419), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk..., ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_t...
         :     :                 :     :     :     +- BroadcastQueryStage 0
         :     :                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=128570]
         :     :                 :     :     :           +- *(1) Project [d_date_sk#24]
         :     :                 :     :     :              +- *(1) Filter ((((isnotnull(d_dom#33) AND (d_dom#33 >= 1)) AND (d_dom#33 <= 2)) AND d_year#30 IN (1999,2000,2001)) AND isnotnull(d_date_sk#24))
         :     :                 :     :     :                 +- *(1) ColumnarToRow
         :     :                 :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_dom#33] Batched: true, DataFilters: [isnotnull(d_dom#33), (d_dom#33 >= 1), (d_dom#33 <= 2), d_year#30 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>
         :     :                 :     :     +- BroadcastQueryStage 1
         :     :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=128591]
         :     :                 :     :           +- *(2) Project [s_store_sk#52]
         :     :                 :     :              +- *(2) Filter (s_city#74 IN (Midway,Fairview) AND isnotnull(s_store_sk#52))
         :     :                 :     :                 +- *(2) ColumnarToRow
         :     :                 :     :                    +- FileScan parquet default.store[s_store_sk#52,s_city#74] Batched: true, DataFilters: [s_city#74 IN (Midway,Fairview), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>
         :     :                 :     +- BroadcastQueryStage 2
         :     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=128612]
         :     :                 :           +- *(3) Project [hd_demo_sk#5551]
         :     :                 :              +- *(3) Filter (((hd_dep_count#5554 = 4) OR (hd_vehicle_count#5555 = 3)) AND isnotnull(hd_demo_sk#5551))
         :     :                 :                 +- *(3) ColumnarToRow
         :     :                 :                    +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_dep_count#5554,hd_vehicle_count#5555] Batched: true, DataFilters: [((hd_dep_count#5554 = 4) OR (hd_vehicle_count#5555 = 3)), isnotnull(hd_demo_sk#5551)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>
         :     :                 +- BroadcastQueryStage 3
         :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=128631]
         :     :                       +- *(4) Filter (isnotnull(ca_address_sk#3717) AND isnotnull(ca_city#3723))
         :     :                          +- *(4) ColumnarToRow
         :     :                             +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_city#3723] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717), isnotnull(ca_city#3723)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>
         :     +- BroadcastQueryStage 4
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=128655]
         :           +- *(5) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
         :              +- *(5) ColumnarToRow
         :                 +- FileScan parquet default.customer[c_customer_sk#81,c_current_addr_sk#85,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>
         +- BroadcastQueryStage 6
            +- ReusedExchange [ca_address_sk#17288, ca_city#17294], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=128631]


==== q70 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#17329 DESC NULLS LAST,CASE WHEN (lochierarchy#17329 = 0) THEN s_state#17438 END ASC NULLS FIRST,rank_within_parent#17330 ASC NULLS FIRST], output=[total_sum#17328,s_state#17438,s_county#17439,lochierarchy#17329,rank_within_parent#17330])
   +- *(13) Project [total_sum#17328, s_state#17438, s_county#17439, lochierarchy#17329, rank_within_parent#17330]
      +- Window [rank(_w3#17454) windowspecdefinition(_w1#17452, _w2#17453, _w3#17454 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#17330], [_w1#17452, _w2#17453], [_w3#17454 DESC NULLS LAST]
         +- *(12) Sort [_w1#17452 ASC NULLS FIRST, _w2#17453 ASC NULLS FIRST, _w3#17454 DESC NULLS LAST], false, 0
            +- ShuffleQueryStage 8
               +- Exchange hashpartitioning(_w1#17452, _w2#17453, 20), ENSURE_REQUIREMENTS, [plan_id=130331]
                  +- *(11) HashAggregate(keys=[s_state#17438, s_county#17439, spark_grouping_id#17437L], functions=[sum(UnscaledValue(ss_net_profit#436))], output=[total_sum#17328, s_state#17438, s_county#17439, lochierarchy#17329, _w1#17452, _w2#17453, _w3#17454])
                     +- ShuffleQueryStage 7
                        +- Exchange hashpartitioning(s_state#17438, s_county#17439, spark_grouping_id#17437L, 20), ENSURE_REQUIREMENTS, [plan_id=130278]
                           +- *(10) HashAggregate(keys=[s_state#17438, s_county#17439, spark_grouping_id#17437L], functions=[partial_sum(UnscaledValue(ss_net_profit#436))], output=[s_state#17438, s_county#17439, spark_grouping_id#17437L, sum#17473L])
                              +- *(10) Expand [[ss_net_profit#436, s_state#76, s_county#75, 0], [ss_net_profit#436, s_state#76, null, 1], [ss_net_profit#436, null, null, 3]], [ss_net_profit#436, s_state#17438, s_county#17439, spark_grouping_id#17437L]
                                 +- *(10) Project [ss_net_profit#436, s_state#76, s_county#75]
                                    +- *(10) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :- *(10) Project [ss_store_sk#421, ss_net_profit#436]
                                       :  +- *(10) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                       :     :- *(10) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
                                       :     :  +- *(10) ColumnarToRow
                                       :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_store_sk#421,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                                       :     +- BroadcastQueryStage 0
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=129474]
                                       :           +- *(1) Project [d_date_sk#24]
                                       :              +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                                       :                 +- *(1) ColumnarToRow
                                       :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                                       +- BroadcastQueryStage 6
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=130152]
                                             +- *(9) SortMergeJoin [s_state#76], [s_state#17400], LeftSemi
                                                :- *(6) Sort [s_state#76 ASC NULLS FIRST], false, 0
                                                :  +- ShuffleQueryStage 1
                                                :     +- Exchange hashpartitioning(s_state#76, 20), ENSURE_REQUIREMENTS, [plan_id=129493]
                                                :        +- *(2) Filter isnotnull(s_store_sk#52)
                                                :           +- *(2) ColumnarToRow
                                                :              +- FileScan parquet default.store[s_store_sk#52,s_county#75,s_state#76] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>
                                                +- *(8) Project [s_state#17400]
                                                   +- *(8) Filter (ranking#17332 <= 5)
                                                      +- Window [rank(_w2#17346) windowspecdefinition(s_state#17400, _w2#17346 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#17332], [s_state#17400], [_w2#17346 DESC NULLS LAST]
                                                         +- *(7) Sort [s_state#17400 ASC NULLS FIRST, _w2#17346 DESC NULLS LAST], false, 0
                                                            +- *(7) HashAggregate(keys=[s_state#17400], functions=[sum(UnscaledValue(ss_net_profit#17375))], output=[s_state#17400, s_state#17400, _w2#17346])
                                                               +- ShuffleQueryStage 5
                                                                  +- Exchange hashpartitioning(s_state#17400, 20), ENSURE_REQUIREMENTS, [plan_id=129987]
                                                                     +- *(5) HashAggregate(keys=[s_state#17400], functions=[partial_sum(UnscaledValue(ss_net_profit#17375))], output=[s_state#17400, sum#17475L])
                                                                        +- *(5) Project [ss_net_profit#17375, s_state#17400]
                                                                           +- *(5) BroadcastHashJoin [ss_sold_date_sk#17353], [d_date_sk#17405], Inner, BuildRight, false
                                                                              :- *(5) Project [ss_sold_date_sk#17353, ss_net_profit#17375, s_state#17400]
                                                                              :  +- *(5) BroadcastHashJoin [ss_store_sk#17360], [s_store_sk#17376], Inner, BuildRight, false
                                                                              :     :- *(5) Filter (isnotnull(ss_store_sk#17360) AND isnotnull(ss_sold_date_sk#17353))
                                                                              :     :  +- *(5) ColumnarToRow
                                                                              :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#17353,ss_store_sk#17360,ss_net_profit#17375] Batched: true, DataFilters: [isnotnull(ss_store_sk#17360), isnotnull(ss_sold_date_sk#17353)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>
                                                                              :     +- BroadcastQueryStage 2
                                                                              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=129510]
                                                                              :           +- *(3) Filter isnotnull(s_store_sk#17376)
                                                                              :              +- *(3) ColumnarToRow
                                                                              :                 +- FileScan parquet default.store[s_store_sk#17376,s_state#17400] Batched: true, DataFilters: [isnotnull(s_store_sk#17376)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                                                                              +- BroadcastQueryStage 4
                                                                                 +- ReusedExchange [d_date_sk#17405], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=129474]


==== q71 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(11) Sort [ext_price#17526 DESC NULLS LAST, brand_id#17524 ASC NULLS FIRST], true, 0
   +- ShuffleQueryStage 8
      +- Exchange rangepartitioning(ext_price#17526 DESC NULLS LAST, brand_id#17524 ASC NULLS FIRST, 20), ENSURE_REQUIREMENTS, [plan_id=131104]
         +- *(10) HashAggregate(keys=[i_brand#445, i_brand_id#444, t_hour#15930, t_minute#15931], functions=[sum(UnscaledValue(ext_price#17512))], output=[brand_id#17524, brand#17525, t_hour#15930, t_minute#15931, ext_price#17526])
            +- ShuffleQueryStage 7
               +- Exchange hashpartitioning(i_brand#445, i_brand_id#444, t_hour#15930, t_minute#15931, 20), ENSURE_REQUIREMENTS, [plan_id=131039]
                  +- *(9) HashAggregate(keys=[i_brand#445, i_brand_id#444, t_hour#15930, t_minute#15931], functions=[partial_sum(UnscaledValue(ext_price#17512))], output=[i_brand#445, i_brand_id#444, t_hour#15930, t_minute#15931, sum#17592L])
                     +- *(9) Project [i_brand_id#444, i_brand#445, ext_price#17512, t_hour#15930, t_minute#15931]
                        +- *(9) BroadcastHashJoin [time_sk#17515], [t_time_sk#15927], Inner, BuildRight, false
                           :- *(9) Project [i_brand_id#444, i_brand#445, ext_price#17512, time_sk#17515]
                           :  +- *(9) BroadcastHashJoin [i_item_sk#437], [sold_item_sk#17514], Inner, BuildLeft, false
                           :     :- BroadcastQueryStage 0
                           :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130602]
                           :     :     +- *(1) Project [i_item_sk#437, i_brand_id#444, i_brand#445]
                           :     :        +- *(1) Filter ((isnotnull(i_manager_id#457) AND (i_manager_id#457 = 1)) AND isnotnull(i_item_sk#437))
                           :     :           +- *(1) ColumnarToRow
                           :     :              +- FileScan parquet default.item[i_item_sk#437,i_brand_id#444,i_brand#445,i_manager_id#457] Batched: true, DataFilters: [isnotnull(i_manager_id#457), (i_manager_id#457 = 1), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>
                           :     +- Union
                           :        :- *(6) Project [ws_ext_sales_price#186 AS ext_price#17512, ws_item_sk#166 AS sold_item_sk#17514, ws_sold_time_sk#164 AS time_sk#17515]
                           :        :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                           :        :     :- *(6) Filter ((isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_item_sk#166)) AND isnotnull(ws_sold_time_sk#164))
                           :        :     :  +- *(6) ColumnarToRow
                           :        :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_sold_time_sk#164,ws_item_sk#166,ws_ext_sales_price#186] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_item_sk#166), isnotnull(ws_sold_time_sk#164)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>
                           :        :     +- BroadcastQueryStage 1
                           :        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130621]
                           :        :           +- *(2) Project [d_date_sk#24]
                           :        :              +- *(2) Filter ((((isnotnull(d_moy#32) AND isnotnull(d_year#30)) AND (d_moy#32 = 11)) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#24))
                           :        :                 +- *(2) ColumnarToRow
                           :        :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_moy#32), isnotnull(d_year#30), (d_moy#32 = 11), (d_year#30 = 1999), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                           :        :- *(7) Project [cs_ext_sales_price#220 AS ext_price#17516, cs_item_sk#212 AS sold_item_sk#17518, cs_sold_time_sk#198 AS time_sk#17519]
                           :        :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#17527], Inner, BuildRight, false
                           :        :     :- *(7) Filter ((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_time_sk#198))
                           :        :     :  +- *(7) ColumnarToRow
                           :        :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_sold_time_sk#198,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_item_sk#212), isnotnull(cs_sold_time_sk#198)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
                           :        :     +- BroadcastQueryStage 3
                           :        :        +- ReusedExchange [d_date_sk#17527], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130621]
                           :        +- *(8) Project [ss_ext_sales_price#429 AS ext_price#17520, ss_item_sk#416 AS sold_item_sk#17522, ss_sold_time_sk#415 AS time_sk#17523]
                           :           +- *(8) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#17555], Inner, BuildRight, false
                           :              :- *(8) Filter ((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_sold_time_sk#415))
                           :              :  +- *(8) ColumnarToRow
                           :              :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_sold_time_sk#415,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_item_sk#416), isnotnull(ss_sold_time_sk#415)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
                           :              +- BroadcastQueryStage 5
                           :                 +- ReusedExchange [d_date_sk#17555], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130621]
                           +- BroadcastQueryStage 6
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130691]
                                 +- *(5) Project [t_time_sk#15927, t_hour#15930, t_minute#15931]
                                    +- *(5) Filter (((t_meal_time#15936 = breakfast           ) OR (t_meal_time#15936 = dinner              )) AND isnotnull(t_time_sk#15927))
                                       +- *(5) ColumnarToRow
                                          +- FileScan parquet default.time_dim[t_time_sk#15927,t_hour#15930,t_minute#15931,t_meal_time#15936] Batched: true, DataFilters: [((t_meal_time#15936 = breakfast           ) OR (t_meal_time#15936 = dinner              )), isno..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [Or(EqualTo(t_meal_time,breakfast           ),EqualTo(t_meal_time,dinner              )), IsNotNu..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>


==== q72 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[total_cnt#17600L DESC NULLS LAST,i_item_desc#441 ASC NULLS FIRST,w_warehouse_name#8011 ASC NULLS FIRST,d_week_seq#28 ASC NULLS FIRST], output=[i_item_desc#441,w_warehouse_name#8011,d_week_seq#28,no_promo#17598L,promo#17599L,total_cnt#17600L])
   +- *(15) HashAggregate(keys=[i_item_desc#441, w_warehouse_name#8011, d_week_seq#28], functions=[count(1)], output=[i_item_desc#441, w_warehouse_name#8011, d_week_seq#28, no_promo#17598L, promo#17599L, total_cnt#17600L])
      +- ShuffleQueryStage 11
         +- Exchange hashpartitioning(i_item_desc#441, w_warehouse_name#8011, d_week_seq#28, 20), ENSURE_REQUIREMENTS, [plan_id=133037]
            +- *(14) HashAggregate(keys=[i_item_desc#441, w_warehouse_name#8011, d_week_seq#28], functions=[partial_count(1)], output=[i_item_desc#441, w_warehouse_name#8011, d_week_seq#28, count#17669L])
               +- *(14) Project [w_warehouse_name#8011, i_item_desc#441, d_week_seq#28]
                  +- *(14) BroadcastHashJoin [cs_item_sk#212, cs_order_number#214], [cr_item_sk#3293, cr_order_number#3307], LeftOuter, BuildRight, false
                     :- *(14) Project [cs_item_sk#212, cs_order_number#214, w_warehouse_name#8011, i_item_desc#441, d_week_seq#28]
                     :  +- *(14) BroadcastHashJoin [cs_promo_sk#213], [p_promo_sk#3642], LeftOuter, BuildRight, false
                     :     :- *(14) Project [cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, w_warehouse_name#8011, i_item_desc#441, d_week_seq#28]
                     :     :  +- *(14) BroadcastHashJoin [cs_ship_date_sk#199], [d_date_sk#17630], Inner, BuildRight, (d_date#17632 > date_add(d_date#26, 5)), false
                     :     :     :- *(14) Project [cs_ship_date_sk#199, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, w_warehouse_name#8011, i_item_desc#441, d_date#26, d_week_seq#28]
                     :     :     :  +- *(14) BroadcastHashJoin [d_week_seq#28, inv_date_sk#8005], [d_week_seq#17606, d_date_sk#17602], Inner, BuildRight, false
                     :     :     :     :- *(14) Project [cs_ship_date_sk#199, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, inv_date_sk#8005, w_warehouse_name#8011, i_item_desc#441, d_date#26, d_week_seq#28]
                     :     :     :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#24], Inner, BuildRight, false
                     :     :     :     :     :- *(14) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, inv_date_sk#8005, w_warehouse_name#8011, i_item_desc#441]
                     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_hdemo_sk#202], [hd_demo_sk#5551], Inner, BuildRight, false
                     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_bill_hdemo_sk#202, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, inv_date_sk#8005, w_warehouse_name#8011, i_item_desc#441]
                     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_cdemo_sk#201], [cd_demo_sk#3633], Inner, BuildRight, false
                     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_bill_cdemo_sk#201, cs_bill_hdemo_sk#202, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, inv_date_sk#8005, w_warehouse_name#8011, i_item_desc#441]
                     :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#437], Inner, BuildRight, false
                     :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_bill_cdemo_sk#201, cs_bill_hdemo_sk#202, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, inv_date_sk#8005, w_warehouse_name#8011]
                     :     :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [inv_warehouse_sk#8007], [w_warehouse_sk#8009], Inner, BuildRight, false
                     :     :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_bill_cdemo_sk#201, cs_bill_hdemo_sk#202, cs_item_sk#212, cs_promo_sk#213, cs_order_number#214, inv_date_sk#8005, inv_warehouse_sk#8007]
                     :     :     :     :     :     :     :     :     :  +- *(14) SortMergeJoin [cs_item_sk#212], [inv_item_sk#8006], Inner, (inv_quantity_on_hand#8008 < cs_quantity#215)
                     :     :     :     :     :     :     :     :     :     :- *(12) Sort [cs_item_sk#212 ASC NULLS FIRST], false, 0
                     :     :     :     :     :     :     :     :     :     :  +- ShuffleQueryStage 0
                     :     :     :     :     :     :     :     :     :     :     +- Exchange hashpartitioning(cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=131476]
                     :     :     :     :     :     :     :     :     :     :        +- *(1) Filter (((((isnotnull(cs_quantity#215) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_bill_cdemo_sk#201)) AND isnotnull(cs_bill_hdemo_sk#202)) AND isnotnull(cs_sold_date_sk#197)) AND isnotnull(cs_ship_date_sk#199))
                     :     :     :     :     :     :     :     :     :     :           +- *(1) ColumnarToRow
                     :     :     :     :     :     :     :     :     :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_ship_date_sk#199,cs_bill_cdemo_sk#201,cs_bill_hdemo_sk#202,cs_item_sk#212,cs_promo_sk#213,cs_order_number#214,cs_quantity#215] Batched: true, DataFilters: [isnotnull(cs_quantity#215), isnotnull(cs_item_sk#212), isnotnull(cs_bill_cdemo_sk#201), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hd..., ReadSchema: struct<cs_sold_date_sk:int,cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_...
                     :     :     :     :     :     :     :     :     :     +- *(13) Sort [inv_item_sk#8006 ASC NULLS FIRST], false, 0
                     :     :     :     :     :     :     :     :     :        +- ShuffleQueryStage 1
                     :     :     :     :     :     :     :     :     :           +- Exchange hashpartitioning(inv_item_sk#8006, 20), ENSURE_REQUIREMENTS, [plan_id=131493]
                     :     :     :     :     :     :     :     :     :              +- *(2) Filter (((isnotnull(inv_quantity_on_hand#8008) AND isnotnull(inv_item_sk#8006)) AND isnotnull(inv_warehouse_sk#8007)) AND isnotnull(inv_date_sk#8005))
                     :     :     :     :     :     :     :     :     :                 +- *(2) ColumnarToRow
                     :     :     :     :     :     :     :     :     :                    +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_warehouse_sk#8007,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#8008), isnotnull(inv_item_sk#8006), isnotnull(inv_warehouse_sk#80..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(..., ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>
                     :     :     :     :     :     :     :     :     +- BroadcastQueryStage 2
                     :     :     :     :     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=131512]
                     :     :     :     :     :     :     :     :           +- *(3) Filter isnotnull(w_warehouse_sk#8009)
                     :     :     :     :     :     :     :     :              +- *(3) ColumnarToRow
                     :     :     :     :     :     :     :     :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
                     :     :     :     :     :     :     :     +- BroadcastQueryStage 3
                     :     :     :     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=131529]
                     :     :     :     :     :     :     :           +- *(4) Filter isnotnull(i_item_sk#437)
                     :     :     :     :     :     :     :              +- *(4) ColumnarToRow
                     :     :     :     :     :     :     :                 +- FileScan parquet default.item[i_item_sk#437,i_item_desc#441] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>
                     :     :     :     :     :     :     +- BroadcastQueryStage 4
                     :     :     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=131548]
                     :     :     :     :     :     :           +- *(5) Project [cd_demo_sk#3633]
                     :     :     :     :     :     :              +- *(5) Filter ((isnotnull(cd_marital_status#3635) AND (cd_marital_status#3635 = D)) AND isnotnull(cd_demo_sk#3633))
                     :     :     :     :     :     :                 +- *(5) ColumnarToRow
                     :     :     :     :     :     :                    +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_marital_status#3635] Batched: true, DataFilters: [isnotnull(cd_marital_status#3635), (cd_marital_status#3635 = D), isnotnull(cd_demo_sk#3633)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,D), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>
                     :     :     :     :     :     +- BroadcastQueryStage 5
                     :     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=131569]
                     :     :     :     :     :           +- *(6) Project [hd_demo_sk#5551]
                     :     :     :     :     :              +- *(6) Filter ((isnotnull(hd_buy_potential#5553) AND (hd_buy_potential#5553 = >10000         )) AND isnotnull(hd_demo_sk#5551))
                     :     :     :     :     :                 +- *(6) ColumnarToRow
                     :     :     :     :     :                    +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_buy_potential#5553] Batched: true, DataFilters: [isnotnull(hd_buy_potential#5553), (hd_buy_potential#5553 = >10000         ), isnotnull(hd_demo_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,>10000         ), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>
                     :     :     :     :     +- BroadcastQueryStage 6
                     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=131590]
                     :     :     :     :           +- *(7) Project [d_date_sk#24, d_date#26, d_week_seq#28]
                     :     :     :     :              +- *(7) Filter ((((isnotnull(d_year#30) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#24)) AND isnotnull(d_week_seq#28)) AND isnotnull(d_date#26))
                     :     :     :     :                 +- *(7) ColumnarToRow
                     :     :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26,d_week_seq#28,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 1999), isnotnull(d_date_sk#24), isnotnull(d_week_seq#28), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>
                     :     :     :     +- BroadcastQueryStage 7
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=131609]
                     :     :     :           +- *(8) Filter (isnotnull(d_week_seq#17606) AND isnotnull(d_date_sk#17602))
                     :     :     :              +- *(8) ColumnarToRow
                     :     :     :                 +- FileScan parquet default.date_dim[d_date_sk#17602,d_week_seq#17606] Batched: true, DataFilters: [isnotnull(d_week_seq#17606), isnotnull(d_date_sk#17602)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>
                     :     :     +- BroadcastQueryStage 8
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=131626]
                     :     :           +- *(9) Filter (isnotnull(d_date#17632) AND isnotnull(d_date_sk#17630))
                     :     :              +- *(9) ColumnarToRow
                     :     :                 +- FileScan parquet default.date_dim[d_date_sk#17630,d_date#17632] Batched: true, DataFilters: [isnotnull(d_date#17632), isnotnull(d_date_sk#17630)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
                     :     +- BroadcastQueryStage 9
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=131643]
                     :           +- *(10) Filter isnotnull(p_promo_sk#3642)
                     :              +- *(10) ColumnarToRow
                     :                 +- FileScan parquet default.promotion[p_promo_sk#3642] Batched: true, DataFilters: [isnotnull(p_promo_sk#3642)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int>
                     +- BroadcastQueryStage 10
                        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[1, int, false] as bigint) & 4294967295))),false), [plan_id=131660]
                           +- *(11) Filter (isnotnull(cr_item_sk#3293) AND isnotnull(cr_order_number#3307))
                              +- *(11) ColumnarToRow
                                 +- FileScan parquet default.catalog_returns[cr_item_sk#3293,cr_order_number#3307] Batched: true, DataFilters: [isnotnull(cr_item_sk#3293), isnotnull(cr_order_number#3307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int>


==== q73 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   AQEShuffleRead local
   +- ShuffleQueryStage 5
      +- Exchange rangepartitioning(cnt#17670L DESC NULLS LAST, 20), ENSURE_REQUIREMENTS, [plan_id=133755]
         +- *(6) Project [c_last_name#90, c_first_name#89, c_salutation#88, c_preferred_cust_flag#91, ss_ticket_number#423, cnt#17670L]
            +- *(6) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
               :- *(6) Filter ((cnt#17670L >= 1) AND (cnt#17670L <= 5))
               :  +- *(6) HashAggregate(keys=[ss_ticket_number#423, ss_customer_sk#417], functions=[count(1)], output=[ss_ticket_number#423, ss_customer_sk#417, cnt#17670L])
               :     +- ShuffleQueryStage 4
               :        +- Exchange hashpartitioning(ss_ticket_number#423, ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=133689]
               :           +- *(5) HashAggregate(keys=[ss_ticket_number#423, ss_customer_sk#417], functions=[partial_count(1)], output=[ss_ticket_number#423, ss_customer_sk#417, count#17679L])
               :              +- *(5) Project [ss_customer_sk#417, ss_ticket_number#423]
               :                 +- *(5) BroadcastHashJoin [ss_hdemo_sk#419], [hd_demo_sk#5551], Inner, BuildRight, false
               :                    :- *(5) Project [ss_customer_sk#417, ss_hdemo_sk#419, ss_ticket_number#423]
               :                    :  +- *(5) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
               :                    :     :- *(5) Project [ss_customer_sk#417, ss_hdemo_sk#419, ss_store_sk#421, ss_ticket_number#423]
               :                    :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
               :                    :     :     :- *(5) Filter (((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_hdemo_sk#419)) AND isnotnull(ss_customer_sk#417))
               :                    :     :     :  +- *(5) ColumnarToRow
               :                    :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417,ss_hdemo_sk#419,ss_store_sk#421,ss_ticket_number#423] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421), isnotnull(ss_hdemo_sk#419), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_store_sk:int,ss_ticket_number:int>
               :                    :     :     +- BroadcastQueryStage 0
               :                    :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=133294]
               :                    :     :           +- *(1) Project [d_date_sk#24]
               :                    :     :              +- *(1) Filter ((((isnotnull(d_dom#33) AND (d_dom#33 >= 1)) AND (d_dom#33 <= 2)) AND d_year#30 IN (1999,2000,2001)) AND isnotnull(d_date_sk#24))
               :                    :     :                 +- *(1) ColumnarToRow
               :                    :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_dom#33] Batched: true, DataFilters: [isnotnull(d_dom#33), (d_dom#33 >= 1), (d_dom#33 <= 2), d_year#30 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>
               :                    :     +- BroadcastQueryStage 1
               :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=133315]
               :                    :           +- *(2) Project [s_store_sk#52]
               :                    :              +- *(2) Filter (s_county#75 IN (Williamson County,Franklin Parish,Bronx County,Orange County) AND isnotnull(s_store_sk#52))
               :                    :                 +- *(2) ColumnarToRow
               :                    :                    +- FileScan parquet default.store[s_store_sk#52,s_county#75] Batched: true, DataFilters: [s_county#75 IN (Williamson County,Franklin Parish,Bronx County,Orange County), isnotnull(s_store..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [In(s_county, [Bronx County,Franklin Parish,Orange County,Williamson County]), IsNotNull(s_store_..., ReadSchema: struct<s_store_sk:int,s_county:string>
               :                    +- BroadcastQueryStage 2
               :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=133336]
               :                          +- *(3) Project [hd_demo_sk#5551]
               :                             +- *(3) Filter ((((isnotnull(hd_vehicle_count#5555) AND ((hd_buy_potential#5553 = >10000         ) OR (hd_buy_potential#5553 = unknown        ))) AND (hd_vehicle_count#5555 > 0)) AND CASE WHEN (hd_vehicle_count#5555 > 0) THEN ((cast(hd_dep_count#5554 as double) / cast(hd_vehicle_count#5555 as double)) > 1.0) END) AND isnotnull(hd_demo_sk#5551))
               :                                +- *(3) ColumnarToRow
               :                                   +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_buy_potential#5553,hd_dep_count#5554,hd_vehicle_count#5555] Batched: true, DataFilters: [isnotnull(hd_vehicle_count#5555), ((hd_buy_potential#5553 = >10000         ) OR (hd_buy_potentia..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_vehicle_count), Or(EqualTo(hd_buy_potential,>10000         ),EqualTo(hd_buy_potenti..., ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>
               +- BroadcastQueryStage 3
                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=133359]
                     +- *(4) Filter isnotnull(c_customer_sk#81)
                        +- *(4) ColumnarToRow
                           +- FileScan parquet default.customer[c_customer_sk#81,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_c...


==== q76 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#17680 ASC NULLS FIRST,col_name#17681 ASC NULLS FIRST,d_year#30 ASC NULLS FIRST,d_qoy#34 ASC NULLS FIRST,i_category#449 ASC NULLS FIRST], output=[channel#17680,col_name#17681,d_year#30,d_qoy#34,i_category#449,sales_cnt#17689L,sales_amt#17690])
   +- *(12) HashAggregate(keys=[channel#17680, col_name#17681, d_year#30, d_qoy#34, i_category#449], functions=[count(1), sum(UnscaledValue(ext_sales_price#17682))], output=[channel#17680, col_name#17681, d_year#30, d_qoy#34, i_category#449, sales_cnt#17689L, sales_amt#17690])
      +- ShuffleQueryStage 11
         +- Exchange hashpartitioning(channel#17680, col_name#17681, d_year#30, d_qoy#34, i_category#449, 20), ENSURE_REQUIREMENTS, [plan_id=134828]
            +- *(11) HashAggregate(keys=[channel#17680, col_name#17681, d_year#30, d_qoy#34, i_category#449], functions=[partial_count(1), partial_sum(UnscaledValue(ext_sales_price#17682))], output=[channel#17680, col_name#17681, d_year#30, d_qoy#34, i_category#449, count#17806L, sum#17807L])
               +- Union
                  :- *(8) Project [store AS channel#17680, ss_store_sk#421 AS col_name#17681, d_year#30, d_qoy#34, i_category#449, ss_ext_sales_price#429 AS ext_sales_price#17682]
                  :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :     :- *(8) Project [ss_sold_date_sk#414, ss_store_sk#421, ss_ext_sales_price#429, i_category#449]
                  :     :  +- *(8) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                  :     :     :- *(8) Filter ((isnull(ss_store_sk#421) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_sold_date_sk#414))
                  :     :     :  +- *(8) ColumnarToRow
                  :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_ext_sales_price#429] Batched: true, DataFilters: [isnull(ss_store_sk#421), isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>
                  :     :     +- BroadcastQueryStage 0
                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=134030]
                  :     :           +- *(1) Filter isnotnull(i_item_sk#437)
                  :     :              +- *(1) ColumnarToRow
                  :     :                 +- FileScan parquet default.item[i_item_sk#437,i_category#449] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_category:string>
                  :     +- BroadcastQueryStage 1
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=134047]
                  :           +- *(2) Filter isnotnull(d_date_sk#24)
                  :              +- *(2) ColumnarToRow
                  :                 +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                  :- *(9) Project [web AS channel#17683, ws_ship_customer_sk#171 AS col_name#17684, d_year#17720, d_qoy#17724, i_category#17704, ws_ext_sales_price#186 AS ext_sales_price#17685]
                  :  +- *(9) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#17714], Inner, BuildRight, false
                  :     :- *(9) Project [ws_sold_date_sk#163, ws_ship_customer_sk#171, ws_ext_sales_price#186, i_category#17704]
                  :     :  +- *(9) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#17692], Inner, BuildLeft, false
                  :     :     :- BroadcastQueryStage 10
                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [plan_id=134411]
                  :     :     :     +- AQEShuffleRead local
                  :     :     :        +- ShuffleQueryStage 2
                  :     :     :           +- Exchange hashpartitioning(ws_item_sk#166, 20), ENSURE_REQUIREMENTS, [plan_id=134064]
                  :     :     :              +- *(3) Filter ((isnull(ws_ship_customer_sk#171) AND isnotnull(ws_item_sk#166)) AND isnotnull(ws_sold_date_sk#163))
                  :     :     :                 +- *(3) ColumnarToRow
                  :     :     :                    +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_ship_customer_sk#171,ws_ext_sales_price#186] Batched: true, DataFilters: [isnull(ws_ship_customer_sk#171), isnotnull(ws_item_sk#166), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNull(ws_ship_customer_sk), IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ship_customer_sk:int,ws_ext_sales_price:decimal(7,2)>
                  :     :     +- AQEShuffleRead local
                  :     :        +- ShuffleQueryStage 3
                  :     :           +- Exchange hashpartitioning(i_item_sk#17692, 20), ENSURE_REQUIREMENTS, [plan_id=134081]
                  :     :              +- *(4) Filter isnotnull(i_item_sk#17692)
                  :     :                 +- *(4) ColumnarToRow
                  :     :                    +- FileScan parquet default.item[i_item_sk#17692,i_category#17704] Batched: true, DataFilters: [isnotnull(i_item_sk#17692)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_category:string>
                  :     +- BroadcastQueryStage 5
                  :        +- ReusedExchange [d_date_sk#17714, d_year#17720, d_qoy#17724], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=134047]
                  +- *(10) Project [catalog AS channel#17686, cs_ship_addr_sk#207 AS col_name#17687, d_year#17770, d_qoy#17774, i_category#17754, cs_ext_sales_price#220 AS ext_sales_price#17688]
                     +- *(10) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#17764], Inner, BuildRight, false
                        :- *(10) Project [cs_sold_date_sk#197, cs_ship_addr_sk#207, cs_ext_sales_price#220, i_category#17754]
                        :  +- *(10) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#17742], Inner, BuildRight, false
                        :     :- *(10) Filter ((isnull(cs_ship_addr_sk#207) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_sold_date_sk#197))
                        :     :  +- *(10) ColumnarToRow
                        :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_ship_addr_sk#207,cs_item_sk#212,cs_ext_sales_price#220] Batched: true, DataFilters: [isnull(cs_ship_addr_sk#207), isnotnull(cs_item_sk#212), isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNull(cs_ship_addr_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_ship_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>
                        :     +- BroadcastQueryStage 7
                        :        +- ReusedExchange [i_item_sk#17742, i_category#17754], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=134030]
                        +- BroadcastQueryStage 9
                           +- ReusedExchange [d_date_sk#17764, d_year#17770, d_qoy#17774], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=134047]


==== q77 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#18062 ASC NULLS FIRST,id#18063 ASC NULLS FIRST], output=[channel#18062,id#18063,sales#17824,returns#17825,profit#17826])
   +- *(29) HashAggregate(keys=[channel#18062, id#18063, spark_grouping_id#18061L], functions=[sum(sales#17827), sum(returns#17815), sum(profit#17816)], output=[channel#18062, id#18063, sales#17824, returns#17825, profit#17826])
      +- ShuffleQueryStage 27
         +- Exchange hashpartitioning(channel#18062, id#18063, spark_grouping_id#18061L, 20), ENSURE_REQUIREMENTS, [plan_id=138395]
            +- *(28) HashAggregate(keys=[channel#18062, id#18063, spark_grouping_id#18061L], functions=[partial_sum(sales#17827), partial_sum(returns#17815), partial_sum(profit#17816)], output=[channel#18062, id#18063, spark_grouping_id#18061L, sum#18079, isEmpty#18080, sum#18081, isEmpty#18082, sum#18083, isEmpty#18084])
               +- *(28) Expand [[sales#17827, returns#17815, profit#17816, channel#18059, id#18060, 0], [sales#17827, returns#17815, profit#17816, channel#18059, null, 1], [sales#17827, returns#17815, profit#17816, null, null, 3]], [sales#17827, returns#17815, profit#17816, channel#18062, id#18063, spark_grouping_id#18061L]
                  +- Union
                     :- *(21) Project [sales#17827, coalesce(returns#17829, 0.00) AS returns#17815, CheckOverflow((promote_precision(cast(profit#17828 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#17830, 0.00) as decimal(18,2)))), DecimalType(18,2)) AS profit#17816, store channel AS channel#18059, s_store_sk#52 AS id#18060]
                     :  +- *(21) SortMergeJoin [s_store_sk#52], [s_store_sk#17881], LeftOuter
                     :     :- *(19) Sort [s_store_sk#52 ASC NULLS FIRST], false, 0
                     :     :  +- *(19) HashAggregate(keys=[s_store_sk#52], functions=[sum(UnscaledValue(ss_ext_sales_price#429)), sum(UnscaledValue(ss_net_profit#436))], output=[s_store_sk#52, sales#17827, profit#17828])
                     :     :     +- ShuffleQueryStage 18
                     :     :        +- Exchange hashpartitioning(s_store_sk#52, 20), ENSURE_REQUIREMENTS, [plan_id=136887]
                     :     :           +- *(13) HashAggregate(keys=[s_store_sk#52], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429)), partial_sum(UnscaledValue(ss_net_profit#436))], output=[s_store_sk#52, sum#18087L, sum#18088L])
                     :     :              +- *(13) Project [ss_ext_sales_price#429, ss_net_profit#436, s_store_sk#52]
                     :     :                 +- *(13) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                     :     :                    :- *(13) Project [ss_store_sk#421, ss_ext_sales_price#429, ss_net_profit#436]
                     :     :                    :  +- *(13) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                     :     :                    :     :- *(13) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421))
                     :     :                    :     :  +- *(13) ColumnarToRow
                     :     :                    :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_store_sk#421,ss_ext_sales_price#429,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(...
                     :     :                    :     +- BroadcastQueryStage 0
                     :     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=135505]
                     :     :                    :           +- *(1) Project [d_date_sk#24]
                     :     :                    :              +- *(1) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-08-03)) AND (d_date#26 <= 2000-09-02)) AND isnotnull(d_date_sk#24))
                     :     :                    :                 +- *(1) ColumnarToRow
                     :     :                    :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-08-03), (d_date#26 <= 2000-09-02), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                     :     :                    +- BroadcastQueryStage 1
                     :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=135524]
                     :     :                          +- *(2) Filter isnotnull(s_store_sk#52)
                     :     :                             +- *(2) ColumnarToRow
                     :     :                                +- FileScan parquet default.store[s_store_sk#52] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>
                     :     +- *(20) Sort [s_store_sk#17881 ASC NULLS FIRST], false, 0
                     :        +- *(20) HashAggregate(keys=[s_store_sk#17881], functions=[sum(UnscaledValue(sr_return_amt#15)), sum(UnscaledValue(sr_net_loss#23))], output=[s_store_sk#17881, returns#17829, profit_loss#17830])
                     :           +- ShuffleQueryStage 19
                     :              +- Exchange hashpartitioning(s_store_sk#17881, 20), ENSURE_REQUIREMENTS, [plan_id=136929]
                     :                 +- *(14) HashAggregate(keys=[s_store_sk#17881], functions=[partial_sum(UnscaledValue(sr_return_amt#15)), partial_sum(UnscaledValue(sr_net_loss#23))], output=[s_store_sk#17881, sum#18091L, sum#18092L])
                     :                    +- *(14) Project [sr_return_amt#15, sr_net_loss#23, s_store_sk#17881]
                     :                       +- *(14) BroadcastHashJoin [sr_store_sk#11], [s_store_sk#17881], Inner, BuildRight, false
                     :                          :- *(14) Project [sr_store_sk#11, sr_return_amt#15, sr_net_loss#23]
                     :                          :  +- *(14) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#17853], Inner, BuildRight, false
                     :                          :     :- *(14) Filter (isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11))
                     :                          :     :  +- *(14) ColumnarToRow
                     :                          :     :     +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_store_sk#11,sr_return_amt#15,sr_net_loss#23] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#4), isnotnull(sr_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>
                     :                          :     +- BroadcastQueryStage 3
                     :                          :        +- ReusedExchange [d_date_sk#17853], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=135505]
                     :                          +- BroadcastQueryStage 5
                     :                             +- ReusedExchange [s_store_sk#17881], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=135524]
                     :- *(24) Project [sales#17831, returns#17833, CheckOverflow((promote_precision(cast(profit#17832 as decimal(18,2))) - promote_precision(cast(profit_loss#17834 as decimal(18,2)))), DecimalType(18,2)) AS profit#17819, catalog channel AS channel#18069, cs_call_center_sk#208 AS id#18070]
                     :  +- CartesianProduct
                     :     :- *(22) HashAggregate(keys=[cs_call_center_sk#208], functions=[sum(UnscaledValue(cs_ext_sales_price#220)), sum(UnscaledValue(cs_net_profit#230))], output=[cs_call_center_sk#208, sales#17831, profit#17832])
                     :     :  +- ShuffleQueryStage 20
                     :     :     +- Exchange hashpartitioning(cs_call_center_sk#208, 20), ENSURE_REQUIREMENTS, [plan_id=136968]
                     :     :        +- *(15) HashAggregate(keys=[cs_call_center_sk#208], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220)), partial_sum(UnscaledValue(cs_net_profit#230))], output=[cs_call_center_sk#208, sum#18095L, sum#18096L])
                     :     :           +- *(15) Project [cs_call_center_sk#208, cs_ext_sales_price#220, cs_net_profit#230]
                     :     :              +- *(15) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#17910], Inner, BuildRight, false
                     :     :                 :- *(15) Filter isnotnull(cs_sold_date_sk#197)
                     :     :                 :  +- *(15) ColumnarToRow
                     :     :                 :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_call_center_sk#208,cs_ext_sales_price#220,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:de...
                     :     :                 +- BroadcastQueryStage 7
                     :     :                    +- ReusedExchange [d_date_sk#17910], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=135505]
                     :     +- *(23) HashAggregate(keys=[], functions=[sum(UnscaledValue(cr_return_amount#3309)), sum(UnscaledValue(cr_net_loss#3317))], output=[returns#17833, profit_loss#17834])
                     :        +- ShuffleQueryStage 25
                     :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=137978]
                     :              +- *(17) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cr_return_amount#3309)), partial_sum(UnscaledValue(cr_net_loss#3317))], output=[sum#18099L, sum#18100L])
                     :                 +- *(17) Project [cr_return_amount#3309, cr_net_loss#3317]
                     :                    +- *(17) BroadcastHashJoin [cr_returned_date_sk#3291], [d_date_sk#17938], Inner, BuildRight, false
                     :                       :- AQEShuffleRead local
                     :                       :  +- ShuffleQueryStage 8
                     :                       :     +- Exchange hashpartitioning(cr_returned_date_sk#3291, 20), ENSURE_REQUIREMENTS, [plan_id=135619]
                     :                       :        +- *(6) Filter isnotnull(cr_returned_date_sk#3291)
                     :                       :           +- *(6) ColumnarToRow
                     :                       :              +- FileScan parquet default.catalog_returns[cr_returned_date_sk#3291,cr_return_amount#3309,cr_net_loss#3317] Batched: true, DataFilters: [isnotnull(cr_returned_date_sk#3291)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_returned_date_sk)], ReadSchema: struct<cr_returned_date_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>
                     :                       +- BroadcastQueryStage 21
                     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=137390]
                     :                             +- AQEShuffleRead local
                     :                                +- ShuffleQueryStage 9
                     :                                   +- Exchange hashpartitioning(d_date_sk#17938, 20), ENSURE_REQUIREMENTS, [plan_id=135638]
                     :                                      +- *(7) Project [d_date_sk#17938]
                     :                                         +- *(7) Filter (((isnotnull(d_date#17940) AND (d_date#17940 >= 2000-08-03)) AND (d_date#17940 <= 2000-09-02)) AND isnotnull(d_date_sk#17938))
                     :                                            +- *(7) ColumnarToRow
                     :                                               +- FileScan parquet default.date_dim[d_date_sk#17938,d_date#17940] Batched: true, DataFilters: [isnotnull(d_date#17940), (d_date#17940 >= 2000-08-03), (d_date#17940 <= 2000-09-02), isnotnull(d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                     +- *(27) Project [sales#17835, coalesce(returns#17837, 0.00) AS returns#17822, CheckOverflow((promote_precision(cast(profit#17836 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#17838, 0.00) as decimal(18,2)))), DecimalType(18,2)) AS profit#17823, web channel AS channel#18071, wp_web_page_sk#17839 AS id#18072]
                        +- *(27) SortMergeJoin [wp_web_page_sk#17839], [wp_web_page_sk#18022], LeftOuter
                           :- *(25) Sort [wp_web_page_sk#17839 ASC NULLS FIRST], false, 0
                           :  +- *(25) HashAggregate(keys=[wp_web_page_sk#17839], functions=[sum(UnscaledValue(ws_ext_sales_price#186)), sum(UnscaledValue(ws_net_profit#196))], output=[wp_web_page_sk#17839, sales#17835, profit#17836])
                           :     +- ShuffleQueryStage 24
                           :        +- Exchange hashpartitioning(wp_web_page_sk#17839, 20), ENSURE_REQUIREMENTS, [plan_id=137621]
                           :           +- *(16) HashAggregate(keys=[wp_web_page_sk#17839], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186)), partial_sum(UnscaledValue(ws_net_profit#196))], output=[wp_web_page_sk#17839, sum#18103L, sum#18104L])
                           :              +- *(16) Project [ws_ext_sales_price#186, ws_net_profit#196, wp_web_page_sk#17839]
                           :                 +- *(16) BroadcastHashJoin [ws_web_page_sk#175], [wp_web_page_sk#17839], Inner, BuildRight, false
                           :                    :- *(16) Project [ws_web_page_sk#175, ws_ext_sales_price#186, ws_net_profit#196]
                           :                    :  +- *(16) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#17966], Inner, BuildRight, false
                           :                    :     :- *(16) Filter (isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_web_page_sk#175))
                           :                    :     :  +- *(16) ColumnarToRow
                           :                    :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_web_page_sk#175,ws_ext_sales_price#186,ws_net_profit#196] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_web_page_sk#175)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_web_page_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decim...
                           :                    :     +- BroadcastQueryStage 11
                           :                    :        +- ReusedExchange [d_date_sk#17966], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=135505]
                           :                    +- BroadcastQueryStage 12
                           :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=135687]
                           :                          +- *(9) Filter isnotnull(wp_web_page_sk#17839)
                           :                             +- *(9) ColumnarToRow
                           :                                +- FileScan parquet default.web_page[wp_web_page_sk#17839] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#17839)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>
                           +- *(26) Sort [wp_web_page_sk#18022 ASC NULLS FIRST], false, 0
                              +- *(26) HashAggregate(keys=[wp_web_page_sk#18022], functions=[sum(UnscaledValue(wr_return_amt#3342)), sum(UnscaledValue(wr_net_loss#3350))], output=[wp_web_page_sk#18022, returns#17837, profit_loss#17838])
                                 +- ShuffleQueryStage 26
                                    +- Exchange hashpartitioning(wp_web_page_sk#18022, 20), ENSURE_REQUIREMENTS, [plan_id=138010]
                                       +- *(18) HashAggregate(keys=[wp_web_page_sk#18022], functions=[partial_sum(UnscaledValue(wr_return_amt#3342)), partial_sum(UnscaledValue(wr_net_loss#3350))], output=[wp_web_page_sk#18022, sum#18107L, sum#18108L])
                                          +- *(18) Project [wr_return_amt#3342, wr_net_loss#3350, wp_web_page_sk#18022]
                                             +- *(18) BroadcastHashJoin [wr_web_page_sk#3338], [wp_web_page_sk#18022], Inner, BuildRight, false
                                                :- *(18) Project [wr_web_page_sk#3338, wr_return_amt#3342, wr_net_loss#3350]
                                                :  +- *(18) BroadcastHashJoin [wr_returned_date_sk#3327], [d_date_sk#17994], Inner, BuildRight, false
                                                :     :- AQEShuffleRead local
                                                :     :  +- ShuffleQueryStage 13
                                                :     :     +- Exchange hashpartitioning(wr_returned_date_sk#3327, 20), ENSURE_REQUIREMENTS, [plan_id=135708]
                                                :     :        +- *(10) Filter (isnotnull(wr_returned_date_sk#3327) AND isnotnull(wr_web_page_sk#3338))
                                                :     :           +- *(10) ColumnarToRow
                                                :     :              +- FileScan parquet default.web_returns[wr_returned_date_sk#3327,wr_web_page_sk#3338,wr_return_amt#3342,wr_net_loss#3350] Batched: true, DataFilters: [isnotnull(wr_returned_date_sk#3327), isnotnull(wr_web_page_sk#3338)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_returned_date_sk), IsNotNull(wr_web_page_sk)], ReadSchema: struct<wr_returned_date_sk:int,wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(...
                                                :     +- BroadcastQueryStage 23
                                                :        +- ReusedExchange [d_date_sk#17994], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=137390]
                                                +- BroadcastQueryStage 17
                                                   +- ReusedExchange [wp_web_page_sk#18022], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=135687]


==== q79 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_last_name#90 ASC NULLS FIRST,c_first_name#89 ASC NULLS FIRST,substr(s_city#74, 1, 30) ASC NULLS FIRST,profit#18264 ASC NULLS FIRST], output=[c_last_name#90,c_first_name#89,substr(s_city, 1, 30)#18267,ss_ticket_number#423,amt#18263,profit#18264])
   +- *(6) Project [c_last_name#90, c_first_name#89, substr(s_city#74, 1, 30) AS substr(s_city, 1, 30)#18267, ss_ticket_number#423, amt#18263, profit#18264, s_city#74]
      +- *(6) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
         :- *(6) HashAggregate(keys=[ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, s_city#74], functions=[sum(UnscaledValue(ss_coupon_amt#433)), sum(UnscaledValue(ss_net_profit#436))], output=[ss_ticket_number#423, ss_customer_sk#417, s_city#74, amt#18263, profit#18264])
         :  +- ShuffleQueryStage 4
         :     +- Exchange hashpartitioning(ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, s_city#74, 20), ENSURE_REQUIREMENTS, [plan_id=138983]
         :        +- *(5) HashAggregate(keys=[ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, s_city#74], functions=[partial_sum(UnscaledValue(ss_coupon_amt#433)), partial_sum(UnscaledValue(ss_net_profit#436))], output=[ss_ticket_number#423, ss_customer_sk#417, ss_addr_sk#420, s_city#74, sum#18276L, sum#18277L])
         :           +- *(5) Project [ss_customer_sk#417, ss_addr_sk#420, ss_ticket_number#423, ss_coupon_amt#433, ss_net_profit#436, s_city#74]
         :              +- *(5) BroadcastHashJoin [ss_hdemo_sk#419], [hd_demo_sk#5551], Inner, BuildRight, false
         :                 :- *(5) Project [ss_customer_sk#417, ss_hdemo_sk#419, ss_addr_sk#420, ss_ticket_number#423, ss_coupon_amt#433, ss_net_profit#436, s_city#74]
         :                 :  +- *(5) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
         :                 :     :- *(5) Project [ss_customer_sk#417, ss_hdemo_sk#419, ss_addr_sk#420, ss_store_sk#421, ss_ticket_number#423, ss_coupon_amt#433, ss_net_profit#436]
         :                 :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
         :                 :     :     :- *(5) Filter (((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_hdemo_sk#419)) AND isnotnull(ss_customer_sk#417))
         :                 :     :     :  +- *(5) ColumnarToRow
         :                 :     :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417,ss_hdemo_sk#419,ss_addr_sk#420,ss_store_sk#421,ss_ticket_number#423,ss_coupon_amt#433,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421), isnotnull(ss_hdemo_sk#419), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_t...
         :                 :     :     +- BroadcastQueryStage 0
         :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=138628]
         :                 :     :           +- *(1) Project [d_date_sk#24]
         :                 :     :              +- *(1) Filter (((isnotnull(d_dow#31) AND (d_dow#31 = 1)) AND d_year#30 IN (1999,2000,2001)) AND isnotnull(d_date_sk#24))
         :                 :     :                 +- *(1) ColumnarToRow
         :                 :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_dow#31] Batched: true, DataFilters: [isnotnull(d_dow#31), (d_dow#31 = 1), d_year#30 IN (1999,2000,2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>
         :                 :     +- BroadcastQueryStage 1
         :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=138649]
         :                 :           +- *(2) Project [s_store_sk#52, s_city#74]
         :                 :              +- *(2) Filter (((isnotnull(s_number_employees#58) AND (s_number_employees#58 >= 200)) AND (s_number_employees#58 <= 295)) AND isnotnull(s_store_sk#52))
         :                 :                 +- *(2) ColumnarToRow
         :                 :                    +- FileScan parquet default.store[s_store_sk#52,s_number_employees#58,s_city#74] Batched: true, DataFilters: [isnotnull(s_number_employees#58), (s_number_employees#58 >= 200), (s_number_employees#58 <= 295)..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_num..., ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>
         :                 +- BroadcastQueryStage 2
         :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=138670]
         :                       +- *(3) Project [hd_demo_sk#5551]
         :                          +- *(3) Filter (((hd_dep_count#5554 = 6) OR (hd_vehicle_count#5555 > 2)) AND isnotnull(hd_demo_sk#5551))
         :                             +- *(3) ColumnarToRow
         :                                +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_dep_count#5554,hd_vehicle_count#5555] Batched: true, DataFilters: [((hd_dep_count#5554 = 6) OR (hd_vehicle_count#5555 > 2)), isnotnull(hd_demo_sk#5551)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),GreaterThan(hd_vehicle_count,2)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>
         +- BroadcastQueryStage 3
            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=138696]
               +- *(4) Filter isnotnull(c_customer_sk#81)
                  +- *(4) ColumnarToRow
                     +- FileScan parquet default.customer[c_customer_sk#81,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>


==== q80 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[channel#18463 ASC NULLS FIRST,id#18464 ASC NULLS FIRST], output=[channel#18463,id#18464,sales#18290,returns#18291,profit#18292])
   +- *(32) HashAggregate(keys=[channel#18463, id#18464, spark_grouping_id#18462L], functions=[sum(sales#18294), sum(returns#18295), sum(profit#18296)], output=[channel#18463, id#18464, sales#18290, returns#18291, profit#18292])
      +- ShuffleQueryStage 27
         +- Exchange hashpartitioning(channel#18463, id#18464, spark_grouping_id#18462L, 20), ENSURE_REQUIREMENTS, [plan_id=142608]
            +- *(31) HashAggregate(keys=[channel#18463, id#18464, spark_grouping_id#18462L], functions=[partial_sum(sales#18294), partial_sum(returns#18295), partial_sum(profit#18296)], output=[channel#18463, id#18464, spark_grouping_id#18462L, sum#18480, isEmpty#18481, sum#18482, isEmpty#18483, sum#18484, isEmpty#18485])
               +- *(31) Expand [[sales#18294, returns#18295, profit#18296, channel#18460, id#18461, 0], [sales#18294, returns#18295, profit#18296, channel#18460, null, 1], [sales#18294, returns#18295, profit#18296, null, null, 3]], [sales#18294, returns#18295, profit#18296, channel#18463, id#18464, spark_grouping_id#18462L]
                  +- Union
                     :- *(28) HashAggregate(keys=[s_store_id#53], functions=[sum(UnscaledValue(ss_ext_sales_price#429)), sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#436 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#23 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))], output=[sales#18294, returns#18295, profit#18296, channel#18460, id#18461])
                     :  +- ShuffleQueryStage 24
                     :     +- Exchange hashpartitioning(s_store_id#53, 20), ENSURE_REQUIREMENTS, [plan_id=141840]
                     :        +- *(21) HashAggregate(keys=[s_store_id#53], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429)), partial_sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#436 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#23 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))], output=[s_store_id#53, sum#18491L, sum#18492, isEmpty#18493, sum#18494, isEmpty#18495])
                     :           +- *(21) Project [ss_ext_sales_price#429, ss_net_profit#436, sr_return_amt#15, sr_net_loss#23, s_store_id#53]
                     :              +- *(21) BroadcastHashJoin [ss_promo_sk#422], [p_promo_sk#3642], Inner, BuildRight, false
                     :                 :- *(21) Project [ss_promo_sk#422, ss_ext_sales_price#429, ss_net_profit#436, sr_return_amt#15, sr_net_loss#23, s_store_id#53]
                     :                 :  +- *(21) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                     :                 :     :- *(21) Project [ss_item_sk#416, ss_promo_sk#422, ss_ext_sales_price#429, ss_net_profit#436, sr_return_amt#15, sr_net_loss#23, s_store_id#53]
                     :                 :     :  +- *(21) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                     :                 :     :     :- *(21) Project [ss_item_sk#416, ss_store_sk#421, ss_promo_sk#422, ss_ext_sales_price#429, ss_net_profit#436, sr_return_amt#15, sr_net_loss#23]
                     :                 :     :     :  +- *(21) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                     :                 :     :     :     :- *(21) Project [ss_sold_date_sk#414, ss_item_sk#416, ss_store_sk#421, ss_promo_sk#422, ss_ext_sales_price#429, ss_net_profit#436, sr_return_amt#15, sr_net_loss#23]
                     :                 :     :     :     :  +- *(21) SortMergeJoin [ss_item_sk#416, ss_ticket_number#423], [sr_item_sk#6, sr_ticket_number#13], LeftOuter
                     :                 :     :     :     :     :- *(19) Sort [ss_item_sk#416 ASC NULLS FIRST, ss_ticket_number#423 ASC NULLS FIRST], false, 0
                     :                 :     :     :     :     :  +- ShuffleQueryStage 0
                     :                 :     :     :     :     :     +- Exchange hashpartitioning(ss_item_sk#416, ss_ticket_number#423, 20), ENSURE_REQUIREMENTS, [plan_id=139663]
                     :                 :     :     :     :     :        +- *(1) Filter (((isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_store_sk#421)) AND isnotnull(ss_item_sk#416)) AND isnotnull(ss_promo_sk#422))
                     :                 :     :     :     :     :           +- *(1) ColumnarToRow
                     :                 :     :     :     :     :              +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_promo_sk#422,ss_ticket_number#423,ss_ext_sales_price#429,ss_net_profit#436] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421), isnotnull(ss_item_sk#416), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss...
                     :                 :     :     :     :     +- *(20) Sort [sr_item_sk#6 ASC NULLS FIRST, sr_ticket_number#13 ASC NULLS FIRST], false, 0
                     :                 :     :     :     :        +- ShuffleQueryStage 1
                     :                 :     :     :     :           +- Exchange hashpartitioning(sr_item_sk#6, sr_ticket_number#13, 20), ENSURE_REQUIREMENTS, [plan_id=139680]
                     :                 :     :     :     :              +- *(2) Filter (isnotnull(sr_item_sk#6) AND isnotnull(sr_ticket_number#13))
                     :                 :     :     :     :                 +- *(2) ColumnarToRow
                     :                 :     :     :     :                    +- FileScan parquet default.store_returns[sr_item_sk#6,sr_ticket_number#13,sr_return_amt#15,sr_net_loss#23] Batched: true, DataFilters: [isnotnull(sr_item_sk#6), isnotnull(sr_ticket_number#13)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>
                     :                 :     :     :     +- BroadcastQueryStage 2
                     :                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139701]
                     :                 :     :     :           +- *(3) Project [d_date_sk#24]
                     :                 :     :     :              +- *(3) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-08-23)) AND (d_date#26 <= 2000-09-22)) AND isnotnull(d_date_sk#24))
                     :                 :     :     :                 +- *(3) ColumnarToRow
                     :                 :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-08-23), (d_date#26 <= 2000-09-22), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-22), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                     :                 :     :     +- BroadcastQueryStage 3
                     :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=139720]
                     :                 :     :           +- *(4) Filter isnotnull(s_store_sk#52)
                     :                 :     :              +- *(4) ColumnarToRow
                     :                 :     :                 +- FileScan parquet default.store[s_store_sk#52,s_store_id#53] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>
                     :                 :     +- BroadcastQueryStage 4
                     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139739]
                     :                 :           +- *(5) Project [i_item_sk#437]
                     :                 :              +- *(5) Filter ((isnotnull(i_current_price#442) AND (i_current_price#442 > 50.00)) AND isnotnull(i_item_sk#437))
                     :                 :                 +- *(5) ColumnarToRow
                     :                 :                    +- FileScan parquet default.item[i_item_sk#437,i_current_price#442] Batched: true, DataFilters: [isnotnull(i_current_price#442), (i_current_price#442 > 50.00), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>
                     :                 +- BroadcastQueryStage 5
                     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139760]
                     :                       +- *(6) Project [p_promo_sk#3642]
                     :                          +- *(6) Filter ((isnotnull(p_channel_tv#3653) AND (p_channel_tv#3653 = N)) AND isnotnull(p_promo_sk#3642))
                     :                             +- *(6) ColumnarToRow
                     :                                +- FileScan parquet default.promotion[p_promo_sk#3642,p_channel_tv#3653] Batched: true, DataFilters: [isnotnull(p_channel_tv#3653), (p_channel_tv#3653 = N), isnotnull(p_promo_sk#3642)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>
                     :- *(29) HashAggregate(keys=[cp_catalog_page_id#3319], functions=[sum(UnscaledValue(cs_ext_sales_price#220)), sum(coalesce(cast(cr_return_amount#3309 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#230 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#3317 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))], output=[sales#18298, returns#18299, profit#18300, channel#18470, id#18471])
                     :  +- ShuffleQueryStage 25
                     :     +- Exchange hashpartitioning(cp_catalog_page_id#3319, 20), ENSURE_REQUIREMENTS, [plan_id=142219]
                     :        +- *(24) HashAggregate(keys=[cp_catalog_page_id#3319], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#220)), partial_sum(coalesce(cast(cr_return_amount#3309 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#230 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#3317 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))], output=[cp_catalog_page_id#3319, sum#18501L, sum#18502, isEmpty#18503, sum#18504, isEmpty#18505])
                     :           +- *(24) Project [cs_ext_sales_price#220, cs_net_profit#230, cr_return_amount#3309, cr_net_loss#3317, cp_catalog_page_id#3319]
                     :              +- *(24) BroadcastHashJoin [cs_promo_sk#213], [p_promo_sk#18354], Inner, BuildRight, false
                     :                 :- *(24) Project [cs_promo_sk#213, cs_ext_sales_price#220, cs_net_profit#230, cr_return_amount#3309, cr_net_loss#3317, cp_catalog_page_id#3319]
                     :                 :  +- *(24) BroadcastHashJoin [cs_item_sk#212], [i_item_sk#18332], Inner, BuildRight, false
                     :                 :     :- *(24) Project [cs_item_sk#212, cs_promo_sk#213, cs_ext_sales_price#220, cs_net_profit#230, cr_return_amount#3309, cr_net_loss#3317, cp_catalog_page_id#3319]
                     :                 :     :  +- *(24) BroadcastHashJoin [cs_catalog_page_sk#209], [cp_catalog_page_sk#3318], Inner, BuildRight, false
                     :                 :     :     :- *(24) Project [cs_catalog_page_sk#209, cs_item_sk#212, cs_promo_sk#213, cs_ext_sales_price#220, cs_net_profit#230, cr_return_amount#3309, cr_net_loss#3317]
                     :                 :     :     :  +- *(24) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#18304], Inner, BuildRight, false
                     :                 :     :     :     :- *(24) Project [cs_sold_date_sk#197, cs_catalog_page_sk#209, cs_item_sk#212, cs_promo_sk#213, cs_ext_sales_price#220, cs_net_profit#230, cr_return_amount#3309, cr_net_loss#3317]
                     :                 :     :     :     :  +- *(24) SortMergeJoin [cs_item_sk#212, cs_order_number#214], [cr_item_sk#3293, cr_order_number#3307], LeftOuter
                     :                 :     :     :     :     :- *(22) Sort [cs_item_sk#212 ASC NULLS FIRST, cs_order_number#214 ASC NULLS FIRST], false, 0
                     :                 :     :     :     :     :  +- ShuffleQueryStage 6
                     :                 :     :     :     :     :     +- Exchange hashpartitioning(cs_item_sk#212, cs_order_number#214, 20), ENSURE_REQUIREMENTS, [plan_id=139782]
                     :                 :     :     :     :     :        +- *(7) Filter (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_catalog_page_sk#209)) AND isnotnull(cs_item_sk#212)) AND isnotnull(cs_promo_sk#213))
                     :                 :     :     :     :     :           +- *(7) ColumnarToRow
                     :                 :     :     :     :     :              +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_catalog_page_sk#209,cs_item_sk#212,cs_promo_sk#213,cs_order_number#214,cs_ext_sales_price#220,cs_net_profit#230] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_catalog_page_sk#209), isnotnull(cs_item_sk#212), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_p..., ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:...
                     :                 :     :     :     :     +- *(23) Sort [cr_item_sk#3293 ASC NULLS FIRST, cr_order_number#3307 ASC NULLS FIRST], false, 0
                     :                 :     :     :     :        +- ShuffleQueryStage 7
                     :                 :     :     :     :           +- Exchange hashpartitioning(cr_item_sk#3293, cr_order_number#3307, 20), ENSURE_REQUIREMENTS, [plan_id=139799]
                     :                 :     :     :     :              +- *(8) Filter (isnotnull(cr_item_sk#3293) AND isnotnull(cr_order_number#3307))
                     :                 :     :     :     :                 +- *(8) ColumnarToRow
                     :                 :     :     :     :                    +- FileScan parquet default.catalog_returns[cr_item_sk#3293,cr_order_number#3307,cr_return_amount#3309,cr_net_loss#3317] Batched: true, DataFilters: [isnotnull(cr_item_sk#3293), isnotnull(cr_order_number#3307)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>
                     :                 :     :     :     +- BroadcastQueryStage 9
                     :                 :     :     :        +- ReusedExchange [d_date_sk#18304], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139701]
                     :                 :     :     +- BroadcastQueryStage 10
                     :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=139841]
                     :                 :     :           +- *(10) Filter isnotnull(cp_catalog_page_sk#3318)
                     :                 :     :              +- *(10) ColumnarToRow
                     :                 :     :                 +- FileScan parquet default.catalog_page[cp_catalog_page_sk#3318,cp_catalog_page_id#3319] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#3318)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_page], PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>
                     :                 :     +- BroadcastQueryStage 12
                     :                 :        +- ReusedExchange [i_item_sk#18332], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139739]
                     :                 +- BroadcastQueryStage 14
                     :                    +- ReusedExchange [p_promo_sk#18354], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139760]
                     +- *(30) HashAggregate(keys=[web_site_id#3352], functions=[sum(UnscaledValue(ws_ext_sales_price#186)), sum(coalesce(cast(wr_return_amt#3342 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#196 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#3350 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))], output=[sales#18301, returns#18302, profit#18303, channel#18472, id#18473])
                        +- ShuffleQueryStage 26
                           +- Exchange hashpartitioning(web_site_id#3352, 20), ENSURE_REQUIREMENTS, [plan_id=142474]
                              +- *(27) HashAggregate(keys=[web_site_id#3352], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#186)), partial_sum(coalesce(cast(wr_return_amt#3342 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#196 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#3350 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))], output=[web_site_id#3352, sum#18511L, sum#18512, isEmpty#18513, sum#18514, isEmpty#18515])
                                 +- *(27) Project [ws_ext_sales_price#186, ws_net_profit#196, wr_return_amt#3342, wr_net_loss#3350, web_site_id#3352]
                                    +- *(27) BroadcastHashJoin [ws_promo_sk#179], [p_promo_sk#18423], Inner, BuildRight, false
                                       :- *(27) Project [ws_promo_sk#179, ws_ext_sales_price#186, ws_net_profit#196, wr_return_amt#3342, wr_net_loss#3350, web_site_id#3352]
                                       :  +- *(27) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#18401], Inner, BuildRight, false
                                       :     :- *(27) Project [ws_item_sk#166, ws_promo_sk#179, ws_ext_sales_price#186, ws_net_profit#196, wr_return_amt#3342, wr_net_loss#3350, web_site_id#3352]
                                       :     :  +- *(27) BroadcastHashJoin [ws_web_site_sk#176], [web_site_sk#3351], Inner, BuildRight, false
                                       :     :     :- *(27) Project [ws_item_sk#166, ws_web_site_sk#176, ws_promo_sk#179, ws_ext_sales_price#186, ws_net_profit#196, wr_return_amt#3342, wr_net_loss#3350]
                                       :     :     :  +- *(27) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#18373], Inner, BuildRight, false
                                       :     :     :     :- *(27) Project [ws_sold_date_sk#163, ws_item_sk#166, ws_web_site_sk#176, ws_promo_sk#179, ws_ext_sales_price#186, ws_net_profit#196, wr_return_amt#3342, wr_net_loss#3350]
                                       :     :     :     :  +- *(27) SortMergeJoin [ws_item_sk#166, ws_order_number#180], [wr_item_sk#3329, wr_order_number#3340], LeftOuter
                                       :     :     :     :     :- *(25) Sort [ws_item_sk#166 ASC NULLS FIRST, ws_order_number#180 ASC NULLS FIRST], false, 0
                                       :     :     :     :     :  +- ShuffleQueryStage 15
                                       :     :     :     :     :     +- Exchange hashpartitioning(ws_item_sk#166, ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=139907]
                                       :     :     :     :     :        +- *(13) Filter (((isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_web_site_sk#176)) AND isnotnull(ws_item_sk#166)) AND isnotnull(ws_promo_sk#179))
                                       :     :     :     :     :           +- *(13) ColumnarToRow
                                       :     :     :     :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_web_site_sk#176,ws_promo_sk#179,ws_order_number#180,ws_ext_sales_price#186,ws_net_profit#196] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_web_site_sk#176), isnotnull(ws_item_sk#166), isnotn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo..., ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,...
                                       :     :     :     :     +- *(26) Sort [wr_item_sk#3329 ASC NULLS FIRST, wr_order_number#3340 ASC NULLS FIRST], false, 0
                                       :     :     :     :        +- ShuffleQueryStage 16
                                       :     :     :     :           +- Exchange hashpartitioning(wr_item_sk#3329, wr_order_number#3340, 20), ENSURE_REQUIREMENTS, [plan_id=139924]
                                       :     :     :     :              +- *(14) Filter (isnotnull(wr_item_sk#3329) AND isnotnull(wr_order_number#3340))
                                       :     :     :     :                 +- *(14) ColumnarToRow
                                       :     :     :     :                    +- FileScan parquet default.web_returns[wr_item_sk#3329,wr_order_number#3340,wr_return_amt#3342,wr_net_loss#3350] Batched: true, DataFilters: [isnotnull(wr_item_sk#3329), isnotnull(wr_order_number#3340)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>
                                       :     :     :     +- BroadcastQueryStage 18
                                       :     :     :        +- ReusedExchange [d_date_sk#18373], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139701]
                                       :     :     +- BroadcastQueryStage 19
                                       :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=139966]
                                       :     :           +- *(16) Filter isnotnull(web_site_sk#3351)
                                       :     :              +- *(16) ColumnarToRow
                                       :     :                 +- FileScan parquet default.web_site[web_site_sk#3351,web_site_id#3352] Batched: true, DataFilters: [isnotnull(web_site_sk#3351)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>
                                       :     +- BroadcastQueryStage 21
                                       :        +- ReusedExchange [i_item_sk#18401], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139739]
                                       +- BroadcastQueryStage 23
                                          +- ReusedExchange [p_promo_sk#18423], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=139760]


==== q81 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST,c_salutation#88 ASC NULLS FIRST,c_first_name#89 ASC NULLS FIRST,c_last_name#90 ASC NULLS FIRST,ca_street_number#18633 ASC NULLS FIRST,ca_street_name#18634 ASC NULLS FIRST,ca_street_type#18635 ASC NULLS FIRST,ca_suite_number#18636 ASC NULLS FIRST,ca_city#18637 ASC NULLS FIRST,ca_county#18638 ASC NULLS FIRST,ca_state#18639 ASC NULLS FIRST,ca_zip#18640 ASC NULLS FIRST,ca_country#18641 ASC NULLS FIRST,ca_gmt_offset#18642 ASC NULLS FIRST,ca_location_type#18643 ASC NULLS FIRST,ctr_total_return#18630 ASC NULLS FIRST], output=[c_customer_id#82,c_salutation#88,c_first_name#89,c_last_name#90,ca_street_number#18633,ca_street_name#18634,ca_street_type#18635,ca_suite_number#18636,ca_city#18637,ca_county#18638,ca_state#18639,ca_zip#18640,ca_country#18641,ca_gmt_offset#18642,ca_location_type#18643,ctr_total_return#18630])
   +- *(13) Project [c_customer_id#82, c_salutation#88, c_first_name#89, c_last_name#90, ca_street_number#18633, ca_street_name#18634, ca_street_type#18635, ca_suite_number#18636, ca_city#18637, ca_county#18638, ca_state#18639, ca_zip#18640, ca_country#18641, ca_gmt_offset#18642, ca_location_type#18643, ctr_total_return#18630]
      +- *(13) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#18631], Inner, BuildRight, false
         :- *(13) Project [ctr_total_return#18630, c_customer_id#82, c_current_addr_sk#85, c_salutation#88, c_first_name#89, c_last_name#90]
         :  +- *(13) BroadcastHashJoin [ctr_customer_sk#18628], [c_customer_sk#81], Inner, BuildRight, false
         :     :- *(13) Project [ctr_customer_sk#18628, ctr_total_return#18630]
         :     :  +- *(13) BroadcastHashJoin [ctr_state#18629], [ctr_state#18629#18664], Inner, BuildLeft, (cast(ctr_total_return#18630 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#18646), false
         :     :     :- BroadcastQueryStage 15
         :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=144201]
         :     :     :     +- *(11) Filter isnotnull(ctr_total_return#18630)
         :     :     :        +- *(11) HashAggregate(keys=[cr_returning_customer_sk#3298, ca_state#3725], functions=[sum(UnscaledValue(cr_return_amt_inc_tax#3311))], output=[ctr_customer_sk#18628, ctr_state#18629, ctr_total_return#18630])
         :     :     :           +- ShuffleQueryStage 13
         :     :     :              +- Exchange hashpartitioning(cr_returning_customer_sk#3298, ca_state#3725, 20), ENSURE_REQUIREMENTS, [plan_id=143964]
         :     :     :                 +- *(9) HashAggregate(keys=[cr_returning_customer_sk#3298, ca_state#3725], functions=[partial_sum(UnscaledValue(cr_return_amt_inc_tax#3311))], output=[cr_returning_customer_sk#3298, ca_state#3725, sum#18666L])
         :     :     :                    +- *(9) Project [cr_returning_customer_sk#3298, cr_return_amt_inc_tax#3311, ca_state#3725]
         :     :     :                       +- *(9) BroadcastHashJoin [cr_returning_addr_sk#3301], [ca_address_sk#3717], Inner, BuildRight, false
         :     :     :                          :- *(9) Project [cr_returning_customer_sk#3298, cr_returning_addr_sk#3301, cr_return_amt_inc_tax#3311]
         :     :     :                          :  +- *(9) BroadcastHashJoin [cr_returned_date_sk#3291], [d_date_sk#24], Inner, BuildRight, false
         :     :     :                          :     :- AQEShuffleRead local
         :     :     :                          :     :  +- ShuffleQueryStage 0
         :     :     :                          :     :     +- Exchange hashpartitioning(cr_returned_date_sk#3291, 20), ENSURE_REQUIREMENTS, [plan_id=142912]
         :     :     :                          :     :        +- *(1) Filter ((isnotnull(cr_returned_date_sk#3291) AND isnotnull(cr_returning_addr_sk#3301)) AND isnotnull(cr_returning_customer_sk#3298))
         :     :     :                          :     :           +- *(1) ColumnarToRow
         :     :     :                          :     :              +- FileScan parquet default.catalog_returns[cr_returned_date_sk#3291,cr_returning_customer_sk#3298,cr_returning_addr_sk#3301,cr_return_amt_inc_tax#3311] Batched: true, DataFilters: [isnotnull(cr_returned_date_sk#3291), isnotnull(cr_returning_addr_sk#3301), isnotnull(cr_returnin..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer..., ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_am...
         :     :     :                          :     +- BroadcastQueryStage 10
         :     :     :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=143769]
         :     :     :                          :           +- AQEShuffleRead local
         :     :     :                          :              +- ShuffleQueryStage 1
         :     :     :                          :                 +- Exchange hashpartitioning(d_date_sk#24, 20), ENSURE_REQUIREMENTS, [plan_id=142931]
         :     :     :                          :                    +- *(2) Project [d_date_sk#24]
         :     :     :                          :                       +- *(2) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
         :     :     :                          :                          +- *(2) ColumnarToRow
         :     :     :                          :                             +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :     :                          +- BroadcastQueryStage 2
         :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=142952]
         :     :     :                                +- *(3) Filter (isnotnull(ca_address_sk#3717) AND isnotnull(ca_state#3725))
         :     :     :                                   +- *(3) ColumnarToRow
         :     :     :                                      +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725] Batched: true, DataFilters: [isnotnull(ca_address_sk#3717), isnotnull(ca_state#3725)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
         :     :     +- *(13) Filter isnotnull((avg(ctr_total_return) * 1.2)#18646)
         :     :        +- *(13) HashAggregate(keys=[ctr_state#18629], functions=[avg(ctr_total_return#18630)], output=[(avg(ctr_total_return) * 1.2)#18646, ctr_state#18629#18664])
         :     :           +- ShuffleQueryStage 16
         :     :              +- Exchange hashpartitioning(ctr_state#18629, 20), ENSURE_REQUIREMENTS, [plan_id=144272]
         :     :                 +- *(12) HashAggregate(keys=[ctr_state#18629], functions=[partial_avg(ctr_total_return#18630)], output=[ctr_state#18629, sum#18669, count#18670L])
         :     :                    +- *(12) HashAggregate(keys=[cr_returning_customer_sk#3298, ca_state#3725], functions=[sum(UnscaledValue(cr_return_amt_inc_tax#3311))], output=[ctr_state#18629, ctr_total_return#18630])
         :     :                       +- ShuffleQueryStage 14
         :     :                          +- Exchange hashpartitioning(cr_returning_customer_sk#3298, ca_state#3725, 20), ENSURE_REQUIREMENTS, [plan_id=144112]
         :     :                             +- *(10) HashAggregate(keys=[cr_returning_customer_sk#3298, ca_state#3725], functions=[partial_sum(UnscaledValue(cr_return_amt_inc_tax#3311))], output=[cr_returning_customer_sk#3298, ca_state#3725, sum#18672L])
         :     :                                +- *(10) Project [cr_returning_customer_sk#3298, cr_return_amt_inc_tax#3311, ca_state#3725]
         :     :                                   +- *(10) BroadcastHashJoin [cr_returning_addr_sk#3301], [ca_address_sk#3717], Inner, BuildRight, false
         :     :                                      :- *(10) Project [cr_returning_customer_sk#3298, cr_returning_addr_sk#3301, cr_return_amt_inc_tax#3311]
         :     :                                      :  +- *(10) BroadcastHashJoin [cr_returned_date_sk#3291], [d_date_sk#24], Inner, BuildRight, false
         :     :                                      :     :- AQEShuffleRead local
         :     :                                      :     :  +- ShuffleQueryStage 3
         :     :                                      :     :     +- Exchange hashpartitioning(cr_returned_date_sk#3291, 20), ENSURE_REQUIREMENTS, [plan_id=143013]
         :     :                                      :     :        +- *(4) Filter (isnotnull(cr_returned_date_sk#3291) AND isnotnull(cr_returning_addr_sk#3301))
         :     :                                      :     :           +- *(4) ColumnarToRow
         :     :                                      :     :              +- FileScan parquet default.catalog_returns[cr_returned_date_sk#3291,cr_returning_customer_sk#3298,cr_returning_addr_sk#3301,cr_return_amt_inc_tax#3311] Batched: true, DataFilters: [isnotnull(cr_returned_date_sk#3291), isnotnull(cr_returning_addr_sk#3301)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk)], ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_am...
         :     :                                      :     +- BroadcastQueryStage 12
         :     :                                      :        +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=143769]
         :     :                                      +- BroadcastQueryStage 7
         :     :                                         +- ReusedExchange [ca_address_sk#3717, ca_state#3725], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=142952]
         :     +- BroadcastQueryStage 8
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143088]
         :           +- *(7) Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85))
         :              +- *(7) ColumnarToRow
         :                 +- FileScan parquet default.customer[c_customer_sk#81,c_customer_id#82,c_current_addr_sk#85,c_salutation#88,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_n...
         +- BroadcastQueryStage 9
            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143109]
               +- *(8) Filter ((isnotnull(ca_state#18639) AND (ca_state#18639 = GA)) AND isnotnull(ca_address_sk#18631))
                  +- *(8) ColumnarToRow
                     +- FileScan parquet default.customer_address[ca_address_sk#18631,ca_street_number#18633,ca_street_name#18634,ca_street_type#18635,ca_suite_number#18636,ca_city#18637,ca_county#18638,ca_state#18639,ca_zip#18640,ca_country#18641,ca_gmt_offset#18642,ca_location_type#18643] Batched: true, DataFilters: [isnotnull(ca_state#18639), (ca_state#18639 = GA), isnotnull(ca_address_sk#18631)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_s...

==== q82 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[i_item_id#438 ASC NULLS FIRST], output=[i_item_id#438,i_item_desc#441,i_current_price#442])
   +- *(6) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_current_price#442], functions=[], output=[i_item_id#438, i_item_desc#441, i_current_price#442])
      +- ShuffleQueryStage 5
         +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, i_current_price#442, 20), ENSURE_REQUIREMENTS, [plan_id=144856]
            +- *(5) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_current_price#442], functions=[], output=[i_item_id#438, i_item_desc#441, i_current_price#442])
               +- *(5) Project [i_item_id#438, i_item_desc#441, i_current_price#442]
                  +- *(5) BroadcastHashJoin [i_item_sk#437], [ss_item_sk#416], Inner, BuildRight, false
                     :- AQEShuffleRead local
                     :  +- ShuffleQueryStage 3
                     :     +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=144746]
                     :        +- *(4) Project [i_item_sk#437, i_item_id#438, i_item_desc#441, i_current_price#442]
                     :           +- *(4) BroadcastHashJoin [inv_date_sk#8005], [d_date_sk#24], Inner, BuildRight, false
                     :              :- *(4) Project [i_item_sk#437, i_item_id#438, i_item_desc#441, i_current_price#442, inv_date_sk#8005]
                     :              :  +- *(4) BroadcastHashJoin [i_item_sk#437], [inv_item_sk#8006], Inner, BuildLeft, false
                     :              :     :- BroadcastQueryStage 0
                     :              :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=144509]
                     :              :     :     +- *(1) Project [i_item_sk#437, i_item_id#438, i_item_desc#441, i_current_price#442]
                     :              :     :        +- *(1) Filter ((((isnotnull(i_current_price#442) AND (i_current_price#442 >= 62.00)) AND (i_current_price#442 <= 92.00)) AND i_manufact_id#450 IN (129,270,821,423)) AND isnotnull(i_item_sk#437))
                     :              :     :           +- *(1) ColumnarToRow
                     :              :     :              +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441,i_current_price#442,i_manufact_id#450] Batched: true, DataFilters: [isnotnull(i_current_price#442), (i_current_price#442 >= 62.00), (i_current_price#442 <= 92.00), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,62.00), LessThanOrEqual(i_current..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_...
                     :              :     +- *(4) Project [inv_date_sk#8005, inv_item_sk#8006]
                     :              :        +- *(4) Filter ((((isnotnull(inv_quantity_on_hand#8008) AND (inv_quantity_on_hand#8008 >= 100)) AND (inv_quantity_on_hand#8008 <= 500)) AND isnotnull(inv_item_sk#8006)) AND isnotnull(inv_date_sk#8005))
                     :              :           +- *(4) ColumnarToRow
                     :              :              +- FileScan parquet default.inventory[inv_date_sk#8005,inv_item_sk#8006,inv_quantity_on_hand#8008] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#8008), (inv_quantity_on_hand#8008 >= 100), (inv_quantity_on_hand#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/inventory], PartitionFilters: [], PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(i..., ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_quantity_on_hand:int>
                     :              +- BroadcastQueryStage 1
                     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=144530]
                     :                    +- *(2) Project [d_date_sk#24]
                     :                       +- *(2) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 2000-05-25)) AND (d_date#26 <= 2000-07-24)) AND isnotnull(d_date_sk#24))
                     :                          +- *(2) ColumnarToRow
                     :                             +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 2000-05-25), (d_date#26 <= 2000-07-24), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-05-25), LessThanOrEqual(d_date,2000-07-24), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                     +- BroadcastQueryStage 4
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=144808]
                           +- AQEShuffleRead local
                              +- ShuffleQueryStage 2
                                 +- Exchange hashpartitioning(ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=144551]
                                    +- *(3) Filter isnotnull(ss_item_sk#416)
                                       +- *(3) ColumnarToRow
                                          +- FileScan parquet default.store_sales[ss_item_sk#416] Batched: true, DataFilters: [isnotnull(ss_item_sk#416)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int>


==== q83 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[item_id#18714 ASC NULLS FIRST,sr_item_qty#18715L ASC NULLS FIRST], output=[item_id#18714,sr_item_qty#18715L,sr_dev#18710,cr_item_qty#18719L,cr_dev#18711,wr_item_qty#18723L,wr_dev#18712,average#18713])
   +- *(39) Project [item_id#18714, sr_item_qty#18715L, (((cast(sr_item_qty#18715L as double) / cast(((sr_item_qty#18715L + cr_item_qty#18719L) + wr_item_qty#18723L) as double)) / 3.0) * 100.0) AS sr_dev#18710, cr_item_qty#18719L, (((cast(cr_item_qty#18719L as double) / cast(((sr_item_qty#18715L + cr_item_qty#18719L) + wr_item_qty#18723L) as double)) / 3.0) * 100.0) AS cr_dev#18711, wr_item_qty#18723L, (((cast(wr_item_qty#18723L as double) / cast(((sr_item_qty#18715L + cr_item_qty#18719L) + wr_item_qty#18723L) as double)) / 3.0) * 100.0) AS wr_dev#18712, CheckOverflow((promote_precision(cast(((sr_item_qty#18715L + cr_item_qty#18719L) + wr_item_qty#18723L) as decimal(21,1))) / 3.0), DecimalType(27,6)) AS average#18713]
      +- *(39) BroadcastHashJoin [item_id#18714], [item_id#18722], Inner, BuildRight, false
         :- *(39) Project [item_id#18714, sr_item_qty#18715L, cr_item_qty#18719L]
         :  +- *(39) BroadcastHashJoin [item_id#18714], [item_id#18718], Inner, BuildLeft, false
         :     :- BroadcastQueryStage 41
         :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=148337]
         :     :     +- *(37) HashAggregate(keys=[i_item_id#438], functions=[sum(sr_return_quantity#14)], output=[item_id#18714, sr_item_qty#18715L])
         :     :        +- ShuffleQueryStage 38
         :     :           +- Exchange hashpartitioning(i_item_id#438, 20), ENSURE_REQUIREMENTS, [plan_id=148153]
         :     :              +- *(30) HashAggregate(keys=[i_item_id#438], functions=[partial_sum(sr_return_quantity#14)], output=[i_item_id#438, sum#19010L])
         :     :                 +- *(30) Project [sr_return_quantity#14, i_item_id#438]
         :     :                    +- *(30) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false
         :     :                       :- *(30) Project [sr_returned_date_sk#4, sr_return_quantity#14, i_item_id#438]
         :     :                       :  +- *(30) SortMergeJoin [sr_item_sk#6], [i_item_sk#437], Inner
         :     :                       :     :- *(28) Sort [sr_item_sk#6 ASC NULLS FIRST], false, 0
         :     :                       :     :  +- ShuffleQueryStage 0
         :     :                       :     :     +- Exchange hashpartitioning(sr_item_sk#6, 20), ENSURE_REQUIREMENTS, [plan_id=145324]
         :     :                       :     :        +- *(1) Filter (isnotnull(sr_item_sk#6) AND isnotnull(sr_returned_date_sk#4))
         :     :                       :     :           +- *(1) ColumnarToRow
         :     :                       :     :              +- FileScan parquet default.store_returns[sr_returned_date_sk#4,sr_item_sk#6,sr_return_quantity#14] Batched: true, DataFilters: [isnotnull(sr_item_sk#6), isnotnull(sr_returned_date_sk#4)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_returned_date_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_item_sk:int,sr_return_quantity:int>
         :     :                       :     +- *(29) Sort [i_item_sk#437 ASC NULLS FIRST], false, 0
         :     :                       :        +- ShuffleQueryStage 1
         :     :                       :           +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=145341]
         :     :                       :              +- *(2) Filter (isnotnull(i_item_sk#437) AND isnotnull(i_item_id#438))
         :     :                       :                 +- *(2) ColumnarToRow
         :     :                       :                    +- FileScan parquet default.item[i_item_sk#437,i_item_id#438] Batched: true, DataFilters: [isnotnull(i_item_sk#437), isnotnull(i_item_id#438)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)], ReadSchema: struct<i_item_sk:int,i_item_id:string>
         :     :                       +- BroadcastQueryStage 33
         :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=147756]
         :     :                             +- *(25) Project [d_date_sk#24]
         :     :                                +- *(25) BroadcastHashJoin [d_date#26], [d_date#18916], LeftSemi, BuildRight, false
         :     :                                   :- AQEShuffleRead local
         :     :                                   :  +- ShuffleQueryStage 2
         :     :                                   :     +- Exchange hashpartitioning(d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=145360]
         :     :                                   :        +- *(3) Filter isnotnull(d_date_sk#24)
         :     :                                   :           +- *(3) ColumnarToRow
         :     :                                   :              +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>
         :     :                                   +- BroadcastQueryStage 28
         :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [plan_id=147483]
         :     :                                         +- AQEShuffleRead local
         :     :                                            +- ShuffleQueryStage 23
         :     :                                               +- Exchange hashpartitioning(d_date#18916, 20), ENSURE_REQUIREMENTS, [plan_id=146959]
         :     :                                                  +- *(18) Project [d_date#18916]
         :     :                                                     +- *(18) SortMergeJoin [d_week_seq#18918], [d_week_seq#18830], LeftSemi
         :     :                                                        :- *(16) Sort [d_week_seq#18918 ASC NULLS FIRST], false, 0
         :     :                                                        :  +- ShuffleQueryStage 3
         :     :                                                        :     +- Exchange hashpartitioning(d_week_seq#18918, 20), ENSURE_REQUIREMENTS, [plan_id=145375]
         :     :                                                        :        +- *(4) ColumnarToRow
         :     :                                                        :           +- FileScan parquet default.date_dim[d_date#18916,d_week_seq#18918] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     :                                                        +- *(17) Sort [d_week_seq#18830 ASC NULLS FIRST], false, 0
         :     :                                                           +- ShuffleQueryStage 4
         :     :                                                              +- Exchange hashpartitioning(d_week_seq#18830, 20), ENSURE_REQUIREMENTS, [plan_id=145392]
         :     :                                                                 +- *(5) Project [d_week_seq#18830]
         :     :                                                                    +- *(5) Filter cast(d_date#18828 as string) IN (2000-06-30,2000-09-27,2000-11-17)
         :     :                                                                       +- *(5) ColumnarToRow
         :     :                                                                          +- FileScan parquet default.date_dim[d_date#18828,d_week_seq#18830] Batched: true, DataFilters: [cast(d_date#18828 as string) IN (2000-06-30,2000-09-27,2000-11-17)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<d_date:date,d_week_seq:int>
         :     +- *(39) HashAggregate(keys=[i_item_id#18727], functions=[sum(cr_return_quantity#3308)], output=[item_id#18718, cr_item_qty#18719L])
         :        +- ShuffleQueryStage 39
         :           +- Exchange hashpartitioning(i_item_id#18727, 20), ENSURE_REQUIREMENTS, [plan_id=148196]
         :              +- *(33) HashAggregate(keys=[i_item_id#18727], functions=[partial_sum(cr_return_quantity#3308)], output=[i_item_id#18727, sum#19012L])
         :                 +- *(33) Project [cr_return_quantity#3308, i_item_id#18727]
         :                    +- *(33) BroadcastHashJoin [cr_returned_date_sk#3291], [d_date_sk#18748], Inner, BuildRight, false
         :                       :- *(33) Project [cr_returned_date_sk#3291, cr_return_quantity#3308, i_item_id#18727]
         :                       :  +- *(33) SortMergeJoin [cr_item_sk#3293], [i_item_sk#18726], Inner
         :                       :     :- *(31) Sort [cr_item_sk#3293 ASC NULLS FIRST], false, 0
         :                       :     :  +- ShuffleQueryStage 5
         :                       :     :     +- Exchange hashpartitioning(cr_item_sk#3293, 20), ENSURE_REQUIREMENTS, [plan_id=145484]
         :                       :     :        +- *(6) Filter (isnotnull(cr_item_sk#3293) AND isnotnull(cr_returned_date_sk#3291))
         :                       :     :           +- *(6) ColumnarToRow
         :                       :     :              +- FileScan parquet default.catalog_returns[cr_returned_date_sk#3291,cr_item_sk#3293,cr_return_quantity#3308] Batched: true, DataFilters: [isnotnull(cr_item_sk#3293), isnotnull(cr_returned_date_sk#3291)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_returned_date_sk)], ReadSchema: struct<cr_returned_date_sk:int,cr_item_sk:int,cr_return_quantity:int>
         :                       :     +- *(32) Sort [i_item_sk#18726 ASC NULLS FIRST], false, 0
         :                       :        +- ShuffleQueryStage 7
         :                       :           +- ReusedExchange [i_item_sk#18726, i_item_id#18727], Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=145341]
         :                       +- BroadcastQueryStage 35
         :                          +- ReusedExchange [d_date_sk#18748], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=147756]
         +- BroadcastQueryStage 42
            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=148404]
               +- *(38) HashAggregate(keys=[i_item_id#18777], functions=[sum(wr_return_quantity#3341)], output=[item_id#18722, wr_item_qty#18723L])
                  +- ShuffleQueryStage 40
                     +- Exchange hashpartitioning(i_item_id#18777, 20), ENSURE_REQUIREMENTS, [plan_id=148241]
                        +- *(36) HashAggregate(keys=[i_item_id#18777], functions=[partial_sum(wr_return_quantity#3341)], output=[i_item_id#18777, sum#19014L])
                           +- *(36) Project [wr_return_quantity#3341, i_item_id#18777]
                              +- *(36) BroadcastHashJoin [wr_returned_date_sk#3327], [d_date_sk#18798], Inner, BuildRight, false
                                 :- *(36) Project [wr_returned_date_sk#3327, wr_return_quantity#3341, i_item_id#18777]
                                 :  +- *(36) SortMergeJoin [wr_item_sk#3329], [i_item_sk#18776], Inner
                                 :     :- *(34) Sort [wr_item_sk#3329 ASC NULLS FIRST], false, 0
                                 :     :  +- ShuffleQueryStage 14
                                 :     :     +- Exchange hashpartitioning(wr_item_sk#3329, 20), ENSURE_REQUIREMENTS, [plan_id=145654]
                                 :     :        +- *(11) Filter (isnotnull(wr_item_sk#3329) AND isnotnull(wr_returned_date_sk#3327))
                                 :     :           +- *(11) ColumnarToRow
                                 :     :              +- FileScan parquet default.web_returns[wr_returned_date_sk#3327,wr_item_sk#3329,wr_return_quantity#3341] Batched: true, DataFilters: [isnotnull(wr_item_sk#3329), isnotnull(wr_returned_date_sk#3327)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_returned_date_sk)], ReadSchema: struct<wr_returned_date_sk:int,wr_item_sk:int,wr_return_quantity:int>
                                 :     +- *(35) Sort [i_item_sk#18776 ASC NULLS FIRST], false, 0
                                 :        +- ShuffleQueryStage 16
                                 :           +- ReusedExchange [i_item_sk#18776, i_item_id#18777], Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=145341]
                                 +- BroadcastQueryStage 37
                                    +- ReusedExchange [d_date_sk#18798], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=147756]


== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST], output=[customer_id#19040,customername#19041])
   +- *(7) Project [c_customer_id#82 AS customer_id#19040, concat(c_last_name#90, , , c_first_name#89) AS customername#19041, c_customer_id#82]
      +- *(7) BroadcastHashJoin [cd_demo_sk#3633], [sr_cdemo_sk#8], Inner, BuildRight, false
         :- *(7) Project [c_customer_id#82, c_first_name#89, c_last_name#90, cd_demo_sk#3633]
         :  +- *(7) BroadcastHashJoin [hd_income_band_sk#5552], [ib_income_band_sk#19042], Inner, BuildRight, false
         :     :- *(7) Project [c_customer_id#82, c_first_name#89, c_last_name#90, cd_demo_sk#3633, hd_income_band_sk#5552]
         :     :  +- *(7) BroadcastHashJoin [c_current_hdemo_sk#84], [hd_demo_sk#5551], Inner, BuildRight, false
         :     :     :- *(7) Project [c_customer_id#82, c_current_hdemo_sk#84, c_first_name#89, c_last_name#90, cd_demo_sk#3633]
         :     :     :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#83], [cd_demo_sk#3633], Inner, BuildRight, false
         :     :     :     :- *(7) Project [c_customer_id#82, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_first_name#89, c_last_name#90]
         :     :     :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
         :     :     :     :     :- AQEShuffleRead local
         :     :     :     :     :  +- ShuffleQueryStage 0
         :     :     :     :     :     +- Exchange hashpartitioning(c_current_addr_sk#85, 20), ENSURE_REQUIREMENTS, [plan_id=148600]
         :     :     :     :     :        +- *(1) Filter ((isnotnull(c_current_addr_sk#85) AND isnotnull(c_current_cdemo_sk#83)) AND isnotnull(c_current_hdemo_sk#84))
         :     :     :     :     :           +- *(1) ColumnarToRow
         :     :     :     :     :              +- FileScan parquet default.customer[c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#85), isnotnull(c_current_cdemo_sk#83), isnotnull(c_current_hdemo_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)], ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c...
         :     :     :     :     +- BroadcastQueryStage 6
         :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=149067]
         :     :     :     :           +- AQEShuffleRead local
         :     :     :     :              +- ShuffleQueryStage 1
         :     :     :     :                 +- Exchange hashpartitioning(ca_address_sk#3717, 20), ENSURE_REQUIREMENTS, [plan_id=148626]
         :     :     :     :                    +- *(2) Project [ca_address_sk#3717]
         :     :     :     :                       +- *(2) Filter ((isnotnull(ca_city#3723) AND (ca_city#3723 = Edgewood)) AND isnotnull(ca_address_sk#3717))
         :     :     :     :                          +- *(2) ColumnarToRow
         :     :     :     :                             +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_city#3723] Batched: true, DataFilters: [isnotnull(ca_city#3723), (ca_city#3723 = Edgewood), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_city), EqualTo(ca_city,Edgewood), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_city:string>
         :     :     :     +- BroadcastQueryStage 2
         :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=148651]
         :     :     :           +- *(3) Filter isnotnull(cd_demo_sk#3633)
         :     :     :              +- *(3) ColumnarToRow
         :     :     :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#3633] Batched: true, DataFilters: [isnotnull(cd_demo_sk#3633)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int>
         :     :     +- BroadcastQueryStage 3
         :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=148672]
         :     :           +- *(4) Filter (isnotnull(hd_demo_sk#5551) AND isnotnull(hd_income_band_sk#5552))
         :     :              +- *(4) ColumnarToRow
         :     :                 +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_income_band_sk#5552] Batched: true, DataFilters: [isnotnull(hd_demo_sk#5551), isnotnull(hd_income_band_sk#5552)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)], ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>
         :     +- BroadcastQueryStage 4
         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=148697]
         :           +- *(5) Project [ib_income_band_sk#19042]
         :              +- *(5) Filter ((((isnotnull(ib_lower_bound#19043) AND isnotnull(ib_upper_bound#19044)) AND (ib_lower_bound#19043 >= 38128)) AND (ib_upper_bound#19044 <= 88128)) AND isnotnull(ib_income_band_sk#19042))
         :                 +- *(5) ColumnarToRow
         :                    +- FileScan parquet default.income_band[ib_income_band_sk#19042,ib_lower_bound#19043,ib_upper_bound#19044] Batched: true, DataFilters: [isnotnull(ib_lower_bound#19043), isnotnull(ib_upper_bound#19044), (ib_lower_bound#19043 >= 38128..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/income_band], PartitionFilters: [], PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,38128), ..., ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>
         +- BroadcastQueryStage 5
            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=148720]
               +- *(6) Filter isnotnull(sr_cdemo_sk#8)
                  +- *(6) ColumnarToRow
                     +- FileScan parquet default.store_returns[sr_cdemo_sk#8] Batched: true, DataFilters: [isnotnull(sr_cdemo_sk#8)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_cdemo_sk)], ReadSchema: struct<sr_cdemo_sk:int>


==== q85 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[substr(r_reason_desc, 1, 20)#19061 ASC NULLS FIRST,avg(ws_quantity)#19062 ASC NULLS FIRST,avg(wr_refunded_cash)#19063 ASC NULLS FIRST,avg(wr_fee)#19064 ASC NULLS FIRST], output=[substr(r_reason_desc, 1, 20)#19061,avg(ws_quantity)#19062,avg(wr_refunded_cash)#19063,avg(wr_fee)#19064])
   +- *(12) HashAggregate(keys=[r_reason_desc#3782], functions=[avg(ws_quantity#181), avg(UnscaledValue(wr_refunded_cash#3347)), avg(UnscaledValue(wr_fee#3345))], output=[substr(r_reason_desc, 1, 20)#19061, avg(ws_quantity)#19062, avg(wr_refunded_cash)#19063, avg(wr_fee)#19064])
      +- ShuffleQueryStage 8
         +- Exchange hashpartitioning(r_reason_desc#3782, 20), ENSURE_REQUIREMENTS, [plan_id=150316]
            +- *(11) HashAggregate(keys=[r_reason_desc#3782], functions=[partial_avg(ws_quantity#181), partial_avg(UnscaledValue(wr_refunded_cash#3347)), partial_avg(UnscaledValue(wr_fee#3345))], output=[r_reason_desc#3782, sum#19078, count#19079L, sum#19080, count#19081L, sum#19082, count#19083L])
               +- *(11) Project [ws_quantity#181, wr_fee#3345, wr_refunded_cash#3347, r_reason_desc#3782]
                  +- *(11) BroadcastHashJoin [wr_reason_sk#3339], [r_reason_sk#3780], Inner, BuildRight, false
                     :- *(11) Project [ws_quantity#181, wr_reason_sk#3339, wr_fee#3345, wr_refunded_cash#3347]
                     :  +- *(11) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                     :     :- *(11) Project [ws_sold_date_sk#163, ws_quantity#181, wr_reason_sk#3339, wr_fee#3345, wr_refunded_cash#3347]
                     :     :  +- *(11) BroadcastHashJoin [wr_refunded_addr_sk#3333], [ca_address_sk#3717], Inner, BuildRight, ((((ca_state#3725 IN (IN,OH,NJ) AND (ws_net_profit#196 >= 100.00)) AND (ws_net_profit#196 <= 200.00)) OR ((ca_state#3725 IN (WI,CT,KY) AND (ws_net_profit#196 >= 150.00)) AND (ws_net_profit#196 <= 300.00))) OR ((ca_state#3725 IN (LA,IA,AR) AND (ws_net_profit#196 >= 50.00)) AND (ws_net_profit#196 <= 250.00))), false
                     :     :     :- *(11) Project [ws_sold_date_sk#163, ws_quantity#181, ws_net_profit#196, wr_refunded_addr_sk#3333, wr_reason_sk#3339, wr_fee#3345, wr_refunded_cash#3347]
                     :     :     :  +- *(11) BroadcastHashJoin [wr_returning_cdemo_sk#3335, cd_marital_status#3635, cd_education_status#3636], [cd_demo_sk#19048, cd_marital_status#19050, cd_education_status#19051], Inner, BuildRight, false
                     :     :     :     :- *(11) Project [ws_sold_date_sk#163, ws_quantity#181, ws_net_profit#196, wr_refunded_addr_sk#3333, wr_returning_cdemo_sk#3335, wr_reason_sk#3339, wr_fee#3345, wr_refunded_cash#3347, cd_marital_status#3635, cd_education_status#3636]
                     :     :     :     :  +- *(11) BroadcastHashJoin [wr_refunded_cdemo_sk#3331], [cd_demo_sk#3633], Inner, BuildRight, ((((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Advanced Degree     )) AND (ws_sales_price#184 >= 100.00)) AND (ws_sales_price#184 <= 150.00)) OR ((((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             )) AND (ws_sales_price#184 >= 50.00)) AND (ws_sales_price#184 <= 100.00))) OR ((((cd_marital_status#3635 = W) AND (cd_education_status#3636 = 2 yr Degree         )) AND (ws_sales_price#184 >= 150.00)) AND (ws_sales_price#184 <= 200.00))), false
                     :     :     :     :     :- *(11) Project [ws_sold_date_sk#163, ws_quantity#181, ws_sales_price#184, ws_net_profit#196, wr_refunded_cdemo_sk#3331, wr_refunded_addr_sk#3333, wr_returning_cdemo_sk#3335, wr_reason_sk#3339, wr_fee#3345, wr_refunded_cash#3347]
                     :     :     :     :     :  +- *(11) BroadcastHashJoin [ws_web_page_sk#175], [wp_web_page_sk#17839], Inner, BuildRight, false
                     :     :     :     :     :     :- *(11) Project [ws_sold_date_sk#163, ws_web_page_sk#175, ws_quantity#181, ws_sales_price#184, ws_net_profit#196, wr_refunded_cdemo_sk#3331, wr_refunded_addr_sk#3333, wr_returning_cdemo_sk#3335, wr_reason_sk#3339, wr_fee#3345, wr_refunded_cash#3347]
                     :     :     :     :     :     :  +- *(11) SortMergeJoin [ws_item_sk#166, ws_order_number#180], [wr_item_sk#3329, wr_order_number#3340], Inner
                     :     :     :     :     :     :     :- *(9) Sort [ws_item_sk#166 ASC NULLS FIRST, ws_order_number#180 ASC NULLS FIRST], false, 0
                     :     :     :     :     :     :     :  +- ShuffleQueryStage 0
                     :     :     :     :     :     :     :     +- Exchange hashpartitioning(ws_item_sk#166, ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=149419]
                     :     :     :     :     :     :     :        +- *(1) Filter (((((isnotnull(ws_item_sk#166) AND isnotnull(ws_order_number#180)) AND isnotnull(ws_web_page_sk#175)) AND isnotnull(ws_sold_date_sk#163)) AND ((((ws_sales_price#184 >= 100.00) AND (ws_sales_price#184 <= 150.00)) OR ((ws_sales_price#184 >= 50.00) AND (ws_sales_price#184 <= 100.00))) OR ((ws_sales_price#184 >= 150.00) AND (ws_sales_price#184 <= 200.00)))) AND ((((ws_net_profit#196 >= 100.00) AND (ws_net_profit#196 <= 200.00)) OR ((ws_net_profit#196 >= 150.00) AND (ws_net_profit#196 <= 300.00))) OR ((ws_net_profit#196 >= 50.00) AND (ws_net_profit#196 <= 250.00))))
                     :     :     :     :     :     :     :           +- *(1) ColumnarToRow
                     :     :     :     :     :     :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_web_page_sk#175,ws_order_number#180,ws_quantity#181,ws_sales_price#184,ws_net_profit#196] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_order_number#180), isnotnull(ws_web_page_sk#175), isnotn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), IsNotNull(ws_sold_..., ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,...
                     :     :     :     :     :     :     +- *(10) Sort [wr_item_sk#3329 ASC NULLS FIRST, wr_order_number#3340 ASC NULLS FIRST], false, 0
                     :     :     :     :     :     :        +- ShuffleQueryStage 1
                     :     :     :     :     :     :           +- Exchange hashpartitioning(wr_item_sk#3329, wr_order_number#3340, 20), ENSURE_REQUIREMENTS, [plan_id=149436]
                     :     :     :     :     :     :              +- *(2) Filter (((((isnotnull(wr_item_sk#3329) AND isnotnull(wr_order_number#3340)) AND isnotnull(wr_refunded_cdemo_sk#3331)) AND isnotnull(wr_returning_cdemo_sk#3335)) AND isnotnull(wr_refunded_addr_sk#3333)) AND isnotnull(wr_reason_sk#3339))
                     :     :     :     :     :     :                 +- *(2) ColumnarToRow
                     :     :     :     :     :     :                    +- FileScan parquet default.web_returns[wr_item_sk#3329,wr_refunded_cdemo_sk#3331,wr_refunded_addr_sk#3333,wr_returning_cdemo_sk#3335,wr_reason_sk#3339,wr_order_number#3340,wr_fee#3345,wr_refunded_cash#3347] Batched: true, DataFilters: [isnotnull(wr_item_sk#3329), isnotnull(wr_order_number#3340), isnotnull(wr_refunded_cdemo_sk#3331..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...
                     :     :     :     :     :     +- BroadcastQueryStage 2
                     :     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=149455]
                     :     :     :     :     :           +- *(3) Filter isnotnull(wp_web_page_sk#17839)
                     :     :     :     :     :              +- *(3) ColumnarToRow
                     :     :     :     :     :                 +- FileScan parquet default.web_page[wp_web_page_sk#17839] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#17839)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>
                     :     :     :     :     +- BroadcastQueryStage 3
                     :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=149472]
                     :     :     :     :           +- *(4) Filter (((isnotnull(cd_demo_sk#3633) AND isnotnull(cd_marital_status#3635)) AND isnotnull(cd_education_status#3636)) AND ((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Advanced Degree     )) OR ((cd_marital_status#3635 = S) AND (cd_education_status#3636 = College             ))) OR ((cd_marital_status#3635 = W) AND (cd_education_status#3636 = 2 yr Degree         ))))
                     :     :     :     :              +- *(4) ColumnarToRow
                     :     :     :     :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [isnotnull(cd_demo_sk#3633), isnotnull(cd_marital_status#3635), isnotnull(cd_education_status#363..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>
                     :     :     :     +- BroadcastQueryStage 4
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, string, false], input[2, string, false]),false), [plan_id=149489]
                     :     :     :           +- *(5) Filter ((isnotnull(cd_demo_sk#19048) AND isnotnull(cd_marital_status#19050)) AND isnotnull(cd_education_status#19051))
                     :     :     :              +- *(5) ColumnarToRow
                     :     :     :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#19048,cd_marital_status#19050,cd_education_status#19051] Batched: true, DataFilters: [isnotnull(cd_demo_sk#19048), isnotnull(cd_marital_status#19050), isnotnull(cd_education_status#1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>
                     :     :     +- BroadcastQueryStage 5
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=149508]
                     :     :           +- *(6) Project [ca_address_sk#3717, ca_state#3725]
                     :     :              +- *(6) Filter (((isnotnull(ca_country#3727) AND (ca_country#3727 = United States)) AND isnotnull(ca_address_sk#3717)) AND ((ca_state#3725 IN (IN,OH,NJ) OR ca_state#3725 IN (WI,CT,KY)) OR ca_state#3725 IN (LA,IA,AR)))
                     :     :                 +- *(6) ColumnarToRow
                     :     :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725,ca_country#3727] Batched: true, DataFilters: [isnotnull(ca_country#3727), (ca_country#3727 = United States), isnotnull(ca_address_sk#3717), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>
                     :     +- BroadcastQueryStage 6
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=149529]
                     :           +- *(7) Project [d_date_sk#24]
                     :              +- *(7) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
                     :                 +- *(7) ColumnarToRow
                     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
                     +- BroadcastQueryStage 7
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=149548]
                           +- *(8) Filter isnotnull(r_reason_sk#3780)
                              +- *(8) ColumnarToRow
                                 +- FileScan parquet default.reason[r_reason_sk#3780,r_reason_desc#3782] Batched: true, DataFilters: [isnotnull(r_reason_sk#3780)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/reason], PartitionFilters: [], PushedFilters: [IsNotNull(r_reason_sk)], ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>


==== q86 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[lochierarchy#19103 DESC NULLS LAST,CASE WHEN (lochierarchy#19103 = 0) THEN i_category#19112 END ASC NULLS FIRST,rank_within_parent#19104 ASC NULLS FIRST], output=[total_sum#19102,i_category#19112,i_class#19113,lochierarchy#19103,rank_within_parent#19104])
   +- *(6) Project [total_sum#19102, i_category#19112, i_class#19113, lochierarchy#19103, rank_within_parent#19104]
      +- Window [rank(_w3#19128) windowspecdefinition(_w1#19126, _w2#19127, _w3#19128 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#19104], [_w1#19126, _w2#19127], [_w3#19128 DESC NULLS LAST]
         +- *(5) Sort [_w1#19126 ASC NULLS FIRST, _w2#19127 ASC NULLS FIRST, _w3#19128 DESC NULLS LAST], false, 0
            +- ShuffleQueryStage 3
               +- Exchange hashpartitioning(_w1#19126, _w2#19127, 20), ENSURE_REQUIREMENTS, [plan_id=150744]
                  +- *(4) HashAggregate(keys=[i_category#19112, i_class#19113, spark_grouping_id#19111L], functions=[sum(UnscaledValue(ws_net_paid#192))], output=[total_sum#19102, i_category#19112, i_class#19113, lochierarchy#19103, _w1#19126, _w2#19127, _w3#19128])
                     +- ShuffleQueryStage 2
                        +- Exchange hashpartitioning(i_category#19112, i_class#19113, spark_grouping_id#19111L, 20), ENSURE_REQUIREMENTS, [plan_id=150694]
                           +- *(3) HashAggregate(keys=[i_category#19112, i_class#19113, spark_grouping_id#19111L], functions=[partial_sum(UnscaledValue(ws_net_paid#192))], output=[i_category#19112, i_class#19113, spark_grouping_id#19111L, sum#19141L])
                              +- *(3) Expand [[ws_net_paid#192, i_category#449, i_class#447, 0], [ws_net_paid#192, i_category#449, null, 1], [ws_net_paid#192, null, null, 3]], [ws_net_paid#192, i_category#19112, i_class#19113, spark_grouping_id#19111L]
                                 +- *(3) Project [ws_net_paid#192, i_category#449, i_class#447]
                                    +- *(3) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#437], Inner, BuildRight, false
                                       :- *(3) Project [ws_item_sk#166, ws_net_paid#192]
                                       :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                                       :     :- *(3) Filter (isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_item_sk#166))
                                       :     :  +- *(3) ColumnarToRow
                                       :     :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_net_paid#192] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_item_sk#166)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_net_paid:decimal(7,2)>
                                       :     +- BroadcastQueryStage 0
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=150509]
                                       :           +- *(1) Project [d_date_sk#24]
                                       :              +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                                       :                 +- *(1) ColumnarToRow
                                       :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                                       +- BroadcastQueryStage 1
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=150528]
                                             +- *(2) Filter isnotnull(i_item_sk#437)
                                                +- *(2) ColumnarToRow
                                                   +- FileScan parquet default.item[i_item_sk#437,i_class#447,i_category#449] Batched: true, DataFilters: [isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>


==== q87 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(19) HashAggregate(keys=[], functions=[count(1)], output=[count(1)#19240L])
   +- ShuffleQueryStage 17
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=152480]
         +- *(18) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19247L])
            +- *(18) Project
               +- *(18) SortMergeJoin [coalesce(c_last_name#90, ), isnull(c_last_name#90), coalesce(c_first_name#89, ), isnull(c_first_name#89), coalesce(d_date#26, 1970-01-01), isnull(d_date#26)], [coalesce(c_last_name#19231, ), isnull(c_last_name#19231), coalesce(c_first_name#19230, ), isnull(c_first_name#19230), coalesce(d_date#19196, 1970-01-01), isnull(d_date#19196)], LeftAnti
                  :- *(16) SortMergeJoin [coalesce(c_last_name#90, ), isnull(c_last_name#90), coalesce(c_first_name#89, ), isnull(c_first_name#89), coalesce(d_date#26, 1970-01-01), isnull(d_date#26)], [coalesce(c_last_name#19185, ), isnull(c_last_name#19185), coalesce(c_first_name#19184, ), isnull(c_first_name#19184), coalesce(d_date#19150, 1970-01-01), isnull(d_date#19150)], LeftAnti
                  :  :- *(14) Sort [coalesce(c_last_name#90, ) ASC NULLS FIRST, isnull(c_last_name#90) ASC NULLS FIRST, coalesce(c_first_name#89, ) ASC NULLS FIRST, isnull(c_first_name#89) ASC NULLS FIRST, coalesce(d_date#26, 1970-01-01) ASC NULLS FIRST, isnull(d_date#26) ASC NULLS FIRST], false, 0
                  :  :  +- ShuffleQueryStage 13
                  :  :     +- Exchange hashpartitioning(coalesce(c_last_name#90, ), isnull(c_last_name#90), coalesce(c_first_name#89, ), isnull(c_first_name#89), coalesce(d_date#26, 1970-01-01), isnull(d_date#26), 20), ENSURE_REQUIREMENTS, [plan_id=152105]
                  :  :        +- *(10) HashAggregate(keys=[c_last_name#90, c_first_name#89, d_date#26], functions=[], output=[c_last_name#90, c_first_name#89, d_date#26])
                  :  :           +- ShuffleQueryStage 10
                  :  :              +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, d_date#26, 20), ENSURE_REQUIREMENTS, [plan_id=151843]
                  :  :                 +- *(8) HashAggregate(keys=[c_last_name#90, c_first_name#89, d_date#26], functions=[], output=[c_last_name#90, c_first_name#89, d_date#26])
                  :  :                    +- *(8) Project [c_last_name#90, c_first_name#89, d_date#26]
                  :  :                       +- *(8) BroadcastHashJoin [ss_customer_sk#417], [c_customer_sk#81], Inner, BuildRight, false
                  :  :                          :- *(8) Project [ss_customer_sk#417, d_date#26]
                  :  :                          :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :  :                          :     :- *(8) Filter (isnotnull(ss_sold_date_sk#414) AND isnotnull(ss_customer_sk#417))
                  :  :                          :     :  +- *(8) ColumnarToRow
                  :  :                          :     :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_customer_sk#417] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414), isnotnull(ss_customer_sk#417)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>
                  :  :                          :     +- BroadcastQueryStage 0
                  :  :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=151131]
                  :  :                          :           +- *(1) Project [d_date_sk#24, d_date#26]
                  :  :                          :              +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                  :  :                          :                 +- *(1) ColumnarToRow
                  :  :                          :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                  :  :                          +- BroadcastQueryStage 1
                  :  :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=151150]
                  :  :                                +- *(2) Filter isnotnull(c_customer_sk#81)
                  :  :                                   +- *(2) ColumnarToRow
                  :  :                                      +- FileScan parquet default.customer[c_customer_sk#81,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>
                  :  +- *(15) Sort [coalesce(c_last_name#19185, ) ASC NULLS FIRST, isnull(c_last_name#19185) ASC NULLS FIRST, coalesce(c_first_name#19184, ) ASC NULLS FIRST, isnull(c_first_name#19184) ASC NULLS FIRST, coalesce(d_date#19150, 1970-01-01) ASC NULLS FIRST, isnull(d_date#19150) ASC NULLS FIRST], false, 0
                  :     +- ShuffleQueryStage 16
                  :        +- Exchange hashpartitioning(coalesce(c_last_name#19185, ), isnull(c_last_name#19185), coalesce(c_first_name#19184, ), isnull(c_first_name#19184), coalesce(d_date#19150, 1970-01-01), isnull(d_date#19150), 20), ENSURE_REQUIREMENTS, [plan_id=152404]
                  :           +- *(13) HashAggregate(keys=[c_last_name#19185, c_first_name#19184, d_date#19150], functions=[], output=[c_last_name#19185, c_first_name#19184, d_date#19150])
                  :              +- ShuffleQueryStage 11
                  :                 +- Exchange hashpartitioning(c_last_name#19185, c_first_name#19184, d_date#19150, 20), ENSURE_REQUIREMENTS, [plan_id=151886]
                  :                    +- *(9) HashAggregate(keys=[c_last_name#19185, c_first_name#19184, d_date#19150], functions=[], output=[c_last_name#19185, c_first_name#19184, d_date#19150])
                  :                       +- *(9) Project [c_last_name#19185, c_first_name#19184, d_date#19150]
                  :                          +- *(9) BroadcastHashJoin [cs_bill_customer_sk#200], [c_customer_sk#19176], Inner, BuildRight, false
                  :                             :- *(9) Project [cs_bill_customer_sk#200, d_date#19150]
                  :                             :  +- *(9) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#19148], Inner, BuildRight, false
                  :                             :     :- *(9) Filter (isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_bill_customer_sk#200))
                  :                             :     :  +- *(9) ColumnarToRow
                  :                             :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197), isnotnull(cs_bill_customer_sk#200)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>
                  :                             :     +- BroadcastQueryStage 3
                  :                             :        +- ReusedExchange [d_date_sk#19148, d_date#19150], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=151131]
                  :                             +- BroadcastQueryStage 5
                  :                                +- ReusedExchange [c_customer_sk#19176, c_first_name#19184, c_last_name#19185], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=151150]
                  +- *(17) Sort [coalesce(c_last_name#19231, ) ASC NULLS FIRST, isnull(c_last_name#19231) ASC NULLS FIRST, coalesce(c_first_name#19230, ) ASC NULLS FIRST, isnull(c_first_name#19230) ASC NULLS FIRST, coalesce(d_date#19196, 1970-01-01) ASC NULLS FIRST, isnull(d_date#19196) ASC NULLS FIRST], false, 0
                     +- ShuffleQueryStage 15
                        +- Exchange hashpartitioning(coalesce(c_last_name#19231, ), isnull(c_last_name#19231), coalesce(c_first_name#19230, ), isnull(c_first_name#19230), coalesce(d_date#19196, 1970-01-01), isnull(d_date#19196), 20), ENSURE_REQUIREMENTS, [plan_id=152313]
                           +- *(12) HashAggregate(keys=[c_last_name#19231, c_first_name#19230, d_date#19196], functions=[], output=[c_last_name#19231, c_first_name#19230, d_date#19196])
                              +- ShuffleQueryStage 14
                                 +- Exchange hashpartitioning(c_last_name#19231, c_first_name#19230, d_date#19196, 20), ENSURE_REQUIREMENTS, [plan_id=152203]
                                    +- *(11) HashAggregate(keys=[c_last_name#19231, c_first_name#19230, d_date#19196], functions=[], output=[c_last_name#19231, c_first_name#19230, d_date#19196])
                                       +- *(11) Project [c_last_name#19231, c_first_name#19230, d_date#19196]
                                          +- *(11) BroadcastHashJoin [ws_bill_customer_sk#167], [c_customer_sk#19222], Inner, BuildRight, false
                                             :- *(11) Project [ws_bill_customer_sk#167, d_date#19196]
                                             :  +- *(11) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#19194], Inner, BuildRight, false
                                             :     :- AQEShuffleRead local
                                             :     :  +- ShuffleQueryStage 6
                                             :     :     +- Exchange hashpartitioning(ws_sold_date_sk#163, 20), ENSURE_REQUIREMENTS, [plan_id=151220]
                                             :     :        +- *(5) Filter (isnotnull(ws_sold_date_sk#163) AND isnotnull(ws_bill_customer_sk#167))
                                             :     :           +- *(5) ColumnarToRow
                                             :     :              +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_bill_customer_sk#167] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#163), isnotnull(ws_bill_customer_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>
                                             :     +- BroadcastQueryStage 12
                                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=152002]
                                             :           +- AQEShuffleRead local
                                             :              +- ShuffleQueryStage 7
                                             :                 +- Exchange hashpartitioning(d_date_sk#19194, 20), ENSURE_REQUIREMENTS, [plan_id=151239]
                                             :                    +- *(6) Project [d_date_sk#19194, d_date#19196]
                                             :                       +- *(6) Filter (((isnotnull(d_month_seq#19197) AND (d_month_seq#19197 >= 1200)) AND (d_month_seq#19197 <= 1211)) AND isnotnull(d_date_sk#19194))
                                             :                          +- *(6) ColumnarToRow
                                             :                             +- FileScan parquet default.date_dim[d_date_sk#19194,d_date#19196,d_month_seq#19197] Batched: true, DataFilters: [isnotnull(d_month_seq#19197), (d_month_seq#19197 >= 1200), (d_month_seq#19197 <= 1211), isnotnul..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>
                                             +- BroadcastQueryStage 9
                                                +- ReusedExchange [c_customer_sk#19222, c_first_name#19230, c_last_name#19231], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=151150]


==== q88 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(41) BroadcastNestedLoopJoin BuildRight, Inner
   :- *(41) BroadcastNestedLoopJoin BuildRight, Inner
   :  :- *(41) BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :- *(41) BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :  :- *(41) BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :  :  :- *(41) BroadcastNestedLoopJoin BuildRight, Inner
   :  :  :  :  :  :- CartesianProduct
   :  :  :  :  :  :  :- *(39) HashAggregate(keys=[], functions=[count(1)], output=[h8_30_to_9#19248L])
   :  :  :  :  :  :  :  +- ShuffleQueryStage 38
   :  :  :  :  :  :  :     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=156643]
   :  :  :  :  :  :  :        +- *(25) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19770L])
   :  :  :  :  :  :  :           +- *(25) Project
   :  :  :  :  :  :  :              +- *(25) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
   :  :  :  :  :  :  :                 :- *(25) Project [ss_store_sk#421]
   :  :  :  :  :  :  :                 :  +- *(25) BroadcastHashJoin [ss_sold_time_sk#415], [t_time_sk#15927], Inner, BuildRight, false
   :  :  :  :  :  :  :                 :     :- *(25) Project [ss_sold_time_sk#415, ss_store_sk#421]
   :  :  :  :  :  :  :                 :     :  +- *(25) BroadcastHashJoin [ss_hdemo_sk#419], [hd_demo_sk#5551], Inner, BuildRight, false
   :  :  :  :  :  :  :                 :     :     :- *(25) Filter ((isnotnull(ss_hdemo_sk#419) AND isnotnull(ss_sold_time_sk#415)) AND isnotnull(ss_store_sk#421))
   :  :  :  :  :  :  :                 :     :     :  +- *(25) ColumnarToRow
   :  :  :  :  :  :  :                 :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#415,ss_hdemo_sk#419,ss_store_sk#421] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#419), isnotnull(ss_sold_time_sk#415), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :  :  :  :  :  :  :                 :     :     +- BroadcastQueryStage 0
   :  :  :  :  :  :  :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :  :  :  :  :  :  :                 :     :           +- *(1) Project [hd_demo_sk#5551]
   :  :  :  :  :  :  :                 :     :              +- *(1) Filter (((((hd_dep_count#5554 = 4) AND (hd_vehicle_count#5555 <= 6)) OR ((hd_dep_count#5554 = 2) AND (hd_vehicle_count#5555 <= 4))) OR ((hd_dep_count#5554 = 0) AND (hd_vehicle_count#5555 <= 2))) AND isnotnull(hd_demo_sk#5551))
   :  :  :  :  :  :  :                 :     :                 +- *(1) ColumnarToRow
   :  :  :  :  :  :  :                 :     :                    +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_dep_count#5554,hd_vehicle_count#5555] Batched: true, DataFilters: [((((hd_dep_count#5554 = 4) AND (hd_vehicle_count#5555 <= 6)) OR ((hd_dep_count#5554 = 2) AND (hd..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [Or(Or(And(EqualTo(hd_dep_count,4),LessThanOrEqual(hd_vehicle_count,6)),And(EqualTo(hd_dep_count,..., ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>
   :  :  :  :  :  :  :                 :     +- BroadcastQueryStage 1
   :  :  :  :  :  :  :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153318]
   :  :  :  :  :  :  :                 :           +- *(2) Project [t_time_sk#15927]
   :  :  :  :  :  :  :                 :              +- *(2) Filter ((((isnotnull(t_hour#15930) AND isnotnull(t_minute#15931)) AND (t_hour#15930 = 8)) AND (t_minute#15931 >= 30)) AND isnotnull(t_time_sk#15927))
   :  :  :  :  :  :  :                 :                 +- *(2) ColumnarToRow
   :  :  :  :  :  :  :                 :                    +- FileScan parquet default.time_dim[t_time_sk#15927,t_hour#15930,t_minute#15931] Batched: true, DataFilters: [isnotnull(t_hour#15930), isnotnull(t_minute#15931), (t_hour#15930 = 8), (t_minute#15931 >= 30), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,8), GreaterThanOrEqual(t_minute,30), IsNo..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :  :  :  :  :  :  :                 +- BroadcastQueryStage 2
   :  :  :  :  :  :  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   :  :  :  :  :  :  :                       +- *(3) Project [s_store_sk#52]
   :  :  :  :  :  :  :                          +- *(3) Filter ((isnotnull(s_store_name#57) AND (s_store_name#57 = ese)) AND isnotnull(s_store_sk#52))
   :  :  :  :  :  :  :                             +- *(3) ColumnarToRow
   :  :  :  :  :  :  :                                +- FileScan parquet default.store[s_store_sk#52,s_store_name#57] Batched: true, DataFilters: [isnotnull(s_store_name#57), (s_store_name#57 = ese), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_name), EqualTo(s_store_name,ese), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string>
   :  :  :  :  :  :  +- *(40) HashAggregate(keys=[], functions=[count(1)], output=[h9_to_9_30#19249L])
   :  :  :  :  :  :     +- ShuffleQueryStage 45
   :  :  :  :  :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=157679]
   :  :  :  :  :  :           +- *(32) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19772L])
   :  :  :  :  :  :              +- *(32) Project
   :  :  :  :  :  :                 +- *(32) BroadcastHashJoin [ss_store_sk#19271], [s_store_sk#19302], Inner, BuildRight, false
   :  :  :  :  :  :                    :- *(32) Project [ss_store_sk#19271]
   :  :  :  :  :  :                    :  +- *(32) BroadcastHashJoin [ss_sold_time_sk#19265], [t_time_sk#19292], Inner, BuildRight, false
   :  :  :  :  :  :                    :     :- *(32) Project [ss_sold_time_sk#19265, ss_store_sk#19271]
   :  :  :  :  :  :                    :     :  +- *(32) BroadcastHashJoin [ss_hdemo_sk#19269], [hd_demo_sk#19287], Inner, BuildRight, false
   :  :  :  :  :  :                    :     :     :- *(32) Filter ((isnotnull(ss_hdemo_sk#19269) AND isnotnull(ss_sold_time_sk#19265)) AND isnotnull(ss_store_sk#19271))
   :  :  :  :  :  :                    :     :     :  +- *(32) ColumnarToRow
   :  :  :  :  :  :                    :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19265,ss_hdemo_sk#19269,ss_store_sk#19271] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19269), isnotnull(ss_sold_time_sk#19265), isnotnull(ss_store_sk#19271)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :  :  :  :  :  :                    :     :     +- BroadcastQueryStage 4
   :  :  :  :  :  :                    :     :        +- ReusedExchange [hd_demo_sk#19287], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :  :  :  :  :  :                    :     +- BroadcastQueryStage 5
   :  :  :  :  :  :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153421]
   :  :  :  :  :  :                    :           +- *(5) Project [t_time_sk#19292]
   :  :  :  :  :  :                    :              +- *(5) Filter ((((isnotnull(t_hour#19295) AND isnotnull(t_minute#19296)) AND (t_hour#19295 = 9)) AND (t_minute#19296 < 30)) AND isnotnull(t_time_sk#19292))
   :  :  :  :  :  :                    :                 +- *(5) ColumnarToRow
   :  :  :  :  :  :                    :                    +- FileScan parquet default.time_dim[t_time_sk#19292,t_hour#19295,t_minute#19296] Batched: true, DataFilters: [isnotnull(t_hour#19295), isnotnull(t_minute#19296), (t_hour#19295 = 9), (t_minute#19296 < 30), i..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,9), LessThan(t_minute,30), IsNotNull(t_ti..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :  :  :  :  :  :                    +- BroadcastQueryStage 7
   :  :  :  :  :  :                       +- ReusedExchange [s_store_sk#19302], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   :  :  :  :  :  +- BroadcastQueryStage 51
   :  :  :  :  :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=158340]
   :  :  :  :  :        +- *(38) HashAggregate(keys=[], functions=[count(1)], output=[h9_30_to_10#19250L])
   :  :  :  :  :           +- ShuffleQueryStage 39
   :  :  :  :  :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=156693]
   :  :  :  :  :                 +- *(26) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19774L])
   :  :  :  :  :                    +- *(26) Project
   :  :  :  :  :                       +- *(26) BroadcastHashJoin [ss_store_sk#19338], [s_store_sk#19369], Inner, BuildRight, false
   :  :  :  :  :                          :- *(26) Project [ss_store_sk#19338]
   :  :  :  :  :                          :  +- *(26) BroadcastHashJoin [ss_sold_time_sk#19332], [t_time_sk#19359], Inner, BuildRight, false
   :  :  :  :  :                          :     :- *(26) Project [ss_sold_time_sk#19332, ss_store_sk#19338]
   :  :  :  :  :                          :     :  +- *(26) BroadcastHashJoin [ss_hdemo_sk#19336], [hd_demo_sk#19354], Inner, BuildRight, false
   :  :  :  :  :                          :     :     :- *(26) Filter ((isnotnull(ss_hdemo_sk#19336) AND isnotnull(ss_sold_time_sk#19332)) AND isnotnull(ss_store_sk#19338))
   :  :  :  :  :                          :     :     :  +- *(26) ColumnarToRow
   :  :  :  :  :                          :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19332,ss_hdemo_sk#19336,ss_store_sk#19338] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19336), isnotnull(ss_sold_time_sk#19332), isnotnull(ss_store_sk#19338)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :  :  :  :  :                          :     :     +- BroadcastQueryStage 9
   :  :  :  :  :                          :     :        +- ReusedExchange [hd_demo_sk#19354], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :  :  :  :  :                          :     +- BroadcastQueryStage 10
   :  :  :  :  :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153527]
   :  :  :  :  :                          :           +- *(8) Project [t_time_sk#19359]
   :  :  :  :  :                          :              +- *(8) Filter ((((isnotnull(t_hour#19362) AND isnotnull(t_minute#19363)) AND (t_hour#19362 = 9)) AND (t_minute#19363 >= 30)) AND isnotnull(t_time_sk#19359))
   :  :  :  :  :                          :                 +- *(8) ColumnarToRow
   :  :  :  :  :                          :                    +- FileScan parquet default.time_dim[t_time_sk#19359,t_hour#19362,t_minute#19363] Batched: true, DataFilters: [isnotnull(t_hour#19362), isnotnull(t_minute#19363), (t_hour#19362 = 9), (t_minute#19363 >= 30), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,9), GreaterThanOrEqual(t_minute,30), IsNo..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :  :  :  :  :                          +- BroadcastQueryStage 12
   :  :  :  :  :                             +- ReusedExchange [s_store_sk#19369], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   :  :  :  :  +- BroadcastQueryStage 46
   :  :  :  :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=157880]
   :  :  :  :        +- *(33) HashAggregate(keys=[], functions=[count(1)], output=[h10_to_10_30#19251L])
   :  :  :  :           +- ShuffleQueryStage 40
   :  :  :  :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=156743]
   :  :  :  :                 +- *(27) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19776L])
   :  :  :  :                    +- *(27) Project
   :  :  :  :                       +- *(27) BroadcastHashJoin [ss_store_sk#19405], [s_store_sk#19436], Inner, BuildRight, false
   :  :  :  :                          :- *(27) Project [ss_store_sk#19405]
   :  :  :  :                          :  +- *(27) BroadcastHashJoin [ss_sold_time_sk#19399], [t_time_sk#19426], Inner, BuildRight, false
   :  :  :  :                          :     :- *(27) Project [ss_sold_time_sk#19399, ss_store_sk#19405]
   :  :  :  :                          :     :  +- *(27) BroadcastHashJoin [ss_hdemo_sk#19403], [hd_demo_sk#19421], Inner, BuildRight, false
   :  :  :  :                          :     :     :- *(27) Filter ((isnotnull(ss_hdemo_sk#19403) AND isnotnull(ss_sold_time_sk#19399)) AND isnotnull(ss_store_sk#19405))
   :  :  :  :                          :     :     :  +- *(27) ColumnarToRow
   :  :  :  :                          :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19399,ss_hdemo_sk#19403,ss_store_sk#19405] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19403), isnotnull(ss_sold_time_sk#19399), isnotnull(ss_store_sk#19405)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :  :  :  :                          :     :     +- BroadcastQueryStage 14
   :  :  :  :                          :     :        +- ReusedExchange [hd_demo_sk#19421], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :  :  :  :                          :     +- BroadcastQueryStage 15
   :  :  :  :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153636]
   :  :  :  :                          :           +- *(11) Project [t_time_sk#19426]
   :  :  :  :                          :              +- *(11) Filter ((((isnotnull(t_hour#19429) AND isnotnull(t_minute#19430)) AND (t_hour#19429 = 10)) AND (t_minute#19430 < 30)) AND isnotnull(t_time_sk#19426))
   :  :  :  :                          :                 +- *(11) ColumnarToRow
   :  :  :  :                          :                    +- FileScan parquet default.time_dim[t_time_sk#19426,t_hour#19429,t_minute#19430] Batched: true, DataFilters: [isnotnull(t_hour#19429), isnotnull(t_minute#19430), (t_hour#19429 = 10), (t_minute#19430 < 30), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,10), LessThan(t_minute,30), IsNotNull(t_t..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :  :  :  :                          +- BroadcastQueryStage 17
   :  :  :  :                             +- ReusedExchange [s_store_sk#19436], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   :  :  :  +- BroadcastQueryStage 47
   :  :  :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=157982]
   :  :  :        +- *(34) HashAggregate(keys=[], functions=[count(1)], output=[h10_30_to_11#19252L])
   :  :  :           +- ShuffleQueryStage 42
   :  :  :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=157079]
   :  :  :                 +- *(29) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19778L])
   :  :  :                    +- *(29) Project
   :  :  :                       +- *(29) BroadcastHashJoin [ss_store_sk#19472], [s_store_sk#19503], Inner, BuildRight, false
   :  :  :                          :- *(29) Project [ss_store_sk#19472]
   :  :  :                          :  +- *(29) BroadcastHashJoin [ss_sold_time_sk#19466], [t_time_sk#19493], Inner, BuildRight, false
   :  :  :                          :     :- *(29) Project [ss_sold_time_sk#19466, ss_store_sk#19472]
   :  :  :                          :     :  +- *(29) BroadcastHashJoin [ss_hdemo_sk#19470], [hd_demo_sk#19488], Inner, BuildRight, false
   :  :  :                          :     :     :- *(29) Filter ((isnotnull(ss_hdemo_sk#19470) AND isnotnull(ss_sold_time_sk#19466)) AND isnotnull(ss_store_sk#19472))
   :  :  :                          :     :     :  +- *(29) ColumnarToRow
   :  :  :                          :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19466,ss_hdemo_sk#19470,ss_store_sk#19472] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19470), isnotnull(ss_sold_time_sk#19466), isnotnull(ss_store_sk#19472)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :  :  :                          :     :     +- BroadcastQueryStage 19
   :  :  :                          :     :        +- ReusedExchange [hd_demo_sk#19488], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :  :  :                          :     +- BroadcastQueryStage 20
   :  :  :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153746]
   :  :  :                          :           +- *(14) Project [t_time_sk#19493]
   :  :  :                          :              +- *(14) Filter ((((isnotnull(t_hour#19496) AND isnotnull(t_minute#19497)) AND (t_hour#19496 = 10)) AND (t_minute#19497 >= 30)) AND isnotnull(t_time_sk#19493))
   :  :  :                          :                 +- *(14) ColumnarToRow
   :  :  :                          :                    +- FileScan parquet default.time_dim[t_time_sk#19493,t_hour#19496,t_minute#19497] Batched: true, DataFilters: [isnotnull(t_hour#19496), isnotnull(t_minute#19497), (t_hour#19496 = 10), (t_minute#19497 >= 30),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,10), GreaterThanOrEqual(t_minute,30), IsN..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :  :  :                          +- BroadcastQueryStage 22
   :  :  :                             +- ReusedExchange [s_store_sk#19503], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   :  :  +- BroadcastQueryStage 48
   :  :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=158109]
   :  :        +- *(35) HashAggregate(keys=[], functions=[count(1)], output=[h11_to_11_30#19253L])
   :  :           +- ShuffleQueryStage 44
   :  :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=157521]
   :  :                 +- *(31) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19780L])
   :  :                    +- *(31) Project
   :  :                       +- *(31) BroadcastHashJoin [ss_store_sk#19539], [s_store_sk#19570], Inner, BuildRight, false
   :  :                          :- *(31) Project [ss_store_sk#19539]
   :  :                          :  +- *(31) BroadcastHashJoin [ss_sold_time_sk#19533], [t_time_sk#19560], Inner, BuildRight, false
   :  :                          :     :- *(31) Project [ss_sold_time_sk#19533, ss_store_sk#19539]
   :  :                          :     :  +- *(31) BroadcastHashJoin [ss_hdemo_sk#19537], [hd_demo_sk#19555], Inner, BuildRight, false
   :  :                          :     :     :- *(31) Filter ((isnotnull(ss_hdemo_sk#19537) AND isnotnull(ss_sold_time_sk#19533)) AND isnotnull(ss_store_sk#19539))
   :  :                          :     :     :  +- *(31) ColumnarToRow
   :  :                          :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19533,ss_hdemo_sk#19537,ss_store_sk#19539] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19537), isnotnull(ss_sold_time_sk#19533), isnotnull(ss_store_sk#19539)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :  :                          :     :     +- BroadcastQueryStage 24
   :  :                          :     :        +- ReusedExchange [hd_demo_sk#19555], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :  :                          :     +- BroadcastQueryStage 25
   :  :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153856]
   :  :                          :           +- *(17) Project [t_time_sk#19560]
   :  :                          :              +- *(17) Filter ((((isnotnull(t_hour#19563) AND isnotnull(t_minute#19564)) AND (t_hour#19563 = 11)) AND (t_minute#19564 < 30)) AND isnotnull(t_time_sk#19560))
   :  :                          :                 +- *(17) ColumnarToRow
   :  :                          :                    +- FileScan parquet default.time_dim[t_time_sk#19560,t_hour#19563,t_minute#19564] Batched: true, DataFilters: [isnotnull(t_hour#19563), isnotnull(t_minute#19564), (t_hour#19563 = 11), (t_minute#19564 < 30), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,11), LessThan(t_minute,30), IsNotNull(t_t..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :  :                          +- BroadcastQueryStage 27
   :  :                             +- ReusedExchange [s_store_sk#19570], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   :  +- BroadcastQueryStage 49
   :     +- BroadcastExchange IdentityBroadcastMode, [plan_id=158198]
   :        +- *(36) HashAggregate(keys=[], functions=[count(1)], output=[h11_30_to_12#19254L])
   :           +- ShuffleQueryStage 43
   :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=157325]
   :                 +- *(30) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19782L])
   :                    +- *(30) Project
   :                       +- *(30) BroadcastHashJoin [ss_store_sk#19606], [s_store_sk#19637], Inner, BuildRight, false
   :                          :- *(30) Project [ss_store_sk#19606]
   :                          :  +- *(30) BroadcastHashJoin [ss_sold_time_sk#19600], [t_time_sk#19627], Inner, BuildRight, false
   :                          :     :- *(30) Project [ss_sold_time_sk#19600, ss_store_sk#19606]
   :                          :     :  +- *(30) BroadcastHashJoin [ss_hdemo_sk#19604], [hd_demo_sk#19622], Inner, BuildRight, false
   :                          :     :     :- *(30) Filter ((isnotnull(ss_hdemo_sk#19604) AND isnotnull(ss_sold_time_sk#19600)) AND isnotnull(ss_store_sk#19606))
   :                          :     :     :  +- *(30) ColumnarToRow
   :                          :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19600,ss_hdemo_sk#19604,ss_store_sk#19606] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19604), isnotnull(ss_sold_time_sk#19600), isnotnull(ss_store_sk#19606)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
   :                          :     :     +- BroadcastQueryStage 29
   :                          :     :        +- ReusedExchange [hd_demo_sk#19622], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
   :                          :     +- BroadcastQueryStage 30
   :                          :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153966]
   :                          :           +- *(20) Project [t_time_sk#19627]
   :                          :              +- *(20) Filter ((((isnotnull(t_hour#19630) AND isnotnull(t_minute#19631)) AND (t_hour#19630 = 11)) AND (t_minute#19631 >= 30)) AND isnotnull(t_time_sk#19627))
   :                          :                 +- *(20) ColumnarToRow
   :                          :                    +- FileScan parquet default.time_dim[t_time_sk#19627,t_hour#19630,t_minute#19631] Batched: true, DataFilters: [isnotnull(t_hour#19630), isnotnull(t_minute#19631), (t_hour#19630 = 11), (t_minute#19631 >= 30),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,11), GreaterThanOrEqual(t_minute,30), IsN..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
   :                          +- BroadcastQueryStage 32
   :                             +- ReusedExchange [s_store_sk#19637], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]
   +- BroadcastQueryStage 50
      +- BroadcastExchange IdentityBroadcastMode, [plan_id=158249]
         +- *(37) HashAggregate(keys=[], functions=[count(1)], output=[h12_to_12_30#19255L])
            +- ShuffleQueryStage 41
               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=156797]
                  +- *(28) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19784L])
                     +- *(28) Project
                        +- *(28) BroadcastHashJoin [ss_store_sk#19673], [s_store_sk#19704], Inner, BuildRight, false
                           :- *(28) Project [ss_store_sk#19673]
                           :  +- *(28) BroadcastHashJoin [ss_sold_time_sk#19667], [t_time_sk#19694], Inner, BuildRight, false
                           :     :- *(28) Project [ss_sold_time_sk#19667, ss_store_sk#19673]
                           :     :  +- *(28) BroadcastHashJoin [ss_hdemo_sk#19671], [hd_demo_sk#19689], Inner, BuildRight, false
                           :     :     :- *(28) Filter ((isnotnull(ss_hdemo_sk#19671) AND isnotnull(ss_sold_time_sk#19667)) AND isnotnull(ss_store_sk#19673))
                           :     :     :  +- *(28) ColumnarToRow
                           :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#19667,ss_hdemo_sk#19671,ss_store_sk#19673] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#19671), isnotnull(ss_sold_time_sk#19667), isnotnull(ss_store_sk#19673)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
                           :     :     +- BroadcastQueryStage 34
                           :     :        +- ReusedExchange [hd_demo_sk#19689], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153297]
                           :     +- BroadcastQueryStage 35
                           :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=154076]
                           :           +- *(23) Project [t_time_sk#19694]
                           :              +- *(23) Filter ((((isnotnull(t_hour#19697) AND isnotnull(t_minute#19698)) AND (t_hour#19697 = 12)) AND (t_minute#19698 < 30)) AND isnotnull(t_time_sk#19694))
                           :                 +- *(23) ColumnarToRow
                           :                    +- FileScan parquet default.time_dim[t_time_sk#19694,t_hour#19697,t_minute#19698] Batched: true, DataFilters: [isnotnull(t_hour#19697), isnotnull(t_minute#19698), (t_hour#19697 = 12), (t_minute#19698 < 30), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,12), LessThan(t_minute,30), IsNotNull(t_t..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
                           +- BroadcastQueryStage 37
                              +- ReusedExchange [s_store_sk#19704], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=153339]


==== q89 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[CheckOverflow((promote_precision(cast(sum_sales#19785 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#19786 as decimal(22,6)))), DecimalType(22,6)) ASC NULLS FIRST,s_store_name#57 ASC NULLS FIRST], output=[i_category#449,i_class#447,i_brand#445,s_store_name#57,s_company_name#69,d_moy#32,sum_sales#19785,avg_monthly_sales#19786])
   +- *(8) Project [i_category#449, i_class#447, i_brand#445, s_store_name#57, s_company_name#69, d_moy#32, sum_sales#19785, avg_monthly_sales#19786]
      +- *(8) Filter CASE WHEN NOT (avg_monthly_sales#19786 = 0.000000) THEN (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#19785 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#19786 as decimal(22,6)))), DecimalType(22,6)))) / promote_precision(cast(avg_monthly_sales#19786 as decimal(22,6)))), DecimalType(38,16)) > 0.1000000000000000) END
         +- Window [avg(_w0#19790) windowspecdefinition(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#19786], [i_category#449, i_brand#445, s_store_name#57, s_company_name#69]
            +- *(7) Sort [i_category#449 ASC NULLS FIRST, i_brand#445 ASC NULLS FIRST, s_store_name#57 ASC NULLS FIRST, s_company_name#69 ASC NULLS FIRST], false, 0
               +- ShuffleQueryStage 6
                  +- Exchange hashpartitioning(i_category#449, i_brand#445, s_store_name#57, s_company_name#69, 20), ENSURE_REQUIREMENTS, [plan_id=159050]
                     +- *(6) HashAggregate(keys=[i_category#449, i_class#447, i_brand#445, s_store_name#57, s_company_name#69, d_moy#32], functions=[sum(UnscaledValue(ss_sales_price#427))], output=[i_category#449, i_class#447, i_brand#445, s_store_name#57, s_company_name#69, d_moy#32, sum_sales#19785, _w0#19790])
                        +- ShuffleQueryStage 5
                           +- Exchange hashpartitioning(i_category#449, i_class#447, i_brand#445, s_store_name#57, s_company_name#69, d_moy#32, 20), ENSURE_REQUIREMENTS, [plan_id=158994]
                              +- *(5) HashAggregate(keys=[i_category#449, i_class#447, i_brand#445, s_store_name#57, s_company_name#69, d_moy#32], functions=[partial_sum(UnscaledValue(ss_sales_price#427))], output=[i_category#449, i_class#447, i_brand#445, s_store_name#57, s_company_name#69, d_moy#32, sum#19800L])
                                 +- *(5) Project [i_brand#445, i_class#447, i_category#449, ss_sales_price#427, d_moy#32, s_store_name#57, s_company_name#69]
                                    +- *(5) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                                       :- *(5) Project [i_brand#445, i_class#447, i_category#449, ss_store_sk#421, ss_sales_price#427, d_moy#32]
                                       :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                       :     :- *(5) Project [i_brand#445, i_class#447, i_category#449, ss_sold_date_sk#414, ss_store_sk#421, ss_sales_price#427]
                                       :     :  +- *(5) BroadcastHashJoin [i_item_sk#437], [ss_item_sk#416], Inner, BuildLeft, false
                                       :     :     :- BroadcastQueryStage 4
                                       :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=158734]
                                       :     :     :     +- AQEShuffleRead local
                                       :     :     :        +- ShuffleQueryStage 0
                                       :     :     :           +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=158577]
                                       :     :     :              +- *(1) Filter (((i_category#449 IN (Books                                             ,Electronics                                       ,Sports                                            ) AND i_class#447 IN (computers                                         ,stereo                                            ,football                                          )) OR (i_category#449 IN (Men                                               ,Jewelry                                           ,Women                                             ) AND i_class#447 IN (shirts                                            ,birdal                                            ,dresses                                           ))) AND isnotnull(i_item_sk#437))
                                       :     :     :                 +- *(1) ColumnarToRow
                                       :     :     :                    +- FileScan parquet default.item[i_item_sk#437,i_brand#445,i_class#447,i_category#449] Batched: true, DataFilters: [((i_category#449 IN (Books                                             ,Electronics             ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [Or(And(In(i_category, [Books                                             ,Electronics           ..., ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>
                                       :     :     +- AQEShuffleRead local
                                       :     :        +- ShuffleQueryStage 1
                                       :     :           +- Exchange hashpartitioning(ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=158594]
                                       :     :              +- *(2) Filter ((isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414)) AND isnotnull(ss_store_sk#421))
                                       :     :                 +- *(2) ColumnarToRow
                                       :     :                    +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_store_sk#421,ss_sales_price#427] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>
                                       :     +- BroadcastQueryStage 2
                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=158615]
                                       :           +- *(3) Project [d_date_sk#24, d_moy#32]
                                       :              +- *(3) Filter ((isnotnull(d_year#30) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#24))
                                       :                 +- *(3) ColumnarToRow
                                       :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 1999), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                                       +- BroadcastQueryStage 3
                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=158634]
                                             +- *(4) Filter isnotnull(s_store_sk#52)
                                                +- *(4) ColumnarToRow
                                                   +- FileScan parquet default.store[s_store_sk#52,s_store_name#57,s_company_name#69] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>


==== q90 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(11) Project [CheckOverflow((promote_precision(cast(amc#19809L as decimal(15,4))) / promote_precision(cast(pmc#19810L as decimal(15,4)))), DecimalType(35,20)) AS am_pm_ratio#19811]
   +- CartesianProduct
      :- *(9) HashAggregate(keys=[], functions=[count(1)], output=[amc#19809L])
      :  +- ShuffleQueryStage 8
      :     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=159824]
      :        +- *(7) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19883L])
      :           +- *(7) Project
      :              +- *(7) BroadcastHashJoin [ws_web_page_sk#175], [wp_web_page_sk#17839], Inner, BuildRight, false
      :                 :- *(7) Project [ws_web_page_sk#175]
      :                 :  +- *(7) BroadcastHashJoin [ws_sold_time_sk#164], [t_time_sk#15927], Inner, BuildRight, false
      :                 :     :- *(7) Project [ws_sold_time_sk#164, ws_web_page_sk#175]
      :                 :     :  +- *(7) BroadcastHashJoin [ws_ship_hdemo_sk#173], [hd_demo_sk#5551], Inner, BuildRight, false
      :                 :     :     :- *(7) Filter ((isnotnull(ws_ship_hdemo_sk#173) AND isnotnull(ws_sold_time_sk#164)) AND isnotnull(ws_web_page_sk#175))
      :                 :     :     :  +- *(7) ColumnarToRow
      :                 :     :     :     +- FileScan parquet default.web_sales[ws_sold_time_sk#164,ws_ship_hdemo_sk#173,ws_web_page_sk#175] Batched: true, DataFilters: [isnotnull(ws_ship_hdemo_sk#173), isnotnull(ws_sold_time_sk#164), isnotnull(ws_web_page_sk#175)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_hdemo_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_web_page_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_ship_hdemo_sk:int,ws_web_page_sk:int>
      :                 :     :     +- BroadcastQueryStage 0
      :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=159317]
      :                 :     :           +- *(1) Project [hd_demo_sk#5551]
      :                 :     :              +- *(1) Filter ((isnotnull(hd_dep_count#5554) AND (hd_dep_count#5554 = 6)) AND isnotnull(hd_demo_sk#5551))
      :                 :     :                 +- *(1) ColumnarToRow
      :                 :     :                    +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_dep_count#5554] Batched: true, DataFilters: [isnotnull(hd_dep_count#5554), (hd_dep_count#5554 = 6), isnotnull(hd_demo_sk#5551)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_dep_count), EqualTo(hd_dep_count,6), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>
      :                 :     +- BroadcastQueryStage 1
      :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=159338]
      :                 :           +- *(2) Project [t_time_sk#15927]
      :                 :              +- *(2) Filter (((isnotnull(t_hour#15930) AND (t_hour#15930 >= 8)) AND (t_hour#15930 <= 9)) AND isnotnull(t_time_sk#15927))
      :                 :                 +- *(2) ColumnarToRow
      :                 :                    +- FileScan parquet default.time_dim[t_time_sk#15927,t_hour#15930] Batched: true, DataFilters: [isnotnull(t_hour#15930), (t_hour#15930 >= 8), (t_hour#15930 <= 9), isnotnull(t_time_sk#15927)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), GreaterThanOrEqual(t_hour,8), LessThanOrEqual(t_hour,9), IsNotNull(t_time_sk)], ReadSchema: struct<t_time_sk:int,t_hour:int>
      :                 +- BroadcastQueryStage 2
      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=159359]
      :                       +- *(3) Project [wp_web_page_sk#17839]
      :                          +- *(3) Filter (((isnotnull(wp_char_count#17849) AND (wp_char_count#17849 >= 5000)) AND (wp_char_count#17849 <= 5200)) AND isnotnull(wp_web_page_sk#17839))
      :                             +- *(3) ColumnarToRow
      :                                +- FileScan parquet default.web_page[wp_web_page_sk#17839,wp_char_count#17849] Batched: true, DataFilters: [isnotnull(wp_char_count#17849), (wp_char_count#17849 >= 5000), (wp_char_count#17849 <= 5200), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_char_count), GreaterThanOrEqual(wp_char_count,5000), LessThanOrEqual(wp_char_count,..., ReadSchema: struct<wp_web_page_sk:int,wp_char_count:int>
      +- *(10) HashAggregate(keys=[], functions=[count(1)], output=[pmc#19810L])
         +- ShuffleQueryStage 9
            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=159930]
               +- *(8) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#19885L])
                  +- *(8) Project
                     +- *(8) BroadcastHashJoin [ws_web_page_sk#19826], [wp_web_page_sk#19863], Inner, BuildRight, false
                        :- *(8) Project [ws_web_page_sk#19826]
                        :  +- *(8) BroadcastHashJoin [ws_sold_time_sk#19815], [t_time_sk#19853], Inner, BuildRight, false
                        :     :- *(8) Project [ws_sold_time_sk#19815, ws_web_page_sk#19826]
                        :     :  +- *(8) BroadcastHashJoin [ws_ship_hdemo_sk#19824], [hd_demo_sk#19848], Inner, BuildRight, false
                        :     :     :- *(8) Filter ((isnotnull(ws_ship_hdemo_sk#19824) AND isnotnull(ws_sold_time_sk#19815)) AND isnotnull(ws_web_page_sk#19826))
                        :     :     :  +- *(8) ColumnarToRow
                        :     :     :     +- FileScan parquet default.web_sales[ws_sold_time_sk#19815,ws_ship_hdemo_sk#19824,ws_web_page_sk#19826] Batched: true, DataFilters: [isnotnull(ws_ship_hdemo_sk#19824), isnotnull(ws_sold_time_sk#19815), isnotnull(ws_web_page_sk#19..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_hdemo_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_web_page_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_ship_hdemo_sk:int,ws_web_page_sk:int>
                        :     :     +- BroadcastQueryStage 4
                        :     :        +- ReusedExchange [hd_demo_sk#19848], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=159317]
                        :     +- BroadcastQueryStage 5
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=159441]
                        :           +- *(5) Project [t_time_sk#19853]
                        :              +- *(5) Filter (((isnotnull(t_hour#19856) AND (t_hour#19856 >= 19)) AND (t_hour#19856 <= 20)) AND isnotnull(t_time_sk#19853))
                        :                 +- *(5) ColumnarToRow
                        :                    +- FileScan parquet default.time_dim[t_time_sk#19853,t_hour#19856] Batched: true, DataFilters: [isnotnull(t_hour#19856), (t_hour#19856 >= 19), (t_hour#19856 <= 20), isnotnull(t_time_sk#19853)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), GreaterThanOrEqual(t_hour,19), LessThanOrEqual(t_hour,20), IsNotNull(t_time_sk)], ReadSchema: struct<t_time_sk:int,t_hour:int>
                        +- BroadcastQueryStage 7
                           +- ReusedExchange [wp_web_page_sk#19863], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=159359]


==== q91 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(8) HashAggregate(keys=[cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cd_marital_status#3635, cd_education_status#3636], functions=[sum(UnscaledValue(cr_net_loss#3317))], output=[Call_Center#19886, Call_Center_Name#19887, Manager#19888, Returns_Loss#19889])
   +- ShuffleQueryStage 6
      +- Exchange hashpartitioning(cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cd_marital_status#3635, cd_education_status#3636, 20), ENSURE_REQUIREMENTS, [plan_id=160880]
         +- *(7) HashAggregate(keys=[cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cd_marital_status#3635, cd_education_status#3636], functions=[partial_sum(UnscaledValue(cr_net_loss#3317))], output=[cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cd_marital_status#3635, cd_education_status#3636, sum#19897L])
            +- *(7) Project [cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cr_net_loss#3317, cd_marital_status#3635, cd_education_status#3636]
               +- *(7) BroadcastHashJoin [c_current_hdemo_sk#84], [hd_demo_sk#5551], Inner, BuildRight, false
                  :- *(7) Project [cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cr_net_loss#3317, c_current_hdemo_sk#84, cd_marital_status#3635, cd_education_status#3636]
                  :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#83], [cd_demo_sk#3633], Inner, BuildRight, false
                  :     :- *(7) Project [cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cr_net_loss#3317, c_current_cdemo_sk#83, c_current_hdemo_sk#84]
                  :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#3717], Inner, BuildRight, false
                  :     :     :- *(7) Project [cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cr_net_loss#3317, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_current_addr_sk#85]
                  :     :     :  +- *(7) BroadcastHashJoin [cr_returning_customer_sk#3298], [c_customer_sk#81], Inner, BuildRight, false
                  :     :     :     :- *(7) Project [cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cr_returning_customer_sk#3298, cr_net_loss#3317]
                  :     :     :     :  +- *(7) BroadcastHashJoin [cr_returned_date_sk#3291], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :     :     :- *(7) Project [cc_call_center_id#7109, cc_name#7114, cc_manager#7119, cr_returned_date_sk#3291, cr_returning_customer_sk#3298, cr_net_loss#3317]
                  :     :     :     :     :  +- *(7) BroadcastHashJoin [cc_call_center_sk#7108], [cr_call_center_sk#3302], Inner, BuildLeft, false
                  :     :     :     :     :     :- BroadcastQueryStage 0
                  :     :     :     :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=160217]
                  :     :     :     :     :     :     +- *(1) Filter isnotnull(cc_call_center_sk#7108)
                  :     :     :     :     :     :        +- *(1) ColumnarToRow
                  :     :     :     :     :     :           +- FileScan parquet default.call_center[cc_call_center_sk#7108,cc_call_center_id#7109,cc_name#7114,cc_manager#7119] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#7108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk)], ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>
                  :     :     :     :     :     +- *(7) Filter ((isnotnull(cr_call_center_sk#3302) AND isnotnull(cr_returned_date_sk#3291)) AND isnotnull(cr_returning_customer_sk#3298))
                  :     :     :     :     :        +- *(7) ColumnarToRow
                  :     :     :     :     :           +- FileScan parquet default.catalog_returns[cr_returned_date_sk#3291,cr_returning_customer_sk#3298,cr_call_center_sk#3302,cr_net_loss#3317] Batched: true, DataFilters: [isnotnull(cr_call_center_sk#3302), isnotnull(cr_returned_date_sk#3291), isnotnull(cr_returning_c..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_customer_sk)], ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:dec...
                  :     :     :     :     +- BroadcastQueryStage 1
                  :     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160236]
                  :     :     :     :           +- *(2) Project [d_date_sk#24]
                  :     :     :     :              +- *(2) Filter ((((isnotnull(d_year#30) AND isnotnull(d_moy#32)) AND (d_year#30 = 1998)) AND (d_moy#32 = 11)) AND isnotnull(d_date_sk#24))
                  :     :     :     :                 +- *(2) ColumnarToRow
                  :     :     :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_year#30,d_moy#32] Batched: true, DataFilters: [isnotnull(d_year#30), isnotnull(d_moy#32), (d_year#30 = 1998), (d_moy#32 = 11), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>
                  :     :     :     +- BroadcastQueryStage 2
                  :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=160255]
                  :     :     :           +- *(3) Filter (((isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85)) AND isnotnull(c_current_cdemo_sk#83)) AND isnotnull(c_current_hdemo_sk#84))
                  :     :     :              +- *(3) ColumnarToRow
                  :     :     :                 +- FileScan parquet default.customer[c_customer_sk#81,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85), isnotnull(c_current_cdemo_sk#83), ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull..., ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>
                  :     :     +- BroadcastQueryStage 3
                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160274]
                  :     :           +- *(4) Project [ca_address_sk#3717]
                  :     :              +- *(4) Filter ((isnotnull(ca_gmt_offset#3728) AND (ca_gmt_offset#3728 = -7.00)) AND isnotnull(ca_address_sk#3717))
                  :     :                 +- *(4) ColumnarToRow
                  :     :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_gmt_offset#3728] Batched: true, DataFilters: [isnotnull(ca_gmt_offset#3728), (ca_gmt_offset#3728 = -7.00), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>
                  :     +- BroadcastQueryStage 4
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=160293]
                  :           +- *(5) Filter ((((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Unknown             )) OR ((cd_marital_status#3635 = W) AND (cd_education_status#3636 = Advanced Degree     ))) AND isnotnull(cd_demo_sk#3633))
                  :              +- *(5) ColumnarToRow
                  :                 +- FileScan parquet default.customer_demographics[cd_demo_sk#3633,cd_marital_status#3635,cd_education_status#3636] Batched: true, DataFilters: [(((cd_marital_status#3635 = M) AND (cd_education_status#3636 = Unknown             )) OR ((cd_ma..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_demographics], PartitionFilters: [], PushedFilters: [Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Unknown             )),And(Equal..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>
                  +- BroadcastQueryStage 5
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160312]
                        +- *(6) Project [hd_demo_sk#5551]
                           +- *(6) Filter ((isnotnull(hd_buy_potential#5553) AND StartsWith(hd_buy_potential#5553, Unknown)) AND isnotnull(hd_demo_sk#5551))
                              +- *(6) ColumnarToRow
                                 +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_buy_potential#5553] Batched: true, DataFilters: [isnotnull(hd_buy_potential#5553), StartsWith(hd_buy_potential#5553, Unknown), isnotnull(hd_demo_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>


==== q92 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(8) HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_discount_amt#185))], output=[Excess Discount Amount #19903])
   +- ShuffleQueryStage 7
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161595]
         +- *(7) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ws_ext_discount_amt#185))], output=[sum#19973L])
            +- *(7) Project [ws_ext_discount_amt#185]
               +- *(7) BroadcastHashJoin [ws_sold_date_sk#163], [d_date_sk#24], Inner, BuildRight, false
                  :- *(7) Project [ws_sold_date_sk#163, ws_ext_discount_amt#185]
                  :  +- *(7) BroadcastHashJoin [i_item_sk#437], [ws_item_sk#19910], Inner, BuildRight, (cast(ws_ext_discount_amt#185 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#19906), false
                  :     :- AQEShuffleRead local
                  :     :  +- ShuffleQueryStage 5
                  :     :     +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=161430]
                  :     :        +- *(5) Project [ws_sold_date_sk#163, ws_ext_discount_amt#185, i_item_sk#437]
                  :     :           +- *(5) BroadcastHashJoin [ws_item_sk#166], [i_item_sk#437], Inner, BuildRight, false
                  :     :              :- *(5) Filter ((isnotnull(ws_item_sk#166) AND isnotnull(ws_ext_discount_amt#185)) AND isnotnull(ws_sold_date_sk#163))
                  :     :              :  +- *(5) ColumnarToRow
                  :     :              :     +- FileScan parquet default.web_sales[ws_sold_date_sk#163,ws_item_sk#166,ws_ext_discount_amt#185] Batched: true, DataFilters: [isnotnull(ws_item_sk#166), isnotnull(ws_ext_discount_amt#185), isnotnull(ws_sold_date_sk#163)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_ext_discount_amt), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>
                  :     :              +- BroadcastQueryStage 0
                  :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=161123]
                  :     :                    +- *(1) Project [i_item_sk#437]
                  :     :                       +- *(1) Filter ((isnotnull(i_manufact_id#450) AND (i_manufact_id#450 = 350)) AND isnotnull(i_item_sk#437))
                  :     :                          +- *(1) ColumnarToRow
                  :     :                             +- FileScan parquet default.item[i_item_sk#437,i_manufact_id#450] Batched: true, DataFilters: [isnotnull(i_manufact_id#450), (i_manufact_id#450 = 350), isnotnull(i_item_sk#437)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,350), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>
                  :     +- BroadcastQueryStage 6
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=161504]
                  :           +- *(6) Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#19906)
                  :              +- *(6) HashAggregate(keys=[ws_item_sk#19910], functions=[avg(UnscaledValue(ws_ext_discount_amt#19929))], output=[(1.3 * avg(ws_ext_discount_amt))#19906, ws_item_sk#19910])
                  :                 +- ShuffleQueryStage 4
                  :                    +- Exchange hashpartitioning(ws_item_sk#19910, 20), ENSURE_REQUIREMENTS, [plan_id=161319]
                  :                       +- *(4) HashAggregate(keys=[ws_item_sk#19910], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#19929))], output=[ws_item_sk#19910, sum#19976, count#19977L])
                  :                          +- *(4) Project [ws_item_sk#19910, ws_ext_discount_amt#19929]
                  :                             +- *(4) BroadcastHashJoin [ws_sold_date_sk#19907], [d_date_sk#19941], Inner, BuildRight, false
                  :                                :- *(4) Filter (isnotnull(ws_sold_date_sk#19907) AND isnotnull(ws_item_sk#19910))
                  :                                :  +- *(4) ColumnarToRow
                  :                                :     +- FileScan parquet default.web_sales[ws_sold_date_sk#19907,ws_item_sk#19910,ws_ext_discount_amt#19929] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#19907), isnotnull(ws_item_sk#19910)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>
                  :                                +- BroadcastQueryStage 1
                  :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=161146]
                  :                                      +- *(2) Project [d_date_sk#19941]
                  :                                         +- *(2) Filter (((isnotnull(d_date#19943) AND (d_date#19943 >= 2000-01-27)) AND (d_date#19943 <= 2000-04-26)) AND isnotnull(d_date_sk#19941))
                  :                                            +- *(2) ColumnarToRow
                  :                                               +- FileScan parquet default.date_dim[d_date_sk#19941,d_date#19943] Batched: true, DataFilters: [isnotnull(d_date#19943), (d_date#19943 >= 2000-01-27), (d_date#19943 <= 2000-04-26), isnotnull(d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                  +- BroadcastQueryStage 3
                     +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=161146]


==== q93 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[sumsales#19995 ASC NULLS FIRST,ss_customer_sk#417 ASC NULLS FIRST], output=[ss_customer_sk#417,sumsales#19995])
   +- *(7) HashAggregate(keys=[ss_customer_sk#417], functions=[sum(act_sales#19994)], output=[ss_customer_sk#417, sumsales#19995])
      +- ShuffleQueryStage 3
         +- Exchange hashpartitioning(ss_customer_sk#417, 20), ENSURE_REQUIREMENTS, [plan_id=161913]
            +- *(6) HashAggregate(keys=[ss_customer_sk#417], functions=[partial_sum(act_sales#19994)], output=[ss_customer_sk#417, sum#20001, isEmpty#20002])
               +- *(6) Project [ss_customer_sk#417, CASE WHEN isnotnull(sr_return_quantity#14) THEN CheckOverflow((promote_precision(cast((ss_quantity#424 - sr_return_quantity#14) as decimal(12,2))) * promote_precision(cast(ss_sales_price#427 as decimal(12,2)))), DecimalType(18,2)) ELSE CheckOverflow((promote_precision(cast(ss_quantity#424 as decimal(12,2))) * promote_precision(cast(ss_sales_price#427 as decimal(12,2)))), DecimalType(18,2)) END AS act_sales#19994]
                  +- *(6) BroadcastHashJoin [sr_reason_sk#12], [r_reason_sk#3780], Inner, BuildRight, false
                     :- *(6) Project [ss_customer_sk#417, ss_quantity#424, ss_sales_price#427, sr_reason_sk#12, sr_return_quantity#14]
                     :  +- *(6) SortMergeJoin [ss_item_sk#416, ss_ticket_number#423], [sr_item_sk#6, sr_ticket_number#13], Inner
                     :     :- *(4) Sort [ss_item_sk#416 ASC NULLS FIRST, ss_ticket_number#423 ASC NULLS FIRST], false, 0
                     :     :  +- ShuffleQueryStage 0
                     :     :     +- Exchange hashpartitioning(ss_item_sk#416, ss_ticket_number#423, 20), ENSURE_REQUIREMENTS, [plan_id=161722]
                     :     :        +- *(1) ColumnarToRow
                     :     :           +- FileScan parquet default.store_sales[ss_item_sk#416,ss_customer_sk#417,ss_ticket_number#423,ss_quantity#424,ss_sales_price#427] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_sales_price:deci...
                     :     +- *(5) Sort [sr_item_sk#6 ASC NULLS FIRST, sr_ticket_number#13 ASC NULLS FIRST], false, 0
                     :        +- ShuffleQueryStage 1
                     :           +- Exchange hashpartitioning(sr_item_sk#6, sr_ticket_number#13, 20), ENSURE_REQUIREMENTS, [plan_id=161737]
                     :              +- *(2) Filter ((isnotnull(sr_item_sk#6) AND isnotnull(sr_ticket_number#13)) AND isnotnull(sr_reason_sk#12))
                     :                 +- *(2) ColumnarToRow
                     :                    +- FileScan parquet default.store_returns[sr_item_sk#6,sr_reason_sk#12,sr_ticket_number#13,sr_return_quantity#14] Batched: true, DataFilters: [isnotnull(sr_item_sk#6), isnotnull(sr_ticket_number#13), isnotnull(sr_reason_sk#12)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_reason_sk)], ReadSchema: struct<sr_item_sk:int,sr_reason_sk:int,sr_ticket_number:int,sr_return_quantity:int>
                     +- BroadcastQueryStage 2
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=161758]
                           +- *(3) Project [r_reason_sk#3780]
                              +- *(3) Filter ((isnotnull(r_reason_desc#3782) AND (r_reason_desc#3782 = reason 28                                                                                           )) AND isnotnull(r_reason_sk#3780))
                                 +- *(3) ColumnarToRow
                                    +- FileScan parquet default.reason[r_reason_sk#3780,r_reason_desc#3782] Batched: true, DataFilters: [isnotnull(r_reason_desc#3782), (r_reason_desc#3782 = reason 28                                  ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/reason], PartitionFilters: [], PushedFilters: [IsNotNull(r_reason_desc), EqualTo(r_reason_desc,reason 28                                       ..., ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

==== q94 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(12) HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#191)), sum(UnscaledValue(ws_net_profit#196)), count(distinct ws_order_number#180)], output=[order count #20009L, total shipping cost #20010, total net profit #20011])
   +- ShuffleQueryStage 6
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=162870]
         +- *(11) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#191)), merge_sum(UnscaledValue(ws_net_profit#196)), partial_count(distinct ws_order_number#180)], output=[sum#20056L, sum#20058L, count#20061L])
            +- *(11) HashAggregate(keys=[ws_order_number#180], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#191)), merge_sum(UnscaledValue(ws_net_profit#196))], output=[ws_order_number#180, sum#20056L, sum#20058L])
               +- *(11) HashAggregate(keys=[ws_order_number#180], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#191)), partial_sum(UnscaledValue(ws_net_profit#196))], output=[ws_order_number#180, sum#20056L, sum#20058L])
                  +- *(11) Project [ws_order_number#180, ws_ext_ship_cost#191, ws_net_profit#196]
                     +- *(11) BroadcastHashJoin [ws_web_site_sk#176], [web_site_sk#3351], Inner, BuildRight, false
                        :- *(11) Project [ws_web_site_sk#176, ws_order_number#180, ws_ext_ship_cost#191, ws_net_profit#196]
                        :  +- *(11) BroadcastHashJoin [ws_ship_addr_sk#174], [ca_address_sk#3717], Inner, BuildRight, false
                        :     :- *(11) Project [ws_ship_addr_sk#174, ws_web_site_sk#176, ws_order_number#180, ws_ext_ship_cost#191, ws_net_profit#196]
                        :     :  +- *(11) BroadcastHashJoin [ws_ship_date_sk#165], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :- *(11) SortMergeJoin [ws_order_number#180], [wr_order_number#3340], LeftAnti
                        :     :     :  :- *(9) Project [ws_ship_date_sk#165, ws_ship_addr_sk#174, ws_web_site_sk#176, ws_order_number#180, ws_ext_ship_cost#191, ws_net_profit#196]
                        :     :     :  :  +- *(9) SortMergeJoin [ws_order_number#180], [ws_order_number#20031], LeftSemi, NOT (ws_warehouse_sk#178 = ws_warehouse_sk#20029)
                        :     :     :  :     :- *(7) Sort [ws_order_number#180 ASC NULLS FIRST], false, 0
                        :     :     :  :     :  +- ShuffleQueryStage 0
                        :     :     :  :     :     +- Exchange hashpartitioning(ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=162147]
                        :     :     :  :     :        +- *(1) Filter ((isnotnull(ws_ship_date_sk#165) AND isnotnull(ws_ship_addr_sk#174)) AND isnotnull(ws_web_site_sk#176))
                        :     :     :  :     :           +- *(1) ColumnarToRow
                        :     :     :  :     :              +- FileScan parquet default.web_sales[ws_ship_date_sk#165,ws_ship_addr_sk#174,ws_web_site_sk#176,ws_warehouse_sk#178,ws_order_number#180,ws_ext_ship_cost#191,ws_net_profit#196] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#165), isnotnull(ws_ship_addr_sk#174), isnotnull(ws_web_site_sk#176)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_nu...
                        :     :     :  :     +- *(8) Sort [ws_order_number#20031 ASC NULLS FIRST], false, 0
                        :     :     :  :        +- ShuffleQueryStage 1
                        :     :     :  :           +- Exchange hashpartitioning(ws_order_number#20031, 20), ENSURE_REQUIREMENTS, [plan_id=162162]
                        :     :     :  :              +- *(2) ColumnarToRow
                        :     :     :  :                 +- FileScan parquet default.web_sales[ws_warehouse_sk#20029,ws_order_number#20031] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>
                        :     :     :  +- *(10) Sort [wr_order_number#3340 ASC NULLS FIRST], false, 0
                        :     :     :     +- ShuffleQueryStage 2
                        :     :     :        +- Exchange hashpartitioning(wr_order_number#3340, 20), ENSURE_REQUIREMENTS, [plan_id=162177]
                        :     :     :           +- *(3) ColumnarToRow
                        :     :     :              +- FileScan parquet default.web_returns[wr_order_number#3340] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<wr_order_number:int>
                        :     :     +- BroadcastQueryStage 3
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=162195]
                        :     :           +- *(4) Project [d_date_sk#24]
                        :     :              +- *(4) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 1999-02-01)) AND (d_date#26 <= 1999-04-02)) AND isnotnull(d_date_sk#24))
                        :     :                 +- *(4) ColumnarToRow
                        :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 1999-02-01), (d_date#26 <= 1999-04-02), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                        :     +- BroadcastQueryStage 4
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=162216]
                        :           +- *(5) Project [ca_address_sk#3717]
                        :              +- *(5) Filter ((isnotnull(ca_state#3725) AND (ca_state#3725 = IL)) AND isnotnull(ca_address_sk#3717))
                        :                 +- *(5) ColumnarToRow
                        :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725] Batched: true, DataFilters: [isnotnull(ca_state#3725), (ca_state#3725 = IL), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
                        +- BroadcastQueryStage 5
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=162237]
                              +- *(6) Project [web_site_sk#3351]
                                 +- *(6) Filter ((isnotnull(web_company_name#3365) AND (web_company_name#3365 = pri                                               )) AND isnotnull(web_site_sk#3351))
                                    +- *(6) ColumnarToRow
                                       +- FileScan parquet default.web_site[web_site_sk#3351,web_company_name#3365] Batched: true, DataFilters: [isnotnull(web_company_name#3365), (web_company_name#3365 = pri                                  ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                       ..., ReadSchema: struct<web_site_sk:int,web_company_name:string>


==== q95 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(19) HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#20224)), sum(UnscaledValue(ws_net_profit#20229)), count(distinct ws_order_number#20213)], output=[order count #20155L, total shipping cost #20156, total net profit #20157])
   +- ShuffleQueryStage 12
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=164335]
         +- *(18) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#20224)), merge_sum(UnscaledValue(ws_net_profit#20229)), partial_count(distinct ws_order_number#20213)], output=[sum#20240L, sum#20242L, count#20245L])
            +- *(18) HashAggregate(keys=[ws_order_number#20213], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#20224)), merge_sum(UnscaledValue(ws_net_profit#20229))], output=[ws_order_number#20213, sum#20240L, sum#20242L])
               +- *(18) HashAggregate(keys=[ws_order_number#20213], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#20224)), partial_sum(UnscaledValue(ws_net_profit#20229))], output=[ws_order_number#20213, sum#20240L, sum#20242L])
                  +- *(18) Project [ws_order_number#20213, ws_ext_ship_cost#20224, ws_net_profit#20229]
                     +- *(18) BroadcastHashJoin [ws_web_site_sk#20209], [web_site_sk#3351], Inner, BuildRight, false
                        :- *(18) Project [ws_web_site_sk#20209, ws_order_number#20213, ws_ext_ship_cost#20224, ws_net_profit#20229]
                        :  +- *(18) BroadcastHashJoin [ws_ship_addr_sk#20207], [ca_address_sk#3717], Inner, BuildRight, false
                        :     :- *(18) Project [ws_ship_addr_sk#20207, ws_web_site_sk#20209, ws_order_number#20213, ws_ext_ship_cost#20224, ws_net_profit#20229]
                        :     :  +- *(18) BroadcastHashJoin [ws_ship_date_sk#20198], [d_date_sk#24], Inner, BuildRight, false
                        :     :     :- *(18) SortMergeJoin [ws_order_number#20213], [wr_order_number#3340], LeftSemi
                        :     :     :  :- *(14) SortMergeJoin [ws_order_number#20213], [ws_order_number#180], LeftSemi
                        :     :     :  :  :- *(10) Sort [ws_order_number#20213 ASC NULLS FIRST], false, 0
                        :     :     :  :  :  +- ShuffleQueryStage 0
                        :     :     :  :  :     +- Exchange hashpartitioning(ws_order_number#20213, 20), ENSURE_REQUIREMENTS, [plan_id=163228]
                        :     :     :  :  :        +- *(1) Filter ((isnotnull(ws_ship_date_sk#20198) AND isnotnull(ws_ship_addr_sk#20207)) AND isnotnull(ws_web_site_sk#20209))
                        :     :     :  :  :           +- *(1) ColumnarToRow
                        :     :     :  :  :              +- FileScan parquet default.web_sales[ws_ship_date_sk#20198,ws_ship_addr_sk#20207,ws_web_site_sk#20209,ws_order_number#20213,ws_ext_ship_cost#20224,ws_net_profit#20229] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#20198), isnotnull(ws_ship_addr_sk#20207), isnotnull(ws_web_site_sk#202..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship...
                        :     :     :  :  +- *(13) Project [ws_order_number#180]
                        :     :     :  :     +- *(13) SortMergeJoin [ws_order_number#180], [ws_order_number#20179], Inner, NOT (ws_warehouse_sk#178 = ws_warehouse_sk#20177)
                        :     :     :  :        :- *(11) Sort [ws_order_number#180 ASC NULLS FIRST], false, 0
                        :     :     :  :        :  +- ShuffleQueryStage 1
                        :     :     :  :        :     +- Exchange hashpartitioning(ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=163245]
                        :     :     :  :        :        +- *(2) Filter (isnotnull(ws_order_number#180) AND isnotnull(ws_warehouse_sk#178))
                        :     :     :  :        :           +- *(2) ColumnarToRow
                        :     :     :  :        :              +- FileScan parquet default.web_sales[ws_warehouse_sk#178,ws_order_number#180] Batched: true, DataFilters: [isnotnull(ws_order_number#180), isnotnull(ws_warehouse_sk#178)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>
                        :     :     :  :        +- *(12) Sort [ws_order_number#20179 ASC NULLS FIRST], false, 0
                        :     :     :  :           +- ShuffleQueryStage 3
                        :     :     :  :              +- ReusedExchange [ws_warehouse_sk#20177, ws_order_number#20179], Exchange hashpartitioning(ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=163245]
                        :     :     :  +- *(17) Sort [wr_order_number#3340 ASC NULLS FIRST], false, 0
                        :     :     :     +- *(17) Project [wr_order_number#3340]
                        :     :     :        +- *(17) BroadcastHashJoin [wr_order_number#3340], [ws_order_number#180], Inner, BuildLeft, false
                        :     :     :           :- BroadcastQueryStage 4
                        :     :     :           :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=163284]
                        :     :     :           :     +- *(4) Filter isnotnull(wr_order_number#3340)
                        :     :     :           :        +- *(4) ColumnarToRow
                        :     :     :           :           +- FileScan parquet default.web_returns[wr_order_number#3340] Batched: true, DataFilters: [isnotnull(wr_order_number#3340)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number)], ReadSchema: struct<wr_order_number:int>
                        :     :     :           +- *(17) Project [ws_order_number#180]
                        :     :     :              +- *(17) SortMergeJoin [ws_order_number#180], [ws_order_number#20179], Inner, NOT (ws_warehouse_sk#178 = ws_warehouse_sk#20177)
                        :     :     :                 :- *(15) Sort [ws_order_number#180 ASC NULLS FIRST], false, 0
                        :     :     :                 :  +- ShuffleQueryStage 6
                        :     :     :                 :     +- ReusedExchange [ws_warehouse_sk#178, ws_order_number#180], Exchange hashpartitioning(ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=163245]
                        :     :     :                 +- *(16) Sort [ws_order_number#20179 ASC NULLS FIRST], false, 0
                        :     :     :                    +- ShuffleQueryStage 8
                        :     :     :                       +- ReusedExchange [ws_warehouse_sk#20177, ws_order_number#20179], Exchange hashpartitioning(ws_order_number#180, 20), ENSURE_REQUIREMENTS, [plan_id=163245]
                        :     :     +- BroadcastQueryStage 9
                        :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=163345]
                        :     :           +- *(7) Project [d_date_sk#24]
                        :     :              +- *(7) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 1999-02-01)) AND (d_date#26 <= 1999-04-02)) AND isnotnull(d_date_sk#24))
                        :     :                 +- *(7) ColumnarToRow
                        :     :                    +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 1999-02-01), (d_date#26 <= 1999-04-02), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>
                        :     +- BroadcastQueryStage 10
                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=163366]
                        :           +- *(8) Project [ca_address_sk#3717]
                        :              +- *(8) Filter ((isnotnull(ca_state#3725) AND (ca_state#3725 = IL)) AND isnotnull(ca_address_sk#3717))
                        :                 +- *(8) ColumnarToRow
                        :                    +- FileScan parquet default.customer_address[ca_address_sk#3717,ca_state#3725] Batched: true, DataFilters: [isnotnull(ca_state#3725), (ca_state#3725 = IL), isnotnull(ca_address_sk#3717)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>
                        +- BroadcastQueryStage 11
                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=163387]
                              +- *(9) Project [web_site_sk#3351]
                                 +- *(9) Filter ((isnotnull(web_company_name#3365) AND (web_company_name#3365 = pri                                               )) AND isnotnull(web_site_sk#3351))
                                    +- *(9) ColumnarToRow
                                       +- FileScan parquet default.web_site[web_site_sk#3351,web_company_name#3365] Batched: true, DataFilters: [isnotnull(web_company_name#3365), (web_company_name#3365 = pri                                  ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                       ..., ReadSchema: struct<web_site_sk:int,web_company_name:string>


==== q96 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(5) HashAggregate(keys=[], functions=[count(1)], output=[count(1)#20341L])
   +- ShuffleQueryStage 3
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=164770]
         +- *(4) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#20344L])
            +- *(4) Project
               +- *(4) BroadcastHashJoin [ss_store_sk#421], [s_store_sk#52], Inner, BuildRight, false
                  :- *(4) Project [ss_store_sk#421]
                  :  +- *(4) BroadcastHashJoin [ss_sold_time_sk#415], [t_time_sk#15927], Inner, BuildRight, false
                  :     :- *(4) Project [ss_sold_time_sk#415, ss_store_sk#421]
                  :     :  +- *(4) BroadcastHashJoin [ss_hdemo_sk#419], [hd_demo_sk#5551], Inner, BuildRight, false
                  :     :     :- *(4) Filter ((isnotnull(ss_hdemo_sk#419) AND isnotnull(ss_sold_time_sk#415)) AND isnotnull(ss_store_sk#421))
                  :     :     :  +- *(4) ColumnarToRow
                  :     :     :     +- FileScan parquet default.store_sales[ss_sold_time_sk#415,ss_hdemo_sk#419,ss_store_sk#421] Batched: true, DataFilters: [isnotnull(ss_hdemo_sk#419), isnotnull(ss_sold_time_sk#415), isnotnull(ss_store_sk#421)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_hdemo_sk), IsNotNull(ss_sold_time_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_hdemo_sk:int,ss_store_sk:int>
                  :     :     +- BroadcastQueryStage 0
                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=164546]
                  :     :           +- *(1) Project [hd_demo_sk#5551]
                  :     :              +- *(1) Filter ((isnotnull(hd_dep_count#5554) AND (hd_dep_count#5554 = 7)) AND isnotnull(hd_demo_sk#5551))
                  :     :                 +- *(1) ColumnarToRow
                  :     :                    +- FileScan parquet default.household_demographics[hd_demo_sk#5551,hd_dep_count#5554] Batched: true, DataFilters: [isnotnull(hd_dep_count#5554), (hd_dep_count#5554 = 7), isnotnull(hd_demo_sk#5551)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/household_demographics], PartitionFilters: [], PushedFilters: [IsNotNull(hd_dep_count), EqualTo(hd_dep_count,7), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>
                  :     +- BroadcastQueryStage 1
                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=164567]
                  :           +- *(2) Project [t_time_sk#15927]
                  :              +- *(2) Filter ((((isnotnull(t_hour#15930) AND isnotnull(t_minute#15931)) AND (t_hour#15930 = 20)) AND (t_minute#15931 >= 30)) AND isnotnull(t_time_sk#15927))
                  :                 +- *(2) ColumnarToRow
                  :                    +- FileScan parquet default.time_dim[t_time_sk#15927,t_hour#15930,t_minute#15931] Batched: true, DataFilters: [isnotnull(t_hour#15930), isnotnull(t_minute#15931), (t_hour#15930 = 20), (t_minute#15931 >= 30),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_hour), IsNotNull(t_minute), EqualTo(t_hour,20), GreaterThanOrEqual(t_minute,30), IsN..., ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int>
                  +- BroadcastQueryStage 2
                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=164588]
                        +- *(3) Project [s_store_sk#52]
                           +- *(3) Filter ((isnotnull(s_store_name#57) AND (s_store_name#57 = ese)) AND isnotnull(s_store_sk#52))
                              +- *(3) ColumnarToRow
                                 +- FileScan parquet default.store[s_store_sk#52,s_store_name#57] Batched: true, DataFilters: [isnotnull(s_store_name#57), (s_store_name#57 = ese), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_name), EqualTo(s_store_name,ese), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_name:string>

==== q97 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(8) HashAggregate(keys=[], functions=[sum(CASE WHEN (isnotnull(customer_sk#20348) AND isnull(customer_sk#20350)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#20348) AND isnotnull(customer_sk#20350)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#20348) AND isnotnull(customer_sk#20350)) THEN 1 ELSE 0 END)], output=[store_only#20345L, catalog_only#20346L, store_and_catalog#20347L])
   +- ShuffleQueryStage 5
      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=165265]
         +- *(7) HashAggregate(keys=[], functions=[partial_sum(CASE WHEN (isnotnull(customer_sk#20348) AND isnull(customer_sk#20350)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#20348) AND isnotnull(customer_sk#20350)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#20348) AND isnotnull(customer_sk#20350)) THEN 1 ELSE 0 END)], output=[sum#20390L, sum#20391L, sum#20392L])
            +- *(7) Project [customer_sk#20348, customer_sk#20350]
               +- *(7) SortMergeJoin [customer_sk#20348, item_sk#20349], [customer_sk#20350, item_sk#20351], FullOuter
                  :- *(5) Sort [customer_sk#20348 ASC NULLS FIRST, item_sk#20349 ASC NULLS FIRST], false, 0
                  :  +- *(5) HashAggregate(keys=[ss_customer_sk#417, ss_item_sk#416], functions=[], output=[customer_sk#20348, item_sk#20349])
                  :     +- ShuffleQueryStage 3
                  :        +- Exchange hashpartitioning(ss_customer_sk#417, ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=165135]
                  :           +- *(3) HashAggregate(keys=[ss_customer_sk#417, ss_item_sk#416], functions=[], output=[ss_customer_sk#417, ss_item_sk#416])
                  :              +- *(3) Project [ss_item_sk#416, ss_customer_sk#417]
                  :                 +- *(3) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                  :                    :- *(3) Filter isnotnull(ss_sold_date_sk#414)
                  :                    :  +- *(3) ColumnarToRow
                  :                    :     +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_customer_sk#417] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>
                  :                    +- BroadcastQueryStage 0
                  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=164970]
                  :                          +- *(1) Project [d_date_sk#24]
                  :                             +- *(1) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                  :                                +- *(1) ColumnarToRow
                  :                                   +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
                  +- *(6) Sort [customer_sk#20350 ASC NULLS FIRST, item_sk#20351 ASC NULLS FIRST], false, 0
                     +- *(6) HashAggregate(keys=[cs_bill_customer_sk#200, cs_item_sk#212], functions=[], output=[customer_sk#20350, item_sk#20351])
                        +- ShuffleQueryStage 4
                           +- Exchange hashpartitioning(cs_bill_customer_sk#200, cs_item_sk#212, 20), ENSURE_REQUIREMENTS, [plan_id=165167]
                              +- *(4) HashAggregate(keys=[cs_bill_customer_sk#200, cs_item_sk#212], functions=[], output=[cs_bill_customer_sk#200, cs_item_sk#212])
                                 +- *(4) Project [cs_bill_customer_sk#200, cs_item_sk#212]
                                    +- *(4) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#20352], Inner, BuildRight, false
                                       :- *(4) Filter isnotnull(cs_sold_date_sk#197)
                                       :  +- *(4) ColumnarToRow
                                       :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_bill_customer_sk#200,cs_item_sk#212] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#197)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>
                                       +- BroadcastQueryStage 2
                                          +- ReusedExchange [d_date_sk#20352], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=164970]


==== q98 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   *(8) Project [i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#20405, revenueratio#20406]
   +- *(8) Sort [i_category#449 ASC NULLS FIRST, i_class#447 ASC NULLS FIRST, i_item_id#438 ASC NULLS FIRST, i_item_desc#441 ASC NULLS FIRST, revenueratio#20406 ASC NULLS FIRST], true, 0
      +- ShuffleQueryStage 6
         +- Exchange rangepartitioning(i_category#449 ASC NULLS FIRST, i_class#447 ASC NULLS FIRST, i_item_id#438 ASC NULLS FIRST, i_item_desc#441 ASC NULLS FIRST, revenueratio#20406 ASC NULLS FIRST, 20), ENSURE_REQUIREMENTS, [plan_id=165899]
            +- *(7) Project [i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#20405, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#20411) * 100.00), DecimalType(21,2)) as decimal(27,2))) / promote_precision(_we0#20413)), DecimalType(38,17)) AS revenueratio#20406, i_item_id#438]
               +- Window [sum(_w1#20412) windowspecdefinition(i_class#447, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#20413], [i_class#447]
                  +- *(6) Sort [i_class#447 ASC NULLS FIRST], false, 0
                     +- ShuffleQueryStage 5
                        +- Exchange hashpartitioning(i_class#447, 20), ENSURE_REQUIREMENTS, [plan_id=165850]
                           +- *(5) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442], functions=[sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_desc#441, i_category#449, i_class#447, i_current_price#442, itemrevenue#20405, _w0#20411, _w1#20412, i_item_id#438])
                              +- ShuffleQueryStage 4
                                 +- Exchange hashpartitioning(i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442, 20), ENSURE_REQUIREMENTS, [plan_id=165787]
                                    +- *(4) HashAggregate(keys=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#429))], output=[i_item_id#438, i_item_desc#441, i_category#449, i_class#447, i_current_price#442, sum#20421L])
                                       +- *(4) Project [ss_ext_sales_price#429, i_item_id#438, i_item_desc#441, i_current_price#442, i_class#447, i_category#449]
                                          +- *(4) BroadcastHashJoin [ss_sold_date_sk#414], [d_date_sk#24], Inner, BuildRight, false
                                             :- *(4) Project [ss_sold_date_sk#414, ss_ext_sales_price#429, i_item_id#438, i_item_desc#441, i_current_price#442, i_class#447, i_category#449]
                                             :  +- *(4) BroadcastHashJoin [ss_item_sk#416], [i_item_sk#437], Inner, BuildRight, false
                                             :     :- AQEShuffleRead local
                                             :     :  +- ShuffleQueryStage 0
                                             :     :     +- Exchange hashpartitioning(ss_item_sk#416, 20), ENSURE_REQUIREMENTS, [plan_id=165442]
                                             :     :        +- *(1) Filter (isnotnull(ss_item_sk#416) AND isnotnull(ss_sold_date_sk#414))
                                             :     :           +- *(1) ColumnarToRow
                                             :     :              +- FileScan parquet default.store_sales[ss_sold_date_sk#414,ss_item_sk#416,ss_ext_sales_price#429] Batched: true, DataFilters: [isnotnull(ss_item_sk#416), isnotnull(ss_sold_date_sk#414)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>
                                             :     +- BroadcastQueryStage 3
                                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=165684]
                                             :           +- AQEShuffleRead local
                                             :              +- ShuffleQueryStage 1
                                             :                 +- Exchange hashpartitioning(i_item_sk#437, 20), ENSURE_REQUIREMENTS, [plan_id=165459]
                                             :                    +- *(2) Filter (i_category#449 IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#437))
                                             :                       +- *(2) ColumnarToRow
                                             :                          +- FileScan parquet default.item[i_item_sk#437,i_item_id#438,i_item_desc#441,i_current_price#442,i_class#447,i_category#449] Batched: true, DataFilters: [i_category#449 IN (Sports                                            ,Books                     ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books                                             ,Home                         ..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...
                                             +- BroadcastQueryStage 2
                                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=165480]
                                                   +- *(3) Project [d_date_sk#24]
                                                      +- *(3) Filter (((isnotnull(d_date#26) AND (d_date#26 >= 1999-02-22)) AND (d_date#26 <= 1999-03-24)) AND isnotnull(d_date_sk#24))
                                                         +- *(3) ColumnarToRow
                                                            +- FileScan parquet default.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (d_date#26 >= 1999-02-22), (d_date#26 <= 1999-03-24), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>


==== q99 ====
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=true
+- == Final Plan ==
   TakeOrderedAndProject(limit=100, orderBy=[substr(w_warehouse_name, 1, 20)#20440 ASC NULLS FIRST,sm_type#15683 ASC NULLS FIRST,cc_name#7114 ASC NULLS FIRST], output=[substr(w_warehouse_name, 1, 20)#20440,sm_type#15683,cc_name#7114,30 days #20430L,31 - 60 days #20431L,61 - 90 days #20432L,91 - 120 days #20433L,>120 days #20434L])
   +- *(6) HashAggregate(keys=[_groupingexpression#20449, sm_type#15683, cc_name#7114], functions=[sum(CASE WHEN ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 30) THEN 1 ELSE 0 END), sum(CASE WHEN (((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 30) AND ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 60)) THEN 1 ELSE 0 END), sum(CASE WHEN (((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 60) AND ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 90)) THEN 1 ELSE 0 END), sum(CASE WHEN (((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 90) AND ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 120)) THEN 1 ELSE 0 END), sum(CASE WHEN ((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 120) THEN 1 ELSE 0 END)], output=[substr(w_warehouse_name, 1, 20)#20440, sm_type#15683, cc_name#7114, 30 days #20430L, 31 - 60 days #20431L, 61 - 90 days #20432L, 91 - 120 days #20433L, >120 days #20434L])
      +- ShuffleQueryStage 4
         +- Exchange hashpartitioning(_groupingexpression#20449, sm_type#15683, cc_name#7114, 20), ENSURE_REQUIREMENTS, [plan_id=166433]
            +- *(5) HashAggregate(keys=[_groupingexpression#20449, sm_type#15683, cc_name#7114], functions=[partial_sum(CASE WHEN ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 30) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 30) AND ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 60)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 60) AND ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 90)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 90) AND ((cs_ship_date_sk#199 - cs_sold_date_sk#197) <= 120)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN ((cs_ship_date_sk#199 - cs_sold_date_sk#197) > 120) THEN 1 ELSE 0 END)], output=[_groupingexpression#20449, sm_type#15683, cc_name#7114, sum#20455L, sum#20456L, sum#20457L, sum#20458L, sum#20459L])
               +- *(5) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, sm_type#15683, cc_name#7114, substr(w_warehouse_name#8011, 1, 20) AS _groupingexpression#20449]
                  +- *(5) BroadcastHashJoin [cs_ship_date_sk#199], [d_date_sk#24], Inner, BuildRight, false
                     :- *(5) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, w_warehouse_name#8011, sm_type#15683, cc_name#7114]
                     :  +- *(5) BroadcastHashJoin [cs_call_center_sk#208], [cc_call_center_sk#7108], Inner, BuildRight, false
                     :     :- *(5) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_call_center_sk#208, w_warehouse_name#8011, sm_type#15683]
                     :     :  +- *(5) BroadcastHashJoin [cs_ship_mode_sk#210], [sm_ship_mode_sk#15681], Inner, BuildRight, false
                     :     :     :- *(5) Project [cs_sold_date_sk#197, cs_ship_date_sk#199, cs_call_center_sk#208, cs_ship_mode_sk#210, w_warehouse_name#8011]
                     :     :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#211], [w_warehouse_sk#8009], Inner, BuildRight, false
                     :     :     :     :- *(5) Filter (((isnotnull(cs_warehouse_sk#211) AND isnotnull(cs_ship_mode_sk#210)) AND isnotnull(cs_call_center_sk#208)) AND isnotnull(cs_ship_date_sk#199))
                     :     :     :     :  +- *(5) ColumnarToRow
                     :     :     :     :     +- FileScan parquet default.catalog_sales[cs_sold_date_sk#197,cs_ship_date_sk#199,cs_call_center_sk#208,cs_ship_mode_sk#210,cs_warehouse_sk#211] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#211), isnotnull(cs_ship_mode_sk#210), isnotnull(cs_call_center_sk#208)..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_ship_mode_sk), IsNotNull(cs_call_center_sk), IsNotNull(..., ReadSchema: struct<cs_sold_date_sk:int,cs_ship_date_sk:int,cs_call_center_sk:int,cs_ship_mode_sk:int,cs_wareh...
                     :     :     :     +- BroadcastQueryStage 0
                     :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=166087]
                     :     :     :           +- *(1) Filter isnotnull(w_warehouse_sk#8009)
                     :     :     :              +- *(1) ColumnarToRow
                     :     :     :                 +- FileScan parquet default.warehouse[w_warehouse_sk#8009,w_warehouse_name#8011] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#8009)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>
                     :     :     +- BroadcastQueryStage 1
                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=166104]
                     :     :           +- *(2) Filter isnotnull(sm_ship_mode_sk#15681)
                     :     :              +- *(2) ColumnarToRow
                     :     :                 +- FileScan parquet default.ship_mode[sm_ship_mode_sk#15681,sm_type#15683] Batched: true, DataFilters: [isnotnull(sm_ship_mode_sk#15681)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/ship_mode], PartitionFilters: [], PushedFilters: [IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_type:string>
                     :     +- BroadcastQueryStage 2
                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=166121]
                     :           +- *(3) Filter isnotnull(cc_call_center_sk#7108)
                     :              +- *(3) ColumnarToRow
                     :                 +- FileScan parquet default.call_center[cc_call_center_sk#7108,cc_name#7114] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#7108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>
                     +- BroadcastQueryStage 3
                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=166140]
                           +- *(4) Project [d_date_sk#24]
                              +- *(4) Filter (((isnotnull(d_month_seq#27) AND (d_month_seq#27 >= 1200)) AND (d_month_seq#27 <= 1211)) AND isnotnull(d_date_sk#24))
                                 +- *(4) ColumnarToRow
                                    +- FileScan parquet default.date_dim[d_date_sk#24,d_month_seq#27] Batched: true, DataFilters: [isnotnull(d_month_seq#27), (d_month_seq#27 >= 1200), (d_month_seq#27 <= 1211), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node001:9100/benchmark/tpcdsTable/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211),..., ReadSchema: struct<d_date_sk:int,d_month_seq:int>
